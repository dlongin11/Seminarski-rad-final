
i2c_bmp290_stm32_example_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009388  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08009558  08009558  0000a558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b18  08009b18  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b18  08009b18  0000ab18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b20  08009b20  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b20  08009b20  0000ab20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b24  08009b24  0000ab24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009b28  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001e4  08009d0c  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08009d0c  0000b620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ca9  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6d  00000000  00000000  0001debd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00020a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc1  00000000  00000000  00021bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fc0  00000000  00000000  00022989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169f2  00000000  00000000  00046949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5dca  00000000  00000000  0005d33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b18  00000000  00000000  00133148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00138c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009540 	.word	0x08009540

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08009540 	.word	0x08009540

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <bmp280_init_default_params>:
#define BMP280_REG_HUM_CALIB   0x88

#define BMP280_RESET_VALUE     0xB6


void bmp280_init_default_params(bmp280_params_t *params) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	715a      	strb	r2, [r3, #5]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	8af9      	ldrh	r1, [r7, #22]
 8000fd0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f002 fe29 	bl	8003c38 <HAL_I2C_Mem_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10b      	bne.n	8001004 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fec:	7d7b      	ldrb	r3, [r7, #21]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7d3b      	ldrb	r3, [r7, #20]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	801a      	strh	r2, [r3, #0]
		return true;
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <read_register16+0x56>
	} else
		return false;
 8001004:	2300      	movs	r3, #0

}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b08b      	sub	sp, #44	@ 0x2c
 8001012:	af04      	add	r7, sp, #16
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	72fb      	strb	r3, [r7, #11]
 800101e:	4613      	mov	r3, r2
 8001020:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	b29a      	uxth	r2, r3
 8001032:	7abb      	ldrb	r3, [r7, #10]
 8001034:	b29b      	uxth	r3, r3
 8001036:	8af9      	ldrh	r1, [r7, #22]
 8001038:	f241 3488 	movw	r4, #5000	@ 0x1388
 800103c:	9402      	str	r4, [sp, #8]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	f002 fdf7 	bl	8003c38 <HAL_I2C_Mem_Read>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <read_data+0x46>
		return 0;
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <read_data+0x48>
	else
		return 1;
 8001054:	2301      	movs	r3, #1

}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	461a      	mov	r2, r3
 800106a:	2188      	movs	r1, #136	@ 0x88
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff9f 	bl	8000fb0 <read_register16>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d06f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3302      	adds	r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	218a      	movs	r1, #138	@ 0x8a
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff95 	bl	8000fb0 <read_register16>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d065      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	461a      	mov	r2, r3
 8001092:	218c      	movs	r1, #140	@ 0x8c
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff8b 	bl	8000fb0 <read_register16>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3306      	adds	r3, #6
 80010a4:	461a      	mov	r2, r3
 80010a6:	218e      	movs	r1, #142	@ 0x8e
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff81 	bl	8000fb0 <read_register16>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d051      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3308      	adds	r3, #8
 80010b8:	461a      	mov	r2, r3
 80010ba:	2190      	movs	r1, #144	@ 0x90
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff77 	bl	8000fb0 <read_register16>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d047      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	330a      	adds	r3, #10
 80010cc:	461a      	mov	r2, r3
 80010ce:	2192      	movs	r1, #146	@ 0x92
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff6d 	bl	8000fb0 <read_register16>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d03d      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	330c      	adds	r3, #12
 80010e0:	461a      	mov	r2, r3
 80010e2:	2194      	movs	r1, #148	@ 0x94
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff63 	bl	8000fb0 <read_register16>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d033      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	330e      	adds	r3, #14
 80010f4:	461a      	mov	r2, r3
 80010f6:	2196      	movs	r1, #150	@ 0x96
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff59 	bl	8000fb0 <read_register16>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d029      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3310      	adds	r3, #16
 8001108:	461a      	mov	r2, r3
 800110a:	2198      	movs	r1, #152	@ 0x98
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff4f 	bl	8000fb0 <read_register16>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3312      	adds	r3, #18
 800111c:	461a      	mov	r2, r3
 800111e:	219a      	movs	r1, #154	@ 0x9a
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff45 	bl	8000fb0 <read_register16>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d015      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3314      	adds	r3, #20
 8001130:	461a      	mov	r2, r3
 8001132:	219c      	movs	r1, #156	@ 0x9c
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff3b 	bl	8000fb0 <read_register16>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001144:	461a      	mov	r2, r3
 8001146:	219e      	movs	r1, #158	@ 0x9e
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff31 	bl	8000fb0 <read_register16>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <read_calibration_data+0xfa>

		return true;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <read_calibration_data+0xfc>
	}

	return false;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f103 0218 	add.w	r2, r3, #24
 8001170:	2301      	movs	r3, #1
 8001172:	21a1      	movs	r1, #161	@ 0xa1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff4a 	bl	800100e <read_data>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14b      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	331a      	adds	r3, #26
 8001184:	461a      	mov	r2, r3
 8001186:	21e1      	movs	r1, #225	@ 0xe1
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff11 	bl	8000fb0 <read_register16>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d041      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 021c 	add.w	r2, r3, #28
 800119a:	2301      	movs	r3, #1
 800119c:	21e3      	movs	r1, #227	@ 0xe3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff35 	bl	800100e <read_data>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d136      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011aa:	f107 030e 	add.w	r3, r7, #14
 80011ae:	461a      	mov	r2, r3
 80011b0:	21e4      	movs	r1, #228	@ 0xe4
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fefc 	bl	8000fb0 <read_register16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d02c      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	461a      	mov	r2, r3
 80011c4:	21e5      	movs	r1, #229	@ 0xe5
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fef2 	bl	8000fb0 <read_register16>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80011d8:	2301      	movs	r3, #1
 80011da:	21e7      	movs	r1, #231	@ 0xe7
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff16 	bl	800100e <read_data>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d117      	bne.n	8001218 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	b29b      	uxth	r3, r3
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	841a      	strh	r2, [r3, #32]

		return true;
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b088      	sub	sp, #32
 8001226:	af04      	add	r7, sp, #16
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
 800122e:	4613      	mov	r3, r2
 8001230:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	b29a      	uxth	r2, r3
 8001242:	89f9      	ldrh	r1, [r7, #14]
 8001244:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1cbb      	adds	r3, r7, #2
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	f002 fbf6 	bl	8003a44 <HAL_I2C_Mem_Write>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <write_register8+0x40>
		return false;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <write_register8+0x42>
	else
		return true;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b092      	sub	sp, #72	@ 0x48
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    char buffer[50];  // Buffer to hold the formatted string

    sprintf(buffer, "Beginning of init\n");
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	49b5      	ldr	r1, [pc, #724]	@ (8001550 <bmp280_init+0x2e4>)
 800127c:	4618      	mov	r0, r3
 800127e:	f006 f833 	bl	80072e8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f812 	bl	80002b0 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	f107 0110 	add.w	r1, r7, #16
 8001294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001298:	48ae      	ldr	r0, [pc, #696]	@ (8001554 <bmp280_init+0x2e8>)
 800129a:	f004 ff4f 	bl	800613c <HAL_UART_Transmit>


	if (dev->addr != BMP280_I2C_ADDRESS_0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012a2:	2b76      	cmp	r3, #118	@ 0x76
 80012a4:	d01c      	beq.n	80012e0 <bmp280_init+0x74>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012aa:	2b77      	cmp	r3, #119	@ 0x77
 80012ac:	d018      	beq.n	80012e0 <bmp280_init+0x74>
        sprintf(buffer, "Invalid address: 0x%x\n", dev->addr);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012b2:	461a      	mov	r2, r3
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	49a7      	ldr	r1, [pc, #668]	@ (8001558 <bmp280_init+0x2ec>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f006 f814 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe fff3 	bl	80002b0 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f107 0110 	add.w	r1, r7, #16
 80012d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d6:	489f      	ldr	r0, [pc, #636]	@ (8001554 <bmp280_init+0x2e8>)
 80012d8:	f004 ff30 	bl	800613c <HAL_UART_Transmit>

		return false;
 80012dc:	2300      	movs	r3, #0
 80012de:	e182      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80012e6:	2301      	movs	r3, #1
 80012e8:	21d0      	movs	r1, #208	@ 0xd0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fe8f 	bl	800100e <read_data>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d015      	beq.n	8001322 <bmp280_init+0xb6>
        sprintf(buffer, "Failed to read device ID\n");
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4998      	ldr	r1, [pc, #608]	@ (800155c <bmp280_init+0x2f0>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f005 fff3 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ffd2 	bl	80002b0 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f107 0110 	add.w	r1, r7, #16
 8001314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001318:	488e      	ldr	r0, [pc, #568]	@ (8001554 <bmp280_init+0x2e8>)
 800131a:	f004 ff0f 	bl	800613c <HAL_UART_Transmit>


		return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e161      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001328:	2b58      	cmp	r3, #88	@ 0x58
 800132a:	d01e      	beq.n	800136a <bmp280_init+0xfe>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001332:	2b60      	cmp	r3, #96	@ 0x60
 8001334:	d019      	beq.n	800136a <bmp280_init+0xfe>
        sprintf(buffer, "Unknown device ID: 0x%x\n", dev->id);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800133c:	461a      	mov	r2, r3
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4987      	ldr	r1, [pc, #540]	@ (8001560 <bmp280_init+0x2f4>)
 8001344:	4618      	mov	r0, r3
 8001346:	f005 ffcf 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ffae 	bl	80002b0 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f107 0110 	add.w	r1, r7, #16
 800135c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001360:	487c      	ldr	r0, [pc, #496]	@ (8001554 <bmp280_init+0x2e8>)
 8001362:	f004 feeb 	bl	800613c <HAL_UART_Transmit>


		return false;
 8001366:	2300      	movs	r3, #0
 8001368:	e13d      	b.n	80015e6 <bmp280_init+0x37a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800136a:	22b6      	movs	r2, #182	@ 0xb6
 800136c:	21e0      	movs	r1, #224	@ 0xe0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff57 	bl	8001222 <write_register8>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <bmp280_init+0x13a>
        sprintf(buffer, "Failed to reset device\n");
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4979      	ldr	r1, [pc, #484]	@ (8001564 <bmp280_init+0x2f8>)
 8001380:	4618      	mov	r0, r3
 8001382:	f005 ffb1 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff90 	bl	80002b0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0110 	add.w	r1, r7, #16
 8001398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139c:	486d      	ldr	r0, [pc, #436]	@ (8001554 <bmp280_init+0x2e8>)
 800139e:	f004 fecd 	bl	800613c <HAL_UART_Transmit>


		return false;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e11f      	b.n	80015e6 <bmp280_init+0x37a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80013a6:	f107 020f 	add.w	r2, r7, #15
 80013aa:	2301      	movs	r3, #1
 80013ac:	21f3      	movs	r1, #243	@ 0xf3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fe2d 	bl	800100e <read_data>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f5      	bne.n	80013a6 <bmp280_init+0x13a>
				&& (status & 1) == 0)
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <bmp280_init+0x13a>
			break;
	}

	if (!read_calibration_data(dev)) {
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fe4a 	bl	800105e <read_calibration_data>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <bmp280_init+0x16c>
 80013d6:	e015      	b.n	8001404 <bmp280_init+0x198>
        sprintf(buffer, "Failed to read calibration data\n");
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4962      	ldr	r1, [pc, #392]	@ (8001568 <bmp280_init+0x2fc>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 ff82 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff61 	bl	80002b0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f107 0110 	add.w	r1, r7, #16
 80013f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fa:	4856      	ldr	r0, [pc, #344]	@ (8001554 <bmp280_init+0x2e8>)
 80013fc:	f004 fe9e 	bl	800613c <HAL_UART_Transmit>


		return false;
 8001400:	2300      	movs	r3, #0
 8001402:	e0f0      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800140a:	2b60      	cmp	r3, #96	@ 0x60
 800140c:	d11e      	bne.n	800144c <bmp280_init+0x1e0>
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fea7 	bl	8001162 <read_hum_calibration_data>
 8001414:	4603      	mov	r3, r0
 8001416:	f083 0301 	eor.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <bmp280_init+0x1e0>
        sprintf(buffer, "Failed to read humidity calibration data\n");
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4951      	ldr	r1, [pc, #324]	@ (800156c <bmp280_init+0x300>)
 8001426:	4618      	mov	r0, r3
 8001428:	f005 ff5e 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe ff3d 	bl	80002b0 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	f107 0110 	add.w	r1, r7, #16
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	4844      	ldr	r0, [pc, #272]	@ (8001554 <bmp280_init+0x2e8>)
 8001444:	f004 fe7a 	bl	800613c <HAL_UART_Transmit>


		return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e0cc      	b.n	80015e6 <bmp280_init+0x37a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	795b      	ldrb	r3, [r3, #5]
 8001450:	015b      	lsls	r3, r3, #5
 8001452:	b25a      	sxtb	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	b25b      	sxtb	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b25b      	sxtb	r3, r3
 8001460:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001464:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001468:	461a      	mov	r2, r3
 800146a:	21f5      	movs	r1, #245	@ 0xf5
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fed8 	bl	8001222 <write_register8>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <bmp280_init+0x238>
        sprintf(buffer, "Failed to write config register\n");
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	493c      	ldr	r1, [pc, #240]	@ (8001570 <bmp280_init+0x304>)
 800147e:	4618      	mov	r0, r3
 8001480:	f005 ff32 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ff11 	bl	80002b0 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	f107 0110 	add.w	r1, r7, #16
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	482e      	ldr	r0, [pc, #184]	@ (8001554 <bmp280_init+0x2e8>)
 800149c:	f004 fe4e 	bl	800613c <HAL_UART_Transmit>


		return false;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e0a0      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d116      	bne.n	80014da <bmp280_init+0x26e>
        sprintf(buffer, "Setting forced mode\n");
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4930      	ldr	r1, [pc, #192]	@ (8001574 <bmp280_init+0x308>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 ff18 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fef7 	bl	80002b0 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f107 0110 	add.w	r1, r7, #16
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	4821      	ldr	r0, [pc, #132]	@ (8001554 <bmp280_init+0x2e8>)
 80014d0:	f004 fe34 	bl	800613c <HAL_UART_Transmit>


		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	if (dev->id == BME280_CHIP_ID) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001502:	2b60      	cmp	r3, #96	@ 0x60
 8001504:	d13a      	bne.n	800157c <bmp280_init+0x310>
        sprintf(buffer, "Configuring humidity oversampling\n");
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	491b      	ldr	r1, [pc, #108]	@ (8001578 <bmp280_init+0x30c>)
 800150c:	4618      	mov	r0, r3
 800150e:	f005 feeb 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe feca 	bl	80002b0 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f107 0110 	add.w	r1, r7, #16
 8001524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001528:	480a      	ldr	r0, [pc, #40]	@ (8001554 <bmp280_init+0x2e8>)
 800152a:	f004 fe07 	bl	800613c <HAL_UART_Transmit>


		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001536:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800153a:	461a      	mov	r2, r3
 800153c:	21f2      	movs	r1, #242	@ 0xf2
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fe6f 	bl	8001222 <write_register8>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d018      	beq.n	800157c <bmp280_init+0x310>
			return false;
 800154a:	2300      	movs	r3, #0
 800154c:	e04b      	b.n	80015e6 <bmp280_init+0x37a>
 800154e:	bf00      	nop
 8001550:	08009558 	.word	0x08009558
 8001554:	20000488 	.word	0x20000488
 8001558:	0800956c 	.word	0x0800956c
 800155c:	08009584 	.word	0x08009584
 8001560:	080095a0 	.word	0x080095a0
 8001564:	080095bc 	.word	0x080095bc
 8001568:	080095d4 	.word	0x080095d4
 800156c:	080095f8 	.word	0x080095f8
 8001570:	08009624 	.word	0x08009624
 8001574:	08009648 	.word	0x08009648
 8001578:	08009660 	.word	0x08009660
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800157c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001580:	461a      	mov	r2, r3
 8001582:	21f4      	movs	r1, #244	@ 0xf4
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fe4c 	bl	8001222 <write_register8>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d015      	beq.n	80015bc <bmp280_init+0x350>
        sprintf(buffer, "BMP280_REG_CTRL something something\n");
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4916      	ldr	r1, [pc, #88]	@ (80015f0 <bmp280_init+0x384>)
 8001596:	4618      	mov	r0, r3
 8001598:	f005 fea6 	bl	80072e8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fe85 	bl	80002b0 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f107 0110 	add.w	r1, r7, #16
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	4810      	ldr	r0, [pc, #64]	@ (80015f4 <bmp280_init+0x388>)
 80015b4:	f004 fdc2 	bl	800613c <HAL_UART_Transmit>


		return false;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e014      	b.n	80015e6 <bmp280_init+0x37a>
	}
    sprintf(buffer, "before returning true\n");
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <bmp280_init+0x38c>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 fe90 	bl	80072e8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fe6f 	bl	80002b0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f107 0110 	add.w	r1, r7, #16
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <bmp280_init+0x388>)
 80015e0:	f004 fdac 	bl	800613c <HAL_UART_Transmit>

	return true;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3748      	adds	r7, #72	@ 0x48
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	08009684 	.word	0x08009684
 80015f4:	20000488 	.word	0x20000488
 80015f8:	080096ac 	.word	0x080096ac

080015fc <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	10da      	asrs	r2, r3, #3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800161e:	12db      	asrs	r3, r3, #11
 8001620:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	111b      	asrs	r3, r3, #4
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	8812      	ldrh	r2, [r2, #0]
 800162a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	1112      	asrs	r2, r2, #4
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	8809      	ldrh	r1, [r1, #0]
 8001634:	1a52      	subs	r2, r2, r1
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001642:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001646:	139b      	asrs	r3, r3, #14
 8001648:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	441a      	add	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3380      	adds	r3, #128	@ 0x80
 8001660:	121b      	asrs	r3, r3, #8
}
 8001662:	4618      	mov	r0, r3
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800166e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001672:	b0cc      	sub	sp, #304	@ 0x130
 8001674:	af00      	add	r7, sp, #0
 8001676:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800167a:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800167e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001686:	17da      	asrs	r2, r3, #31
 8001688:	461c      	mov	r4, r3
 800168a:	4615      	mov	r5, r2
 800168c:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001690:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001694:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001698:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800169c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016a0:	fb03 f102 	mul.w	r1, r3, r2
 80016a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	18ca      	adds	r2, r1, r3
 80016b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016b6:	fba3 8903 	umull	r8, r9, r3, r3
 80016ba:	eb02 0309 	add.w	r3, r2, r9
 80016be:	4699      	mov	r9, r3
 80016c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	17da      	asrs	r2, r3, #31
 80016cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80016d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80016d4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016d8:	4603      	mov	r3, r0
 80016da:	fb03 f209 	mul.w	r2, r3, r9
 80016de:	460b      	mov	r3, r1
 80016e0:	fb08 f303 	mul.w	r3, r8, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	4602      	mov	r2, r0
 80016e8:	fba8 1202 	umull	r1, r2, r8, r2
 80016ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80016f0:	460a      	mov	r2, r1
 80016f2:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80016f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80016fa:	4413      	add	r3, r2
 80016fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001700:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001704:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001708:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800170c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001710:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001714:	b21b      	sxth	r3, r3
 8001716:	17da      	asrs	r2, r3, #31
 8001718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800171c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001720:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001724:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001728:	462a      	mov	r2, r5
 800172a:	fb02 f203 	mul.w	r2, r2, r3
 800172e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001732:	4621      	mov	r1, r4
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	441a      	add	r2, r3
 800173a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800173e:	4621      	mov	r1, r4
 8001740:	fba3 1301 	umull	r1, r3, r3, r1
 8001744:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001748:	460b      	mov	r3, r1
 800174a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800174e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001752:	18d3      	adds	r3, r2, r3
 8001754:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001764:	462b      	mov	r3, r5
 8001766:	0459      	lsls	r1, r3, #17
 8001768:	4623      	mov	r3, r4
 800176a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800176e:	4623      	mov	r3, r4
 8001770:	0458      	lsls	r0, r3, #17
 8001772:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001776:	1814      	adds	r4, r2, r0
 8001778:	643c      	str	r4, [r7, #64]	@ 0x40
 800177a:	414b      	adcs	r3, r1
 800177c:	647b      	str	r3, [r7, #68]	@ 0x44
 800177e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001782:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800178a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800178e:	b21b      	sxth	r3, r3
 8001790:	17da      	asrs	r2, r3, #31
 8001792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001796:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017a6:	00d9      	lsls	r1, r3, #3
 80017a8:	2000      	movs	r0, #0
 80017aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017ae:	1814      	adds	r4, r2, r0
 80017b0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80017b2:	414b      	adcs	r3, r1
 80017b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017b6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80017ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017be:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017c6:	fb03 f102 	mul.w	r1, r3, r2
 80017ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	18ca      	adds	r2, r1, r3
 80017d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017dc:	fba3 1303 	umull	r1, r3, r3, r3
 80017e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017e4:	460b      	mov	r3, r1
 80017e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80017ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017ee:	18d3      	adds	r3, r2, r3
 80017f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	17da      	asrs	r2, r3, #31
 8001800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001804:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001808:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800180c:	462b      	mov	r3, r5
 800180e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001812:	4642      	mov	r2, r8
 8001814:	fb02 f203 	mul.w	r2, r2, r3
 8001818:	464b      	mov	r3, r9
 800181a:	4621      	mov	r1, r4
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	4622      	mov	r2, r4
 8001824:	4641      	mov	r1, r8
 8001826:	fba2 1201 	umull	r1, r2, r2, r1
 800182a:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800182e:	460a      	mov	r2, r1
 8001830:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001834:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001838:	4413      	add	r3, r2
 800183a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800184a:	4623      	mov	r3, r4
 800184c:	0a18      	lsrs	r0, r3, #8
 800184e:	462b      	mov	r3, r5
 8001850:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001854:	462b      	mov	r3, r5
 8001856:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800185c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001860:	b21b      	sxth	r3, r3
 8001862:	17da      	asrs	r2, r3, #31
 8001864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001868:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800186c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001870:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001874:	464a      	mov	r2, r9
 8001876:	fb02 f203 	mul.w	r2, r2, r3
 800187a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800187e:	4644      	mov	r4, r8
 8001880:	fb04 f303 	mul.w	r3, r4, r3
 8001884:	441a      	add	r2, r3
 8001886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800188a:	4644      	mov	r4, r8
 800188c:	fba3 4304 	umull	r4, r3, r3, r4
 8001890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001894:	4623      	mov	r3, r4
 8001896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800189a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800189e:	18d3      	adds	r3, r2, r3
 80018a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80018b0:	464c      	mov	r4, r9
 80018b2:	0323      	lsls	r3, r4, #12
 80018b4:	4644      	mov	r4, r8
 80018b6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018ba:	4644      	mov	r4, r8
 80018bc:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80018be:	1884      	adds	r4, r0, r2
 80018c0:	633c      	str	r4, [r7, #48]	@ 0x30
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80018cc:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80018d0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018d4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80018d8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80018dc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80018e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018e4:	88db      	ldrh	r3, [r3, #6]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2200      	movs	r2, #0
 80018ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018ee:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018f6:	462b      	mov	r3, r5
 80018f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80018fc:	4642      	mov	r2, r8
 80018fe:	fb02 f203 	mul.w	r2, r2, r3
 8001902:	464b      	mov	r3, r9
 8001904:	4621      	mov	r1, r4
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	4622      	mov	r2, r4
 800190e:	4641      	mov	r1, r8
 8001910:	fba2 1201 	umull	r1, r2, r2, r1
 8001914:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001918:	460a      	mov	r2, r1
 800191a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800191e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001922:	4413      	add	r3, r2
 8001924:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001934:	4629      	mov	r1, r5
 8001936:	104a      	asrs	r2, r1, #1
 8001938:	4629      	mov	r1, r5
 800193a:	17cb      	asrs	r3, r1, #31
 800193c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001940:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001944:	4313      	orrs	r3, r2
 8001946:	d101      	bne.n	800194c <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001948:	2300      	movs	r3, #0
 800194a:	e148      	b.n	8001bde <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800194c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001950:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001954:	17da      	asrs	r2, r3, #31
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800195a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800195e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001962:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800196c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001970:	07db      	lsls	r3, r3, #31
 8001972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001976:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800197a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800197e:	4621      	mov	r1, r4
 8001980:	1a89      	subs	r1, r1, r2
 8001982:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001984:	4629      	mov	r1, r5
 8001986:	eb61 0303 	sbc.w	r3, r1, r3
 800198a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800198c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001990:	4622      	mov	r2, r4
 8001992:	462b      	mov	r3, r5
 8001994:	1891      	adds	r1, r2, r2
 8001996:	6239      	str	r1, [r7, #32]
 8001998:	415b      	adcs	r3, r3
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
 800199c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a0:	4621      	mov	r1, r4
 80019a2:	1851      	adds	r1, r2, r1
 80019a4:	61b9      	str	r1, [r7, #24]
 80019a6:	4629      	mov	r1, r5
 80019a8:	414b      	adcs	r3, r1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019b8:	4649      	mov	r1, r9
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	4641      	mov	r1, r8
 80019be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c2:	4641      	mov	r1, r8
 80019c4:	018a      	lsls	r2, r1, #6
 80019c6:	4641      	mov	r1, r8
 80019c8:	1889      	adds	r1, r1, r2
 80019ca:	6139      	str	r1, [r7, #16]
 80019cc:	4649      	mov	r1, r9
 80019ce:	eb43 0101 	adc.w	r1, r3, r1
 80019d2:	6179      	str	r1, [r7, #20]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019e0:	4649      	mov	r1, r9
 80019e2:	008b      	lsls	r3, r1, #2
 80019e4:	4641      	mov	r1, r8
 80019e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019ea:	4641      	mov	r1, r8
 80019ec:	008a      	lsls	r2, r1, #2
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	4622      	mov	r2, r4
 80019f6:	189b      	adds	r3, r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	460b      	mov	r3, r1
 80019fc:	462a      	mov	r2, r5
 80019fe:	eb42 0303 	adc.w	r3, r2, r3
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a10:	4649      	mov	r1, r9
 8001a12:	008b      	lsls	r3, r1, #2
 8001a14:	4641      	mov	r1, r8
 8001a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	008a      	lsls	r2, r1, #2
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	4622      	mov	r2, r4
 8001a26:	189b      	adds	r3, r3, r2
 8001a28:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	eb42 0303 	adc.w	r3, r2, r3
 8001a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a34:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a38:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a3c:	f7ff f8d4 	bl	8000be8 <__aeabi_ldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a4c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	17da      	asrs	r2, r3, #31
 8001a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a58:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0b50      	lsrs	r0, r2, #13
 8001a66:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a6a:	1359      	asrs	r1, r3, #13
 8001a6c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a70:	462b      	mov	r3, r5
 8001a72:	fb00 f203 	mul.w	r2, r0, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	fb03 f301 	mul.w	r3, r3, r1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4622      	mov	r2, r4
 8001a80:	fba2 1200 	umull	r1, r2, r2, r0
 8001a84:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a88:	460a      	mov	r2, r1
 8001a8a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a92:	4413      	add	r3, r2
 8001a94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0b50      	lsrs	r0, r2, #13
 8001aa6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001aaa:	1359      	asrs	r1, r3, #13
 8001aac:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	fb00 f203 	mul.w	r2, r0, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	fb03 f301 	mul.w	r3, r3, r1
 8001abc:	4413      	add	r3, r2
 8001abe:	4622      	mov	r2, r4
 8001ac0:	fba2 1200 	umull	r1, r2, r2, r0
 8001ac4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ac8:	460a      	mov	r2, r1
 8001aca:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001ace:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	0e4a      	lsrs	r2, r1, #25
 8001ae8:	4629      	mov	r1, r5
 8001aea:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001aee:	4629      	mov	r1, r5
 8001af0:	164b      	asrs	r3, r1, #25
 8001af2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001afa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	17da      	asrs	r2, r3, #31
 8001b02:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b04:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b06:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b0a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b0e:	462a      	mov	r2, r5
 8001b10:	fb02 f203 	mul.w	r2, r2, r3
 8001b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b18:	4621      	mov	r1, r4
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b24:	4621      	mov	r1, r4
 8001b26:	fba2 1201 	umull	r1, r2, r2, r1
 8001b2a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b2e:	460a      	mov	r2, r1
 8001b30:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b34:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b38:	4413      	add	r3, r2
 8001b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	0cca      	lsrs	r2, r1, #19
 8001b4e:	4629      	mov	r1, r5
 8001b50:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b54:	4629      	mov	r1, r5
 8001b56:	14cb      	asrs	r3, r1, #19
 8001b58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001b5c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b60:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b64:	1884      	adds	r4, r0, r2
 8001b66:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001b68:	eb41 0303 	adc.w	r3, r1, r3
 8001b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b6e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b72:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b76:	4621      	mov	r1, r4
 8001b78:	1889      	adds	r1, r1, r2
 8001b7a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb43 0101 	adc.w	r1, r3, r1
 8001b82:	6579      	str	r1, [r7, #84]	@ 0x54
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b90:	4623      	mov	r3, r4
 8001b92:	0a18      	lsrs	r0, r3, #8
 8001b94:	462b      	mov	r3, r5
 8001b96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	1219      	asrs	r1, r3, #8
 8001b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ba2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	17da      	asrs	r2, r3, #31
 8001baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001bba:	464c      	mov	r4, r9
 8001bbc:	0123      	lsls	r3, r4, #4
 8001bbe:	4644      	mov	r4, r8
 8001bc0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bc4:	4644      	mov	r4, r8
 8001bc6:	0122      	lsls	r2, r4, #4
 8001bc8:	1884      	adds	r4, r0, r2
 8001bca:	603c      	str	r4, [r7, #0]
 8001bcc:	eb41 0303 	adc.w	r3, r1, r3
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001bd6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001bda:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001bea <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001bfc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	039a      	lsls	r2, r3, #14
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c08:	051b      	lsls	r3, r3, #20
 8001c0a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c12:	4619      	mov	r1, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c20:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001c28:	4611      	mov	r1, r2
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	fb01 f202 	mul.w	r2, r1, r2
 8001c30:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	7f09      	ldrb	r1, [r1, #28]
 8001c36:	4608      	mov	r0, r1
 8001c38:	6979      	ldr	r1, [r7, #20]
 8001c3a:	fb00 f101 	mul.w	r1, r0, r1
 8001c3e:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c40:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c44:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c48:	1292      	asrs	r2, r2, #10
 8001c4a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c54:	fb01 f202 	mul.w	r2, r1, r2
 8001c58:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c5c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	13db      	asrs	r3, r3, #15
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	13d2      	asrs	r2, r2, #15
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	7e12      	ldrb	r2, [r2, #24]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c88:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001c90:	bfa8      	it	ge
 8001c92:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001c96:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	131b      	asrs	r3, r3, #12
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	@ 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cbc:	2b60      	cmp	r3, #96	@ 0x60
 8001cbe:	d007      	beq.n	8001cd0 <bmp280_read_fixed+0x28>
		if (humidity)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <bmp280_read_fixed+0x32>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	e000      	b.n	8001cdc <bmp280_read_fixed+0x34>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f107 0218 	add.w	r2, r7, #24
 8001ce6:	21f7      	movs	r1, #247	@ 0xf7
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff f990 	bl	800100e <read_data>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <bmp280_read_fixed+0x50>
		return false;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e038      	b.n	8001d6a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001cf8:	7e3b      	ldrb	r3, [r7, #24]
 8001cfa:	031a      	lsls	r2, r3, #12
 8001cfc:	7e7b      	ldrb	r3, [r7, #25]
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4313      	orrs	r3, r2
 8001d02:	7eba      	ldrb	r2, [r7, #26]
 8001d04:	0912      	lsrs	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001d0c:	7efb      	ldrb	r3, [r7, #27]
 8001d0e:	031a      	lsls	r2, r3, #12
 8001d10:	7f3b      	ldrb	r3, [r7, #28]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4313      	orrs	r3, r2
 8001d16:	7f7a      	ldrb	r2, [r7, #29]
 8001d18:	0912      	lsrs	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	461a      	mov	r2, r3
 8001d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff fc67 	bl	80015fc <compensate_temperature>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	461a      	mov	r2, r3
 8001d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff fc97 	bl	800166e <compensate_pressure>
 8001d40:	4602      	mov	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00d      	beq.n	8001d68 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001d4c:	7fbb      	ldrb	r3, [r7, #30]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	7ffa      	ldrb	r2, [r7, #31]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6a39      	ldr	r1, [r7, #32]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff ff44 	bl	8001bea <compensate_humidity>
 8001d62:	4602      	mov	r2, r0
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3730      	adds	r7, #48	@ 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <bmp280_read_float+0x1a>
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	e000      	b.n	8001d90 <bmp280_read_float+0x1c>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f107 0218 	add.w	r2, r7, #24
 8001d94:	f107 011c 	add.w	r1, r7, #28
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff ff85 	bl	8001ca8 <bmp280_read_fixed>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d028      	beq.n	8001df6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dae:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e00 <bmp280_read_float+0x8c>
 8001db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dc6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001e04 <bmp280_read_float+0x90>
 8001dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001e08 <bmp280_read_float+0x94>
 8001de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <bmp280_read_float+0x84>
	}

	return false;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	42c80000 	.word	0x42c80000
 8001e04:	43800000 	.word	0x43800000
 8001e08:	44800000 	.word	0x44800000

08001e0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001e98:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <MX_GPIO_Init+0xd8>)
 8001e9a:	f001 fb77 	bl	800358c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ea4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <MX_GPIO_Init+0xdc>)
 8001eb6:	f001 f9d5 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001eba:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <MX_GPIO_Init+0xd8>)
 8001ed4:	f001 f9c6 	bl	8003264 <HAL_GPIO_Init>

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020800 	.word	0x40020800

08001eec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001ef2:	4a13      	ldr	r2, [pc, #76]	@ (8001f40 <MX_I2C1_Init+0x54>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <MX_I2C1_Init+0x58>)
 8001efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f2a:	f001 fb49 	bl	80035c0 <HAL_I2C_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f34:	f000 fd10 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000200 	.word	0x20000200
 8001f40:	40005400 	.word	0x40005400
 8001f44:	000186a0 	.word	0x000186a0

08001f48 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f4e:	4a13      	ldr	r2, [pc, #76]	@ (8001f9c <MX_I2C2_Init+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f54:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <MX_I2C2_Init+0x58>)
 8001f56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f86:	f001 fb1b 	bl	80035c0 <HAL_I2C_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f90:	f000 fce2 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000254 	.word	0x20000254
 8001f9c:	40005800 	.word	0x40005800
 8001fa0:	000186a0 	.word	0x000186a0

08001fa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	@ (80020cc <HAL_I2C_MspInit+0x128>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12d      	bne.n	8002022 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a40      	ldr	r2, [pc, #256]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4835      	ldr	r0, [pc, #212]	@ (80020d4 <HAL_I2C_MspInit+0x130>)
 8002000:	f001 f930 	bl	8003264 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	4b31      	ldr	r3, [pc, #196]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a30      	ldr	r2, [pc, #192]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800200e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002020:	e050      	b.n	80020c4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2c      	ldr	r2, [pc, #176]	@ (80020d8 <HAL_I2C_MspInit+0x134>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d14b      	bne.n	80020c4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	6313      	str	r3, [r2, #48]	@ 0x30
 800203c:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a1f      	ldr	r2, [pc, #124]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002064:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206a:	2312      	movs	r3, #18
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002076:	2304      	movs	r3, #4
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4814      	ldr	r0, [pc, #80]	@ (80020d4 <HAL_I2C_MspInit+0x130>)
 8002082:	f001 f8ef 	bl	8003264 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208c:	2312      	movs	r3, #18
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002098:	2304      	movs	r3, #4
 800209a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	480e      	ldr	r0, [pc, #56]	@ (80020dc <HAL_I2C_MspInit+0x138>)
 80020a4:	f001 f8de 	bl	8003264 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40005400 	.word	0x40005400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40005800 	.word	0x40005800
 80020dc:	40020800 	.word	0x40020800

080020e0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80020ea:	4a38      	ldr	r2, [pc, #224]	@ (80021cc <HD44780_Init+0xec>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80020f0:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <HD44780_Init+0xf0>)
 80020f2:	2208      	movs	r2, #8
 80020f4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80020f6:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HD44780_Init+0xf4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80020fc:	4b33      	ldr	r3, [pc, #204]	@ (80021cc <HD44780_Init+0xec>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d907      	bls.n	8002114 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002104:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HD44780_Init+0xf4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HD44780_Init+0xf4>)
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e006      	b.n	8002122 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002114:	4b2f      	ldr	r3, [pc, #188]	@ (80021d4 <HD44780_Init+0xf4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HD44780_Init+0xf4>)
 8002120:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8002122:	f000 f985 	bl	8002430 <DelayInit>
  HAL_Delay(50);
 8002126:	2032      	movs	r0, #50	@ 0x32
 8002128:	f000 ff92 	bl	8003050 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800212c:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HD44780_Init+0xf0>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f943 	bl	80023bc <ExpanderWrite>
  HAL_Delay(1000);
 8002136:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800213a:	f000 ff89 	bl	8003050 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800213e:	2030      	movs	r0, #48	@ 0x30
 8002140:	f000 f92b 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002144:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002148:	f000 f99c 	bl	8002484 <DelayUS>

  Write4Bits(0x03 << 4);
 800214c:	2030      	movs	r0, #48	@ 0x30
 800214e:	f000 f924 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002152:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002156:	f000 f995 	bl	8002484 <DelayUS>

  Write4Bits(0x03 << 4);
 800215a:	2030      	movs	r0, #48	@ 0x30
 800215c:	f000 f91d 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002160:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002164:	f000 f98e 	bl	8002484 <DelayUS>

  Write4Bits(0x02 << 4);
 8002168:	2020      	movs	r0, #32
 800216a:	f000 f916 	bl	800239a <Write4Bits>
  DelayUS(100);
 800216e:	2064      	movs	r0, #100	@ 0x64
 8002170:	f000 f988 	bl	8002484 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002174:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <HD44780_Init+0xf4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f8ce 	bl	8002320 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HD44780_Init+0xf8>)
 8002186:	2204      	movs	r2, #4
 8002188:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800218a:	f000 f875 	bl	8002278 <HD44780_Display>
  HD44780_Clear();
 800218e:	f000 f82b 	bl	80021e8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HD44780_Init+0xfc>)
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <HD44780_Init+0xfc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f8bc 	bl	8002320 <SendCommand>
  DelayUS(4500);
 80021a8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80021ac:	f000 f96a 	bl	8002484 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80021b0:	490b      	ldr	r1, [pc, #44]	@ (80021e0 <HD44780_Init+0x100>)
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f876 	bl	80022a4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80021b8:	490a      	ldr	r1, [pc, #40]	@ (80021e4 <HD44780_Init+0x104>)
 80021ba:	2001      	movs	r0, #1
 80021bc:	f000 f872 	bl	80022a4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80021c0:	f000 f81d 	bl	80021fe <HD44780_Home>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200002ab 	.word	0x200002ab
 80021d0:	200002ac 	.word	0x200002ac
 80021d4:	200002a8 	.word	0x200002a8
 80021d8:	200002a9 	.word	0x200002a9
 80021dc:	200002aa 	.word	0x200002aa
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000008 	.word	0x20000008

080021e8 <HD44780_Clear>:

void HD44780_Clear()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 f897 	bl	8002320 <SendCommand>
  DelayUS(2000);
 80021f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80021f6:	f000 f945 	bl	8002484 <DelayUS>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HD44780_Home>:

void HD44780_Home()
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8002202:	2002      	movs	r0, #2
 8002204:	f000 f88c 	bl	8002320 <SendCommand>
  DelayUS(2000);
 8002208:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800220c:	f000 f93a 	bl	8002484 <DelayUS>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	460a      	mov	r2, r1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HD44780_SetCursor+0x5c>)
 8002226:	f107 0408 	add.w	r4, r7, #8
 800222a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HD44780_SetCursor+0x60>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	79ba      	ldrb	r2, [r7, #6]
 8002236:	429a      	cmp	r2, r3
 8002238:	d303      	bcc.n	8002242 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HD44780_SetCursor+0x60>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	3b01      	subs	r3, #1
 8002240:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3318      	adds	r3, #24
 8002248:	443b      	add	r3, r7
 800224a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	4413      	add	r3, r2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	b25b      	sxtb	r3, r3
 8002258:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800225c:	b25b      	sxtb	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f85d 	bl	8002320 <SendCommand>
}
 8002266:	bf00      	nop
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	bf00      	nop
 8002270:	080096c4 	.word	0x080096c4
 8002274:	200002ab 	.word	0x200002ab

08002278 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HD44780_Display+0x28>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HD44780_Display+0x28>)
 8002288:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HD44780_Display+0x28>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f843 	bl	8002320 <SendCommand>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200002a9 	.word	0x200002a9

080022a4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f82a 	bl	8002320 <SendCommand>
  for (int i=0; i<8; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e009      	b.n	80022e6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f82e 	bl	800233c <SendChar>
  for (int i=0; i<8; i++)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b07      	cmp	r3, #7
 80022ea:	ddf2      	ble.n	80022d2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80022fe:	e006      	b.n	800230e <HD44780_PrintStr+0x18>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f817 	bl	800233c <SendChar>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f4      	bne.n	8002300 <HD44780_PrintStr+0xa>
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f812 	bl	8002358 <Send>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <SendChar>:

static void SendChar(uint8_t ch)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2101      	movs	r1, #1
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f804 	bl	8002358 <Send>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f023 030f 	bic.w	r3, r3, #15
 800236e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	79bb      	ldrb	r3, [r7, #6]
 800237a:	4313      	orrs	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f80b 	bl	800239a <Write4Bits>
  Write4Bits((lownib)|mode);
 8002384:	7bba      	ldrb	r2, [r7, #14]
 8002386:	79bb      	ldrb	r3, [r7, #6]
 8002388:	4313      	orrs	r3, r2
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f804 	bl	800239a <Write4Bits>
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f808 	bl	80023bc <ExpanderWrite>
  PulseEnable(value);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f820 	bl	80023f4 <PulseEnable>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <ExpanderWrite+0x30>)
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80023d2:	f107 020f 	add.w	r2, r7, #15
 80023d6:	230a      	movs	r3, #10
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	214e      	movs	r1, #78	@ 0x4e
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <ExpanderWrite+0x34>)
 80023e0:	f001 fa32 	bl	8003848 <HAL_I2C_Master_Transmit>
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200002ac 	.word	0x200002ac
 80023f0:	20000254 	.word	0x20000254

080023f4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffd8 	bl	80023bc <ExpanderWrite>
  DelayUS(20);
 800240c:	2014      	movs	r0, #20
 800240e:	f000 f839 	bl	8002484 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ffce 	bl	80023bc <ExpanderWrite>
  DelayUS(20);
 8002420:	2014      	movs	r0, #20
 8002422:	f000 f82f 	bl	8002484 <DelayUS>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <DelayInit>:

static void DelayInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <DelayInit+0x4c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a10      	ldr	r2, [pc, #64]	@ (800247c <DelayInit+0x4c>)
 800243a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800243e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002440:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <DelayInit+0x4c>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <DelayInit+0x4c>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800244a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <DelayInit+0x50>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <DelayInit+0x50>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <DelayInit+0x50>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a08      	ldr	r2, [pc, #32]	@ (8002480 <DelayInit+0x50>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <DelayInit+0x50>)
 8002466:	2200      	movs	r2, #0
 8002468:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800246a:	bf00      	nop
  __ASM volatile ("NOP");
 800246c:	bf00      	nop
  __ASM volatile ("NOP");
 800246e:	bf00      	nop
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000edf0 	.word	0xe000edf0
 8002480:	e0001000 	.word	0xe0001000

08002484 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <DelayUS+0x44>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0e      	ldr	r2, [pc, #56]	@ (80024cc <DelayUS+0x48>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9a      	lsrs	r2, r3, #18
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <DelayUS+0x4c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <DelayUS+0x4c>)
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f6      	bhi.n	80024a6 <DelayUS+0x22>
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000010 	.word	0x20000010
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	e0001000 	.word	0xe0001000

080024d4 <Set_PWM_Duty_Cycle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_PWM_Duty_Cycle(uint32_t pwm_value)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
    // Set the PWM compare value directly
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_value);
 80024dc:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <Set_PWM_Duty_Cycle+0x1c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	20000440 	.word	0x20000440

080024f4 <TIM7_Delay.0>:

  HAL_TIM_Base_Start(&htim7);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

  void TIM7_Delay(uint32_t ms)
  {
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	f8c7 c000 	str.w	ip, [r7]
      for (uint32_t i = 0; i < ms; i++)
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e00c      	b.n	8002520 <TIM7_Delay.0+0x2c>
      {
          __HAL_TIM_SET_COUNTER(&htim7, 0);
 8002506:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <TIM7_Delay.0+0x44>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24
          while (__HAL_TIM_GET_COUNTER(&htim7) < 6)
 800250e:	bf00      	nop
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <TIM7_Delay.0+0x44>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	2b05      	cmp	r3, #5
 8002518:	d9fa      	bls.n	8002510 <TIM7_Delay.0+0x1c>
      for (uint32_t i = 0; i < ms; i++)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d3ee      	bcc.n	8002506 <TIM7_Delay.0+0x12>
          {
          }
      }
  }
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200003f8 	.word	0x200003f8

0800253c <main>:
{
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b08c      	sub	sp, #48	@ 0x30
 8002540:	af02      	add	r7, sp, #8
int main(void)
 8002542:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002546:	61fb      	str	r3, [r7, #28]
  HAL_Init();
 8002548:	f000 fd10 	bl	8002f6c <HAL_Init>
  SystemClock_Config();
 800254c:	f000 f996 	bl	800287c <SystemClock_Config>
  MX_GPIO_Init();
 8002550:	f7ff fc5c 	bl	8001e0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002554:	f7ff fcca 	bl	8001eec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002558:	f000 fc6c 	bl	8002e34 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800255c:	f7ff fcf4 	bl	8001f48 <MX_I2C2_Init>
  MX_TIM7_Init();
 8002560:	f000 fbb4 	bl	8002ccc <MX_TIM7_Init>
  MX_TIM1_Init();
 8002564:	f000 fb2e 	bl	8002bc4 <MX_TIM1_Init>
  HD44780_Init(2);
 8002568:	2002      	movs	r0, #2
 800256a:	f7ff fdb9 	bl	80020e0 <HD44780_Init>
  HD44780_Clear();
 800256e:	f7ff fe3b 	bl	80021e8 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8002572:	2100      	movs	r1, #0
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff fe4d 	bl	8002214 <HD44780_SetCursor>
  bmp280_init_default_params(&bmp280.params);
 800257a:	48a8      	ldr	r0, [pc, #672]	@ (800281c <main+0x2e0>)
 800257c:	f7fe fcfc 	bl	8000f78 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002580:	4ba7      	ldr	r3, [pc, #668]	@ (8002820 <main+0x2e4>)
 8002582:	2276      	movs	r2, #118	@ 0x76
 8002584:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8002586:	4ba6      	ldr	r3, [pc, #664]	@ (8002820 <main+0x2e4>)
 8002588:	4aa6      	ldr	r2, [pc, #664]	@ (8002824 <main+0x2e8>)
 800258a:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_TIM_Base_Start(&htim7);
 800258c:	48a6      	ldr	r0, [pc, #664]	@ (8002828 <main+0x2ec>)
 800258e:	f002 fff3 	bl	8005578 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002592:	2108      	movs	r1, #8
 8002594:	48a5      	ldr	r0, [pc, #660]	@ (800282c <main+0x2f0>)
 8002596:	f003 f8a7 	bl	80056e8 <HAL_TIM_PWM_Start>


  while (!bmp280_init(&bmp280, &bmp280.params))
 800259a:	e013      	b.n	80025c4 <main+0x88>
  {
      size = sprintf((char *)Data, "BMP280 initialization failed\n");
 800259c:	49a4      	ldr	r1, [pc, #656]	@ (8002830 <main+0x2f4>)
 800259e:	48a5      	ldr	r0, [pc, #660]	@ (8002834 <main+0x2f8>)
 80025a0:	f004 fea2 	bl	80072e8 <siprintf>
 80025a4:	4603      	mov	r3, r0
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4ba3      	ldr	r3, [pc, #652]	@ (8002838 <main+0x2fc>)
 80025aa:	801a      	strh	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 80025ac:	4ba2      	ldr	r3, [pc, #648]	@ (8002838 <main+0x2fc>)
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b4:	499f      	ldr	r1, [pc, #636]	@ (8002834 <main+0x2f8>)
 80025b6:	48a1      	ldr	r0, [pc, #644]	@ (800283c <main+0x300>)
 80025b8:	f003 fdc0 	bl	800613c <HAL_UART_Transmit>
      HAL_Delay(2000);
 80025bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025c0:	f000 fd46 	bl	8003050 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params))
 80025c4:	4995      	ldr	r1, [pc, #596]	@ (800281c <main+0x2e0>)
 80025c6:	4896      	ldr	r0, [pc, #600]	@ (8002820 <main+0x2e4>)
 80025c8:	f7fe fe50 	bl	800126c <bmp280_init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f083 0301 	eor.w	r3, r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e1      	bne.n	800259c <main+0x60>
  }

  bool bme280p = bmp280.id == BME280_CHIP_ID;
 80025d8:	4b91      	ldr	r3, [pc, #580]	@ (8002820 <main+0x2e4>)
 80025da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80025de:	2b60      	cmp	r3, #96	@ 0x60
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  size = sprintf((char *)Data, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 80025ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <main+0xba>
 80025f2:	4b93      	ldr	r3, [pc, #588]	@ (8002840 <main+0x304>)
 80025f4:	e000      	b.n	80025f8 <main+0xbc>
 80025f6:	4b93      	ldr	r3, [pc, #588]	@ (8002844 <main+0x308>)
 80025f8:	461a      	mov	r2, r3
 80025fa:	4993      	ldr	r1, [pc, #588]	@ (8002848 <main+0x30c>)
 80025fc:	488d      	ldr	r0, [pc, #564]	@ (8002834 <main+0x2f8>)
 80025fe:	f004 fe73 	bl	80072e8 <siprintf>
 8002602:	4603      	mov	r3, r0
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b8c      	ldr	r3, [pc, #560]	@ (8002838 <main+0x2fc>)
 8002608:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 800260a:	4b8b      	ldr	r3, [pc, #556]	@ (8002838 <main+0x2fc>)
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002612:	4988      	ldr	r1, [pc, #544]	@ (8002834 <main+0x2f8>)
 8002614:	4889      	ldr	r0, [pc, #548]	@ (800283c <main+0x300>)
 8002616:	f003 fd91 	bl	800613c <HAL_UART_Transmit>

  TIM1->CCR1 = 0;
 800261a:	4b8c      	ldr	r3, [pc, #560]	@ (800284c <main+0x310>)
 800261c:	2200      	movs	r2, #0
 800261e:	635a      	str	r2, [r3, #52]	@ 0x34

  // Initialize the GPIO pin (PA8)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable GPIOA clock
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	4b86      	ldr	r3, [pc, #536]	@ (8002850 <main+0x314>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	4a85      	ldr	r2, [pc, #532]	@ (8002850 <main+0x314>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002640:	4b83      	ldr	r3, [pc, #524]	@ (8002850 <main+0x314>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]

  // PA8 configuration
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800264c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002650:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002652:	2301      	movs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	4619      	mov	r1, r3
 8002664:	487b      	ldr	r0, [pc, #492]	@ (8002854 <main+0x318>)
 8002666:	f000 fdfd 	bl	8003264 <HAL_GPIO_Init>

  // PA9 configuration
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800266a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800266e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002670:	2301      	movs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	4619      	mov	r1, r3
 8002682:	4874      	ldr	r0, [pc, #464]	@ (8002854 <main+0x318>)
 8002684:	f000 fdee 	bl	8003264 <HAL_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8002688:	2064      	movs	r0, #100	@ 0x64
 800268a:	f000 fce1 	bl	8003050 <HAL_Delay>
  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800268e:	e013      	b.n	80026b8 <main+0x17c>
      size = sprintf((char *)Data,
 8002690:	4971      	ldr	r1, [pc, #452]	@ (8002858 <main+0x31c>)
 8002692:	4868      	ldr	r0, [pc, #416]	@ (8002834 <main+0x2f8>)
 8002694:	f004 fe28 	bl	80072e8 <siprintf>
 8002698:	4603      	mov	r3, r0
 800269a:	b29a      	uxth	r2, r3
 800269c:	4b66      	ldr	r3, [pc, #408]	@ (8002838 <main+0x2fc>)
 800269e:	801a      	strh	r2, [r3, #0]
              "Temperature/pressure reading failed\r\n");
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 80026a0:	4b65      	ldr	r3, [pc, #404]	@ (8002838 <main+0x2fc>)
 80026a2:	881a      	ldrh	r2, [r3, #0]
 80026a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026a8:	4962      	ldr	r1, [pc, #392]	@ (8002834 <main+0x2f8>)
 80026aa:	4864      	ldr	r0, [pc, #400]	@ (800283c <main+0x300>)
 80026ac:	f003 fd46 	bl	800613c <HAL_UART_Transmit>
      HAL_Delay(2000);
 80026b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80026b4:	f000 fccc 	bl	8003050 <HAL_Delay>
  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80026b8:	4b68      	ldr	r3, [pc, #416]	@ (800285c <main+0x320>)
 80026ba:	4a69      	ldr	r2, [pc, #420]	@ (8002860 <main+0x324>)
 80026bc:	4969      	ldr	r1, [pc, #420]	@ (8002864 <main+0x328>)
 80026be:	4858      	ldr	r0, [pc, #352]	@ (8002820 <main+0x2e4>)
 80026c0:	f7ff fb58 	bl	8001d74 <bmp280_read_float>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f083 0301 	eor.w	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1df      	bne.n	8002690 <main+0x154>
  }

  size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C",
 80026d0:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <main+0x324>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd ff57 	bl	8000588 <__aeabi_f2d>
 80026da:	4604      	mov	r4, r0
 80026dc:	460d      	mov	r5, r1
 80026de:	4b61      	ldr	r3, [pc, #388]	@ (8002864 <main+0x328>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd ff50 	bl	8000588 <__aeabi_f2d>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	e9cd 2300 	strd	r2, r3, [sp]
 80026f0:	4622      	mov	r2, r4
 80026f2:	462b      	mov	r3, r5
 80026f4:	495c      	ldr	r1, [pc, #368]	@ (8002868 <main+0x32c>)
 80026f6:	484f      	ldr	r0, [pc, #316]	@ (8002834 <main+0x2f8>)
 80026f8:	f004 fdf6 	bl	80072e8 <siprintf>
 80026fc:	4603      	mov	r3, r0
 80026fe:	b29a      	uxth	r2, r3
 8002700:	4b4d      	ldr	r3, [pc, #308]	@ (8002838 <main+0x2fc>)
 8002702:	801a      	strh	r2, [r3, #0]
          pressure, temperature);
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002704:	4b4c      	ldr	r3, [pc, #304]	@ (8002838 <main+0x2fc>)
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800270c:	4949      	ldr	r1, [pc, #292]	@ (8002834 <main+0x2f8>)
 800270e:	484b      	ldr	r0, [pc, #300]	@ (800283c <main+0x300>)
 8002710:	f003 fd14 	bl	800613c <HAL_UART_Transmit>

  HD44780_Clear();
 8002714:	f7ff fd68 	bl	80021e8 <HD44780_Clear>

  HD44780_SetCursor(0, 0);
 8002718:	2100      	movs	r1, #0
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff fd7a 	bl	8002214 <HD44780_SetCursor>
  HD44780_PrintStr("Temp:");
 8002720:	4852      	ldr	r0, [pc, #328]	@ (800286c <main+0x330>)
 8002722:	f7ff fde8 	bl	80022f6 <HD44780_PrintStr>

  HD44780_SetCursor(6, 0);
 8002726:	2100      	movs	r1, #0
 8002728:	2006      	movs	r0, #6
 800272a:	f7ff fd73 	bl	8002214 <HD44780_SetCursor>
  size = sprintf((char *)Data, "%.2f C", temperature);
 800272e:	4b4d      	ldr	r3, [pc, #308]	@ (8002864 <main+0x328>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff28 	bl	8000588 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	494c      	ldr	r1, [pc, #304]	@ (8002870 <main+0x334>)
 800273e:	483d      	ldr	r0, [pc, #244]	@ (8002834 <main+0x2f8>)
 8002740:	f004 fdd2 	bl	80072e8 <siprintf>
 8002744:	4603      	mov	r3, r0
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <main+0x2fc>)
 800274a:	801a      	strh	r2, [r3, #0]
  HD44780_PrintStr((char *)Data);
 800274c:	4839      	ldr	r0, [pc, #228]	@ (8002834 <main+0x2f8>)
 800274e:	f7ff fdd2 	bl	80022f6 <HD44780_PrintStr>

  HD44780_SetCursor(0, 1);
 8002752:	2101      	movs	r1, #1
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff fd5d 	bl	8002214 <HD44780_SetCursor>
  HD44780_PrintStr("Humidity:");
 800275a:	4846      	ldr	r0, [pc, #280]	@ (8002874 <main+0x338>)
 800275c:	f7ff fdcb 	bl	80022f6 <HD44780_PrintStr>

  HD44780_SetCursor(10, 1);
 8002760:	2101      	movs	r1, #1
 8002762:	200a      	movs	r0, #10
 8002764:	f7ff fd56 	bl	8002214 <HD44780_SetCursor>
  size = sprintf((char *)Data, "%.2f%%", humidity);
 8002768:	4b3c      	ldr	r3, [pc, #240]	@ (800285c <main+0x320>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd ff0b 	bl	8000588 <__aeabi_f2d>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4940      	ldr	r1, [pc, #256]	@ (8002878 <main+0x33c>)
 8002778:	482e      	ldr	r0, [pc, #184]	@ (8002834 <main+0x2f8>)
 800277a:	f004 fdb5 	bl	80072e8 <siprintf>
 800277e:	4603      	mov	r3, r0
 8002780:	b29a      	uxth	r2, r3
 8002782:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <main+0x2fc>)
 8002784:	801a      	strh	r2, [r3, #0]
  HD44780_PrintStr((char *)Data);
 8002786:	482b      	ldr	r0, [pc, #172]	@ (8002834 <main+0x2f8>)
 8002788:	f7ff fdb5 	bl	80022f6 <HD44780_PrintStr>

  uint32_t pwm_value = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
          if (temperature > 30.0f)
 8002790:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <main+0x328>)
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800279a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	dd09      	ble.n	80027b8 <main+0x27c>
          {
              pwm_value = 1000;
 80027a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027b0:	4828      	ldr	r0, [pc, #160]	@ (8002854 <main+0x318>)
 80027b2:	f000 feeb 	bl	800358c <HAL_GPIO_WritePin>
 80027b6:	e025      	b.n	8002804 <main+0x2c8>
          }
          else if (temperature >= 27.0f && temperature <= 30.0f)
 80027b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002864 <main+0x328>)
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 80027c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ca:	db13      	blt.n	80027f4 <main+0x2b8>
 80027cc:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <main+0x328>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80027d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	d809      	bhi.n	80027f4 <main+0x2b8>
          {
              pwm_value = 500;
 80027e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027ec:	4819      	ldr	r0, [pc, #100]	@ (8002854 <main+0x318>)
 80027ee:	f000 fecd 	bl	800358c <HAL_GPIO_WritePin>
 80027f2:	e007      	b.n	8002804 <main+0x2c8>
          }
          else
          {
              pwm_value = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80027f8:	2201      	movs	r2, #1
 80027fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027fe:	4815      	ldr	r0, [pc, #84]	@ (8002854 <main+0x318>)
 8002800:	f000 fec4 	bl	800358c <HAL_GPIO_WritePin>
          }
          Set_PWM_Duty_Cycle(pwm_value);
 8002804:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002806:	f7ff fe65 	bl	80024d4 <Set_PWM_Duty_Cycle>

          TIM7_Delay(5000);
 800280a:	f107 031c 	add.w	r3, r7, #28
 800280e:	469c      	mov	ip, r3
 8002810:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002814:	f7ff fe6e 	bl	80024f4 <TIM7_Delay.0>
  {
 8002818:	e736      	b.n	8002688 <main+0x14c>
 800281a:	bf00      	nop
 800281c:	200002dc 	.word	0x200002dc
 8002820:	200002b0 	.word	0x200002b0
 8002824:	20000200 	.word	0x20000200
 8002828:	200003f8 	.word	0x200003f8
 800282c:	20000440 	.word	0x20000440
 8002830:	080096d4 	.word	0x080096d4
 8002834:	200002f4 	.word	0x200002f4
 8002838:	200002f0 	.word	0x200002f0
 800283c:	20000488 	.word	0x20000488
 8002840:	080096f4 	.word	0x080096f4
 8002844:	080096fc 	.word	0x080096fc
 8002848:	08009704 	.word	0x08009704
 800284c:	40010000 	.word	0x40010000
 8002850:	40023800 	.word	0x40023800
 8002854:	40020000 	.word	0x40020000
 8002858:	08009718 	.word	0x08009718
 800285c:	200002ec 	.word	0x200002ec
 8002860:	200002e4 	.word	0x200002e4
 8002864:	200002e8 	.word	0x200002e8
 8002868:	08009740 	.word	0x08009740
 800286c:	08009768 	.word	0x08009768
 8002870:	08009770 	.word	0x08009770
 8002874:	08009778 	.word	0x08009778
 8002878:	08009784 	.word	0x08009784

0800287c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b094      	sub	sp, #80	@ 0x50
 8002880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	2234      	movs	r2, #52	@ 0x34
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fd8f 	bl	80073ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	2300      	movs	r3, #0
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <SystemClock_Config+0xd4>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	4a29      	ldr	r2, [pc, #164]	@ (8002950 <SystemClock_Config+0xd4>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b0:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <SystemClock_Config+0xd4>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80028bc:	2300      	movs	r3, #0
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <SystemClock_Config+0xd8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80028c8:	4a22      	ldr	r2, [pc, #136]	@ (8002954 <SystemClock_Config+0xd8>)
 80028ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <SystemClock_Config+0xd8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028dc:	2302      	movs	r3, #2
 80028de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e0:	2301      	movs	r3, #1
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028e4:	2310      	movs	r3, #16
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e8:	2302      	movs	r3, #2
 80028ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028ec:	2300      	movs	r3, #0
 80028ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80028f0:	2310      	movs	r3, #16
 80028f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80028f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80028f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028fa:	2304      	movs	r3, #4
 80028fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028fe:	2302      	movs	r3, #2
 8002900:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002902:	2302      	movs	r3, #2
 8002904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fb46 	bl	8004f9c <HAL_RCC_OscConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002916:	f000 f81f 	bl	8002958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291a:	230f      	movs	r3, #15
 800291c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800291e:	2302      	movs	r3, #2
 8002920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800292a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f001 ffe6 	bl	8004908 <HAL_RCC_ClockConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002942:	f000 f809 	bl	8002958 <Error_Handler>
  }
}
 8002946:	bf00      	nop
 8002948:	3750      	adds	r7, #80	@ 0x50
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000

08002958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <Error_Handler+0x8>

08002964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4a0f      	ldr	r2, [pc, #60]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002978:	6453      	str	r3, [r2, #68]	@ 0x44
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_MspInit+0x4c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029a2:	2007      	movs	r0, #7
 80029a4:	f000 fc2a 	bl	80031fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800

080029b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <NMI_Handler+0x4>

080029bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <HardFault_Handler+0x4>

080029c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <MemManage_Handler+0x4>

080029cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <UsageFault_Handler+0x4>

080029dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a0a:	f000 fb01 	bl	8003010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  return 1;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <_kill>:

int _kill(int pid, int sig)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a2c:	f004 fd12 	bl	8007454 <__errno>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2216      	movs	r2, #22
 8002a34:	601a      	str	r2, [r3, #0]
  return -1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_exit>:

void _exit (int status)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffe7 	bl	8002a22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <_exit+0x12>

08002a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e00a      	b.n	8002a80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a6a:	f3af 8000 	nop.w
 8002a6e:	4601      	mov	r1, r0
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	60ba      	str	r2, [r7, #8]
 8002a76:	b2ca      	uxtb	r2, r1
 8002a78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	dbf0      	blt.n	8002a6a <_read+0x12>
  }

  return len;
 8002a88:	687b      	ldr	r3, [r7, #4]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e009      	b.n	8002ab8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	60ba      	str	r2, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	dbf1      	blt.n	8002aa4 <_write+0x12>
  }
  return len;
 8002ac0:	687b      	ldr	r3, [r7, #4]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_close>:

int _close(int file)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af2:	605a      	str	r2, [r3, #4]
  return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_isatty>:

int _isatty(int file)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b3c:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <_sbrk+0x5c>)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <_sbrk+0x60>)
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <_sbrk+0x64>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <_sbrk+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b64:	f004 fc76 	bl	8007454 <__errno>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e009      	b.n	8002b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b74:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	4a05      	ldr	r2, [pc, #20]	@ (8002b98 <_sbrk+0x64>)
 8002b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20020000 	.word	0x20020000
 8002b94:	00000400 	.word	0x00000400
 8002b98:	200003f4 	.word	0x200003f4
 8002b9c:	20000620 	.word	0x20000620

08002ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <SystemInit+0x20>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002baa:	4a05      	ldr	r2, [pc, #20]	@ (8002bc0 <SystemInit+0x20>)
 8002bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b092      	sub	sp, #72	@ 0x48
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	615a      	str	r2, [r3, #20]
 8002be6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	2220      	movs	r2, #32
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fbdd 	bl	80073ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bf4:	4b33      	ldr	r3, [pc, #204]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002bf6:	4a34      	ldr	r2, [pc, #208]	@ (8002cc8 <MX_TIM1_Init+0x104>)
 8002bf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002bfa:	4b32      	ldr	r3, [pc, #200]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b30      	ldr	r3, [pc, #192]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002c06:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002c08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c14:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c20:	4828      	ldr	r0, [pc, #160]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002c22:	f002 fd11 	bl	8005648 <HAL_TIM_PWM_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002c2c:	f7ff fe94 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c30:	2300      	movs	r3, #0
 8002c32:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4821      	ldr	r0, [pc, #132]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002c40:	f003 f95e 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002c4a:	f7ff fe85 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c4e:	2360      	movs	r3, #96	@ 0x60
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c6e:	2208      	movs	r2, #8
 8002c70:	4619      	mov	r1, r3
 8002c72:	4814      	ldr	r0, [pc, #80]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002c74:	f002 fe00 	bl	8005878 <HAL_TIM_PWM_ConfigChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002c7e:	f7ff fe6b 	bl	8002958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4807      	ldr	r0, [pc, #28]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002ca6:	f003 f9a7 	bl	8005ff8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002cb0:	f7ff fe52 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cb4:	4803      	ldr	r0, [pc, #12]	@ (8002cc4 <MX_TIM1_Init+0x100>)
 8002cb6:	f000 f883 	bl	8002dc0 <HAL_TIM_MspPostInit>

}
 8002cba:	bf00      	nop
 8002cbc:	3748      	adds	r7, #72	@ 0x48
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000440 	.word	0x20000440
 8002cc8:	40010000 	.word	0x40010000

08002ccc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cdc:	4a15      	ldr	r2, [pc, #84]	@ (8002d34 <MX_TIM7_Init+0x68>)
 8002cde:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9995;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002ce2:	f242 720b 	movw	r2, #9995	@ 0x270b
 8002ce6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 6;
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cf0:	2206      	movs	r2, #6
 8002cf2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002cfa:	480d      	ldr	r0, [pc, #52]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002cfc:	f002 fbec 	bl	80054d8 <HAL_TIM_Base_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002d06:	f7ff fe27 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d12:	463b      	mov	r3, r7
 8002d14:	4619      	mov	r1, r3
 8002d16:	4806      	ldr	r0, [pc, #24]	@ (8002d30 <MX_TIM7_Init+0x64>)
 8002d18:	f003 f8f2 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002d22:	f7ff fe19 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200003f8 	.word	0x200003f8
 8002d34:	40001400 	.word	0x40001400

08002d38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0b      	ldr	r2, [pc, #44]	@ (8002d74 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10d      	bne.n	8002d66 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <HAL_TIM_PWM_MspInit+0x40>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <HAL_TIM_PWM_MspInit+0x40>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d5a:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <HAL_TIM_PWM_MspInit+0x40>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0b      	ldr	r2, [pc, #44]	@ (8002db8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10d      	bne.n	8002daa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <HAL_TIM_Base_MspInit+0x40>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a09      	ldr	r2, [pc, #36]	@ (8002dbc <HAL_TIM_Base_MspInit+0x40>)
 8002d98:	f043 0320 	orr.w	r3, r3, #32
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b07      	ldr	r3, [pc, #28]	@ (8002dbc <HAL_TIM_Base_MspInit+0x40>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40001400 	.word	0x40001400
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a12      	ldr	r2, [pc, #72]	@ (8002e28 <HAL_TIM_MspPostInit+0x68>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d11e      	bne.n	8002e20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_TIM_MspPostInit+0x6c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	4a10      	ldr	r2, [pc, #64]	@ (8002e2c <HAL_TIM_MspPostInit+0x6c>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <HAL_TIM_MspPostInit+0x6c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4805      	ldr	r0, [pc, #20]	@ (8002e30 <HAL_TIM_MspPostInit+0x70>)
 8002e1c:	f000 fa22 	bl	8003264 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e20:	bf00      	nop
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000

08002e34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <MX_USART2_UART_Init+0x50>)
 8002e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <MX_USART2_UART_Init+0x4c>)
 8002e6c:	f003 f916 	bl	800609c <HAL_UART_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e76:	f7ff fd6f 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000488 	.word	0x20000488
 8002e84:	40004400 	.word	0x40004400

08002e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	@ (8002f0c <HAL_UART_MspInit+0x84>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12b      	bne.n	8002f02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	4b18      	ldr	r3, [pc, #96]	@ (8002f10 <HAL_UART_MspInit+0x88>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	4a17      	ldr	r2, [pc, #92]	@ (8002f10 <HAL_UART_MspInit+0x88>)
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_UART_MspInit+0x88>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_UART_MspInit+0x88>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	4a10      	ldr	r2, [pc, #64]	@ (8002f10 <HAL_UART_MspInit+0x88>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <HAL_UART_MspInit+0x88>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ee2:	230c      	movs	r3, #12
 8002ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4619      	mov	r1, r3
 8002efc:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <HAL_UART_MspInit+0x8c>)
 8002efe:	f000 f9b1 	bl	8003264 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	@ 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40004400 	.word	0x40004400
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020000 	.word	0x40020000

08002f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8002f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f1c:	f7ff fe40 	bl	8002ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f20:	480c      	ldr	r0, [pc, #48]	@ (8002f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f22:	490d      	ldr	r1, [pc, #52]	@ (8002f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f24:	4a0d      	ldr	r2, [pc, #52]	@ (8002f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f38:	4c0a      	ldr	r4, [pc, #40]	@ (8002f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f46:	f004 fa8b 	bl	8007460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f4a:	f7ff faf7 	bl	800253c <main>
  bx  lr    
 8002f4e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8002f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f58:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002f5c:	08009b28 	.word	0x08009b28
  ldr r2, =_sbss
 8002f60:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002f64:	20000620 	.word	0x20000620

08002f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f68:	e7fe      	b.n	8002f68 <ADC_IRQHandler>
	...

08002f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f70:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <HAL_Init+0x40>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_Init+0x40>)
 8002f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_Init+0x40>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f000 f931 	bl	80031fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f000 f808 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa0:	f7ff fce0 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023c00 	.word	0x40023c00

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb8:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_InitTick+0x54>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <HAL_InitTick+0x58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f93b 	bl	800324a <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d80a      	bhi.n	8002ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f000 f911 	bl	8003212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4a06      	ldr	r2, [pc, #24]	@ (800300c <HAL_InitTick+0x5c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000010 	.word	0x20000010
 8003008:	20000018 	.word	0x20000018
 800300c:	20000014 	.word	0x20000014

08003010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_IncTick+0x20>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_IncTick+0x24>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_IncTick+0x24>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000018 	.word	0x20000018
 8003034:	200004d0 	.word	0x200004d0

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	200004d0 	.word	0x200004d0

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d005      	beq.n	8003076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <HAL_Delay+0x44>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003076:	bf00      	nop
 8003078:	f7ff ffde 	bl	8003038 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8f7      	bhi.n	8003078 <HAL_Delay+0x28>
  {
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000018 	.word	0x20000018

08003098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ca:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	60d3      	str	r3, [r2, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <__NVIC_GetPriorityGrouping+0x18>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0307 	and.w	r3, r3, #7
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db0a      	blt.n	8003126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	490c      	ldr	r1, [pc, #48]	@ (8003148 <__NVIC_SetPriority+0x4c>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	440b      	add	r3, r1
 8003120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003124:	e00a      	b.n	800313c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4908      	ldr	r1, [pc, #32]	@ (800314c <__NVIC_SetPriority+0x50>)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3b04      	subs	r3, #4
 8003134:	0112      	lsls	r2, r2, #4
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	440b      	add	r3, r1
 800313a:	761a      	strb	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000e100 	.word	0xe000e100
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	@ 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f1c3 0307 	rsb	r3, r3, #7
 800316a:	2b04      	cmp	r3, #4
 800316c:	bf28      	it	cs
 800316e:	2304      	movcs	r3, #4
 8003170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3304      	adds	r3, #4
 8003176:	2b06      	cmp	r3, #6
 8003178:	d902      	bls.n	8003180 <NVIC_EncodePriority+0x30>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3b03      	subs	r3, #3
 800317e:	e000      	b.n	8003182 <NVIC_EncodePriority+0x32>
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	401a      	ands	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003198:	f04f 31ff 	mov.w	r1, #4294967295
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43d9      	mvns	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	4313      	orrs	r3, r2
         );
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	@ 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c8:	d301      	bcc.n	80031ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00f      	b.n	80031ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ce:	4a0a      	ldr	r2, [pc, #40]	@ (80031f8 <SysTick_Config+0x40>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d6:	210f      	movs	r1, #15
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	f7ff ff8e 	bl	80030fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <SysTick_Config+0x40>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e6:	4b04      	ldr	r3, [pc, #16]	@ (80031f8 <SysTick_Config+0x40>)
 80031e8:	2207      	movs	r2, #7
 80031ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	e000e010 	.word	0xe000e010

080031fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff47 	bl	8003098 <__NVIC_SetPriorityGrouping>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003224:	f7ff ff5c 	bl	80030e0 <__NVIC_GetPriorityGrouping>
 8003228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7ff ff8e 	bl	8003150 <NVIC_EncodePriority>
 8003234:	4602      	mov	r2, r0
 8003236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff5d 	bl	80030fc <__NVIC_SetPriority>
}
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ffb0 	bl	80031b8 <SysTick_Config>
 8003258:	4603      	mov	r3, r0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	@ 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	e165      	b.n	800354c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	429a      	cmp	r2, r3
 800329a:	f040 8154 	bne.w	8003546 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d005      	beq.n	80032b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d130      	bne.n	8003318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ec:	2201      	movs	r2, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 0201 	and.w	r2, r3, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b03      	cmp	r3, #3
 8003322:	d017      	beq.n	8003354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d123      	bne.n	80033a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	08da      	lsrs	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3208      	adds	r2, #8
 8003368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	220f      	movs	r2, #15
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3208      	adds	r2, #8
 80033a2:	69b9      	ldr	r1, [r7, #24]
 80033a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0203 	and.w	r2, r3, #3
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80ae 	beq.w	8003546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003564 <HAL_GPIO_Init+0x300>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003564 <HAL_GPIO_Init+0x300>)
 80033f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033fa:	4b5a      	ldr	r3, [pc, #360]	@ (8003564 <HAL_GPIO_Init+0x300>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003406:	4a58      	ldr	r2, [pc, #352]	@ (8003568 <HAL_GPIO_Init+0x304>)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	220f      	movs	r2, #15
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a4f      	ldr	r2, [pc, #316]	@ (800356c <HAL_GPIO_Init+0x308>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d025      	beq.n	800347e <HAL_GPIO_Init+0x21a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4e      	ldr	r2, [pc, #312]	@ (8003570 <HAL_GPIO_Init+0x30c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <HAL_GPIO_Init+0x216>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4d      	ldr	r2, [pc, #308]	@ (8003574 <HAL_GPIO_Init+0x310>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d019      	beq.n	8003476 <HAL_GPIO_Init+0x212>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4c      	ldr	r2, [pc, #304]	@ (8003578 <HAL_GPIO_Init+0x314>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_GPIO_Init+0x20e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4b      	ldr	r2, [pc, #300]	@ (800357c <HAL_GPIO_Init+0x318>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00d      	beq.n	800346e <HAL_GPIO_Init+0x20a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4a      	ldr	r2, [pc, #296]	@ (8003580 <HAL_GPIO_Init+0x31c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <HAL_GPIO_Init+0x206>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a49      	ldr	r2, [pc, #292]	@ (8003584 <HAL_GPIO_Init+0x320>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_GPIO_Init+0x202>
 8003462:	2306      	movs	r3, #6
 8003464:	e00c      	b.n	8003480 <HAL_GPIO_Init+0x21c>
 8003466:	2307      	movs	r3, #7
 8003468:	e00a      	b.n	8003480 <HAL_GPIO_Init+0x21c>
 800346a:	2305      	movs	r3, #5
 800346c:	e008      	b.n	8003480 <HAL_GPIO_Init+0x21c>
 800346e:	2304      	movs	r3, #4
 8003470:	e006      	b.n	8003480 <HAL_GPIO_Init+0x21c>
 8003472:	2303      	movs	r3, #3
 8003474:	e004      	b.n	8003480 <HAL_GPIO_Init+0x21c>
 8003476:	2302      	movs	r3, #2
 8003478:	e002      	b.n	8003480 <HAL_GPIO_Init+0x21c>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_GPIO_Init+0x21c>
 800347e:	2300      	movs	r3, #0
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	f002 0203 	and.w	r2, r2, #3
 8003486:	0092      	lsls	r2, r2, #2
 8003488:	4093      	lsls	r3, r2
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003490:	4935      	ldr	r1, [pc, #212]	@ (8003568 <HAL_GPIO_Init+0x304>)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	3302      	adds	r3, #2
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349e:	4b3a      	ldr	r3, [pc, #232]	@ (8003588 <HAL_GPIO_Init+0x324>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034c2:	4a31      	ldr	r2, [pc, #196]	@ (8003588 <HAL_GPIO_Init+0x324>)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003588 <HAL_GPIO_Init+0x324>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034ec:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <HAL_GPIO_Init+0x324>)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034f2:	4b25      	ldr	r3, [pc, #148]	@ (8003588 <HAL_GPIO_Init+0x324>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003516:	4a1c      	ldr	r2, [pc, #112]	@ (8003588 <HAL_GPIO_Init+0x324>)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800351c:	4b1a      	ldr	r3, [pc, #104]	@ (8003588 <HAL_GPIO_Init+0x324>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003540:	4a11      	ldr	r2, [pc, #68]	@ (8003588 <HAL_GPIO_Init+0x324>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3301      	adds	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b0f      	cmp	r3, #15
 8003550:	f67f ae96 	bls.w	8003280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	3724      	adds	r7, #36	@ 0x24
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	40013800 	.word	0x40013800
 800356c:	40020000 	.word	0x40020000
 8003570:	40020400 	.word	0x40020400
 8003574:	40020800 	.word	0x40020800
 8003578:	40020c00 	.word	0x40020c00
 800357c:	40021000 	.word	0x40021000
 8003580:	40021400 	.word	0x40021400
 8003584:	40021800 	.word	0x40021800
 8003588:	40013c00 	.word	0x40013c00

0800358c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
 8003598:	4613      	mov	r3, r2
 800359a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800359c:	787b      	ldrb	r3, [r7, #1]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035a8:	e003      	b.n	80035b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	041a      	lsls	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	619a      	str	r2, [r3, #24]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e12b      	b.n	800382a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fe fcdc 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	@ 0x24
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003624:	f001 fa62 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 8003628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4a81      	ldr	r2, [pc, #516]	@ (8003834 <HAL_I2C_Init+0x274>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d807      	bhi.n	8003644 <HAL_I2C_Init+0x84>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a80      	ldr	r2, [pc, #512]	@ (8003838 <HAL_I2C_Init+0x278>)
 8003638:	4293      	cmp	r3, r2
 800363a:	bf94      	ite	ls
 800363c:	2301      	movls	r3, #1
 800363e:	2300      	movhi	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e006      	b.n	8003652 <HAL_I2C_Init+0x92>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4a7d      	ldr	r2, [pc, #500]	@ (800383c <HAL_I2C_Init+0x27c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	bf94      	ite	ls
 800364c:	2301      	movls	r3, #1
 800364e:	2300      	movhi	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0e7      	b.n	800382a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a78      	ldr	r2, [pc, #480]	@ (8003840 <HAL_I2C_Init+0x280>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0c9b      	lsrs	r3, r3, #18
 8003664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a6a      	ldr	r2, [pc, #424]	@ (8003834 <HAL_I2C_Init+0x274>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d802      	bhi.n	8003694 <HAL_I2C_Init+0xd4>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3301      	adds	r3, #1
 8003692:	e009      	b.n	80036a8 <HAL_I2C_Init+0xe8>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	4a69      	ldr	r2, [pc, #420]	@ (8003844 <HAL_I2C_Init+0x284>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	3301      	adds	r3, #1
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	495c      	ldr	r1, [pc, #368]	@ (8003834 <HAL_I2C_Init+0x274>)
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d819      	bhi.n	80036fc <HAL_I2C_Init+0x13c>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e59      	subs	r1, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d6:	1c59      	adds	r1, r3, #1
 80036d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036dc:	400b      	ands	r3, r1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_I2C_Init+0x138>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1e59      	subs	r1, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f6:	e051      	b.n	800379c <HAL_I2C_Init+0x1dc>
 80036f8:	2304      	movs	r3, #4
 80036fa:	e04f      	b.n	800379c <HAL_I2C_Init+0x1dc>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d111      	bne.n	8003728 <HAL_I2C_Init+0x168>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	440b      	add	r3, r1
 8003712:	fbb0 f3f3 	udiv	r3, r0, r3
 8003716:	3301      	adds	r3, #1
 8003718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e012      	b.n	800374e <HAL_I2C_Init+0x18e>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e58      	subs	r0, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	0099      	lsls	r1, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Init+0x196>
 8003752:	2301      	movs	r3, #1
 8003754:	e022      	b.n	800379c <HAL_I2C_Init+0x1dc>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10e      	bne.n	800377c <HAL_I2C_Init+0x1bc>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1e58      	subs	r0, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	440b      	add	r3, r1
 800376c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800377a:	e00f      	b.n	800379c <HAL_I2C_Init+0x1dc>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e58      	subs	r0, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	0099      	lsls	r1, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	6809      	ldr	r1, [r1, #0]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6911      	ldr	r1, [r2, #16]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68d2      	ldr	r2, [r2, #12]
 80037d6:	4311      	orrs	r1, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	000186a0 	.word	0x000186a0
 8003838:	001e847f 	.word	0x001e847f
 800383c:	003d08ff 	.word	0x003d08ff
 8003840:	431bde83 	.word	0x431bde83
 8003844:	10624dd3 	.word	0x10624dd3

08003848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	461a      	mov	r2, r3
 8003854:	460b      	mov	r3, r1
 8003856:	817b      	strh	r3, [r7, #10]
 8003858:	4613      	mov	r3, r2
 800385a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800385c:	f7ff fbec 	bl	8003038 <HAL_GetTick>
 8003860:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	f040 80e0 	bne.w	8003a30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2319      	movs	r3, #25
 8003876:	2201      	movs	r2, #1
 8003878:	4970      	ldr	r1, [pc, #448]	@ (8003a3c <HAL_I2C_Master_Transmit+0x1f4>)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fe0e 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
 8003888:	e0d3      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_I2C_Master_Transmit+0x50>
 8003894:	2302      	movs	r3, #2
 8003896:	e0cc      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d007      	beq.n	80038be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2221      	movs	r2, #33	@ 0x21
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2210      	movs	r2, #16
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	893a      	ldrh	r2, [r7, #8]
 80038ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a50      	ldr	r2, [pc, #320]	@ (8003a40 <HAL_I2C_Master_Transmit+0x1f8>)
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fbc8 	bl	800409c <I2C_MasterRequestWrite>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e08d      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800392c:	e066      	b.n	80039fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fecc 	bl	80046d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b04      	cmp	r3, #4
 8003944:	d107      	bne.n	8003956 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003954:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e06b      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b04      	cmp	r3, #4
 8003996:	d11b      	bne.n	80039d0 <HAL_I2C_Master_Transmit+0x188>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	d017      	beq.n	80039d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	6a39      	ldr	r1, [r7, #32]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fec3 	bl	8004760 <I2C_WaitOnBTFFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00d      	beq.n	80039fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d107      	bne.n	80039f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e01a      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d194      	bne.n	800392e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	00100002 	.word	0x00100002
 8003a40:	ffff0000 	.word	0xffff0000

08003a44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	817b      	strh	r3, [r7, #10]
 8003a56:	460b      	mov	r3, r1
 8003a58:	813b      	strh	r3, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5e:	f7ff faeb 	bl	8003038 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	f040 80d9 	bne.w	8003c24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2319      	movs	r3, #25
 8003a78:	2201      	movs	r2, #1
 8003a7a:	496d      	ldr	r1, [pc, #436]	@ (8003c30 <HAL_I2C_Mem_Write+0x1ec>)
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fd0d 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0cc      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Mem_Write+0x56>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0c5      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	@ 0x21
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2240      	movs	r2, #64	@ 0x40
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a4d      	ldr	r2, [pc, #308]	@ (8003c34 <HAL_I2C_Mem_Write+0x1f0>)
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b02:	88f8      	ldrh	r0, [r7, #6]
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4603      	mov	r3, r0
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fb44 	bl	80041a0 <I2C_RequestMemoryWrite>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d052      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e081      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fdd2 	bl	80046d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d107      	bne.n	8003b4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e06b      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1aa      	bne.n	8003b22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fdc5 	bl	8004760 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d107      	bne.n	8003bf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e016      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00100002 	.word	0x00100002
 8003c34:	ffff0000 	.word	0xffff0000

08003c38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	@ 0x30
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c52:	f7ff f9f1 	bl	8003038 <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	f040 8214 	bne.w	800408e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	2319      	movs	r3, #25
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	497b      	ldr	r1, [pc, #492]	@ (8003e5c <HAL_I2C_Mem_Read+0x224>)
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fc13 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e207      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2C_Mem_Read+0x56>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e200      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d007      	beq.n	8003cb4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2222      	movs	r2, #34	@ 0x22
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2240      	movs	r2, #64	@ 0x40
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e60 <HAL_I2C_Mem_Read+0x228>)
 8003cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf6:	88f8      	ldrh	r0, [r7, #6]
 8003cf8:	893a      	ldrh	r2, [r7, #8]
 8003cfa:	8979      	ldrh	r1, [r7, #10]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	4603      	mov	r3, r0
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fae0 	bl	80042cc <I2C_RequestMemoryRead>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1bc      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d113      	bne.n	8003d46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	623b      	str	r3, [r7, #32]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	623b      	str	r3, [r7, #32]
 8003d32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e190      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d11b      	bne.n	8003d86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e170      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d11b      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	e150      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ddc:	e144      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	f200 80f1 	bhi.w	8003fca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d123      	bne.n	8003e38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fcfb 	bl	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e145      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e36:	e117      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d14e      	bne.n	8003ede <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e46:	2200      	movs	r2, #0
 8003e48:	4906      	ldr	r1, [pc, #24]	@ (8003e64 <HAL_I2C_Mem_Read+0x22c>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fb26 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e11a      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
 8003e5a:	bf00      	nop
 8003e5c:	00100002 	.word	0x00100002
 8003e60:	ffff0000 	.word	0xffff0000
 8003e64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003edc:	e0c4      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	496c      	ldr	r1, [pc, #432]	@ (8004098 <HAL_I2C_Mem_Read+0x460>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fad7 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0cb      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f40:	2200      	movs	r2, #0
 8003f42:	4955      	ldr	r1, [pc, #340]	@ (8004098 <HAL_I2C_Mem_Read+0x460>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 faa9 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e09d      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fc8:	e04e      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fc0e 	bl	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e058      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b04      	cmp	r3, #4
 800401c:	d124      	bne.n	8004068 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004022:	2b03      	cmp	r3, #3
 8004024:	d107      	bne.n	8004036 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004034:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f aeb6 	bne.w	8003dde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	@ 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	00010004 	.word	0x00010004

0800409c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	460b      	mov	r3, r1
 80040aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d006      	beq.n	80040c6 <I2C_MasterRequestWrite+0x2a>
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d003      	beq.n	80040c6 <I2C_MasterRequestWrite+0x2a>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040c4:	d108      	bne.n	80040d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e00b      	b.n	80040f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	2b12      	cmp	r3, #18
 80040de:	d107      	bne.n	80040f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f9cd 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00d      	beq.n	8004124 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004116:	d103      	bne.n	8004120 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800411e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e035      	b.n	8004190 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800412c:	d108      	bne.n	8004140 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800412e:	897b      	ldrh	r3, [r7, #10]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800413c:	611a      	str	r2, [r3, #16]
 800413e:	e01b      	b.n	8004178 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004140:	897b      	ldrh	r3, [r7, #10]
 8004142:	11db      	asrs	r3, r3, #7
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 0306 	and.w	r3, r3, #6
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f063 030f 	orn	r3, r3, #15
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	490e      	ldr	r1, [pc, #56]	@ (8004198 <I2C_MasterRequestWrite+0xfc>)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fa16 	bl	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e010      	b.n	8004190 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4907      	ldr	r1, [pc, #28]	@ (800419c <I2C_MasterRequestWrite+0x100>)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fa06 	bl	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	00010008 	.word	0x00010008
 800419c:	00010002 	.word	0x00010002

080041a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	4608      	mov	r0, r1
 80041aa:	4611      	mov	r1, r2
 80041ac:	461a      	mov	r2, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	817b      	strh	r3, [r7, #10]
 80041b2:	460b      	mov	r3, r1
 80041b4:	813b      	strh	r3, [r7, #8]
 80041b6:	4613      	mov	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f960 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f0:	d103      	bne.n	80041fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e05f      	b.n	80042be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041fe:	897b      	ldrh	r3, [r7, #10]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800420c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	6a3a      	ldr	r2, [r7, #32]
 8004212:	492d      	ldr	r1, [pc, #180]	@ (80042c8 <I2C_RequestMemoryWrite+0x128>)
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f9bb 	bl	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e04c      	b.n	80042be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	6a39      	ldr	r1, [r7, #32]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fa46 	bl	80046d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	2b04      	cmp	r3, #4
 8004250:	d107      	bne.n	8004262 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e02b      	b.n	80042be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	611a      	str	r2, [r3, #16]
 8004276:	e021      	b.n	80042bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004278:	893b      	ldrh	r3, [r7, #8]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	b29b      	uxth	r3, r3
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004288:	6a39      	ldr	r1, [r7, #32]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fa20 	bl	80046d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	2b04      	cmp	r3, #4
 800429c:	d107      	bne.n	80042ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e005      	b.n	80042be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042b2:	893b      	ldrh	r3, [r7, #8]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	00010002 	.word	0x00010002

080042cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	461a      	mov	r2, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	817b      	strh	r3, [r7, #10]
 80042de:	460b      	mov	r3, r1
 80042e0:	813b      	strh	r3, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	2200      	movs	r2, #0
 800430e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f8c2 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800432c:	d103      	bne.n	8004336 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004334:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e0aa      	b.n	8004490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	4952      	ldr	r1, [pc, #328]	@ (8004498 <I2C_RequestMemoryRead+0x1cc>)
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f91d 	bl	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e097      	b.n	8004490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f9a8 	bl	80046d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	2b04      	cmp	r3, #4
 800438c:	d107      	bne.n	800439e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e076      	b.n	8004490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043a8:	893b      	ldrh	r3, [r7, #8]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]
 80043b2:	e021      	b.n	80043f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043b4:	893b      	ldrh	r3, [r7, #8]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c4:	6a39      	ldr	r1, [r7, #32]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f982 	bl	80046d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d107      	bne.n	80043ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e050      	b.n	8004490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ee:	893b      	ldrh	r3, [r7, #8]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043fa:	6a39      	ldr	r1, [r7, #32]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f967 	bl	80046d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00d      	beq.n	8004424 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	2b04      	cmp	r3, #4
 800440e:	d107      	bne.n	8004420 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e035      	b.n	8004490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004432:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	2200      	movs	r2, #0
 800443c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f82b 	bl	800449c <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00d      	beq.n	8004468 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800445a:	d103      	bne.n	8004464 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004462:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e013      	b.n	8004490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004468:	897b      	ldrh	r3, [r7, #10]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	6a3a      	ldr	r2, [r7, #32]
 800447c:	4906      	ldr	r1, [pc, #24]	@ (8004498 <I2C_RequestMemoryRead+0x1cc>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f886 	bl	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	00010002 	.word	0x00010002

0800449c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ac:	e048      	b.n	8004540 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d044      	beq.n	8004540 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7fe fdbf 	bl	8003038 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d139      	bne.n	8004540 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	0c1b      	lsrs	r3, r3, #16
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10d      	bne.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	43da      	mvns	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4013      	ands	r3, r2
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	e00c      	b.n	800450c <I2C_WaitOnFlagUntilTimeout+0x70>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	d116      	bne.n	8004540 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e023      	b.n	8004588 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d10d      	bne.n	8004566 <I2C_WaitOnFlagUntilTimeout+0xca>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	43da      	mvns	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4013      	ands	r3, r2
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	e00c      	b.n	8004580 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	43da      	mvns	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	429a      	cmp	r2, r3
 8004584:	d093      	beq.n	80044ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800459e:	e071      	b.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ae:	d123      	bne.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	f043 0204 	orr.w	r2, r3, #4
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e067      	b.n	80046c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d041      	beq.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004600:	f7fe fd1a 	bl	8003038 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d136      	bne.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d10c      	bne.n	800463a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e00b      	b.n	8004652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	43da      	mvns	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4013      	ands	r3, r2
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e021      	b.n	80046c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	0c1b      	lsrs	r3, r3, #16
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10c      	bne.n	80046a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	43da      	mvns	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e00b      	b.n	80046c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	43da      	mvns	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4013      	ands	r3, r2
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f47f af6d 	bne.w	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046dc:	e034      	b.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f8e3 	bl	80048aa <I2C_IsAcknowledgeFailed>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e034      	b.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d028      	beq.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fe fc9f 	bl	8003038 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d11d      	bne.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004716:	2b80      	cmp	r3, #128	@ 0x80
 8004718:	d016      	beq.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e007      	b.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004752:	2b80      	cmp	r3, #128	@ 0x80
 8004754:	d1c3      	bne.n	80046de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800476c:	e034      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f89b 	bl	80048aa <I2C_IsAcknowledgeFailed>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e034      	b.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d028      	beq.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004786:	f7fe fc57 	bl	8003038 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11d      	bne.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d016      	beq.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e007      	b.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d1c3      	bne.n	800476e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047fc:	e049      	b.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d119      	bne.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0210 	mvn.w	r2, #16
 8004814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e030      	b.n	80048a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004840:	f7fe fbfa 	bl	8003038 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	d302      	bcc.n	8004856 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11d      	bne.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004860:	2b40      	cmp	r3, #64	@ 0x40
 8004862:	d016      	beq.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e007      	b.n	80048a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489c:	2b40      	cmp	r3, #64	@ 0x40
 800489e:	d1ae      	bne.n	80047fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c0:	d11b      	bne.n	80048fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	f043 0204 	orr.w	r2, r3, #4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0cc      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800491c:	4b68      	ldr	r3, [pc, #416]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d90c      	bls.n	8004944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b65      	ldr	r3, [pc, #404]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b63      	ldr	r3, [pc, #396]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0b8      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d020      	beq.n	8004992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800495c:	4b59      	ldr	r3, [pc, #356]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a58      	ldr	r2, [pc, #352]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004974:	4b53      	ldr	r3, [pc, #332]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a52      	ldr	r2, [pc, #328]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800497e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004980:	4b50      	ldr	r3, [pc, #320]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	494d      	ldr	r1, [pc, #308]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d044      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	4b47      	ldr	r3, [pc, #284]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d119      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e07f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d003      	beq.n	80049c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e06f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e067      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e6:	4b37      	ldr	r3, [pc, #220]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4934      	ldr	r1, [pc, #208]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f8:	f7fe fb1e 	bl	8003038 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a00:	f7fe fb1a 	bl	8003038 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e04f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 020c 	and.w	r2, r3, #12
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d1eb      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a28:	4b25      	ldr	r3, [pc, #148]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d20c      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b22      	ldr	r3, [pc, #136]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e032      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5c:	4b19      	ldr	r3, [pc, #100]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4916      	ldr	r1, [pc, #88]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7a:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	490e      	ldr	r1, [pc, #56]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a8e:	f000 f855 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004a92:	4602      	mov	r2, r0
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	490a      	ldr	r1, [pc, #40]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	5ccb      	ldrb	r3, [r1, r3]
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	4a09      	ldr	r2, [pc, #36]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fa7e 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023c00 	.word	0x40023c00
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	0800978c 	.word	0x0800978c
 8004acc:	20000010 	.word	0x20000010
 8004ad0:	20000014 	.word	0x20000014

08004ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	@ (8004ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000010 	.word	0x20000010

08004aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004af0:	f7ff fff0 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0a9b      	lsrs	r3, r3, #10
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4903      	ldr	r1, [pc, #12]	@ (8004b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	0800979c 	.word	0x0800979c

08004b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b18:	f7ff ffdc 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	0b5b      	lsrs	r3, r3, #13
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4903      	ldr	r1, [pc, #12]	@ (8004b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40023800 	.word	0x40023800
 8004b38:	0800979c 	.word	0x0800979c

08004b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b40:	b0ae      	sub	sp, #184	@ 0xb8
 8004b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b62:	4bcb      	ldr	r3, [pc, #812]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b0c      	cmp	r3, #12
 8004b6c:	f200 8206 	bhi.w	8004f7c <HAL_RCC_GetSysClockFreq+0x440>
 8004b70:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004f7d 	.word	0x08004f7d
 8004b80:	08004f7d 	.word	0x08004f7d
 8004b84:	08004f7d 	.word	0x08004f7d
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	08004f7d 	.word	0x08004f7d
 8004b90:	08004f7d 	.word	0x08004f7d
 8004b94:	08004f7d 	.word	0x08004f7d
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004f7d 	.word	0x08004f7d
 8004ba0:	08004f7d 	.word	0x08004f7d
 8004ba4:	08004f7d 	.word	0x08004f7d
 8004ba8:	08004dad 	.word	0x08004dad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bac:	4bb9      	ldr	r3, [pc, #740]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004bb2:	e1e7      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bb4:	4bb8      	ldr	r3, [pc, #736]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bba:	e1e3      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bbc:	4bb4      	ldr	r3, [pc, #720]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc8:	4bb1      	ldr	r3, [pc, #708]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d071      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd4:	4bae      	ldr	r3, [pc, #696]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	099b      	lsrs	r3, r3, #6
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004be0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	f04f 0000 	mov.w	r0, #0
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	0159      	lsls	r1, r3, #5
 8004c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c0c:	0150      	lsls	r0, r2, #5
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4621      	mov	r1, r4
 8004c14:	1a51      	subs	r1, r2, r1
 8004c16:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c18:	4629      	mov	r1, r5
 8004c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	018b      	lsls	r3, r1, #6
 8004c30:	4641      	mov	r1, r8
 8004c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c36:	4641      	mov	r1, r8
 8004c38:	018a      	lsls	r2, r1, #6
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	1a51      	subs	r1, r2, r1
 8004c3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c40:	4649      	mov	r1, r9
 8004c42:	eb63 0301 	sbc.w	r3, r3, r1
 8004c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c54:	4649      	mov	r1, r9
 8004c56:	00cb      	lsls	r3, r1, #3
 8004c58:	4641      	mov	r1, r8
 8004c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5e:	4641      	mov	r1, r8
 8004c60:	00ca      	lsls	r2, r1, #3
 8004c62:	4610      	mov	r0, r2
 8004c64:	4619      	mov	r1, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	4622      	mov	r2, r4
 8004c6a:	189b      	adds	r3, r3, r2
 8004c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c6e:	462b      	mov	r3, r5
 8004c70:	460a      	mov	r2, r1
 8004c72:	eb42 0303 	adc.w	r3, r2, r3
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c84:	4629      	mov	r1, r5
 8004c86:	024b      	lsls	r3, r1, #9
 8004c88:	4621      	mov	r1, r4
 8004c8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c8e:	4621      	mov	r1, r4
 8004c90:	024a      	lsls	r2, r1, #9
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ca0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ca4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004ca8:	f7fb ffee 	bl	8000c88 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cb6:	e067      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb8:	4b75      	ldr	r3, [pc, #468]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cc4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cd6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004cda:	4622      	mov	r2, r4
 8004cdc:	462b      	mov	r3, r5
 8004cde:	f04f 0000 	mov.w	r0, #0
 8004ce2:	f04f 0100 	mov.w	r1, #0
 8004ce6:	0159      	lsls	r1, r3, #5
 8004ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cec:	0150      	lsls	r0, r2, #5
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	1a51      	subs	r1, r2, r1
 8004cf6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d0c:	4649      	mov	r1, r9
 8004d0e:	018b      	lsls	r3, r1, #6
 8004d10:	4641      	mov	r1, r8
 8004d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d16:	4641      	mov	r1, r8
 8004d18:	018a      	lsls	r2, r1, #6
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d20:	4649      	mov	r1, r9
 8004d22:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d3a:	4692      	mov	sl, r2
 8004d3c:	469b      	mov	fp, r3
 8004d3e:	4623      	mov	r3, r4
 8004d40:	eb1a 0303 	adds.w	r3, sl, r3
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	462b      	mov	r3, r5
 8004d48:	eb4b 0303 	adc.w	r3, fp, r3
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	028b      	lsls	r3, r1, #10
 8004d5e:	4621      	mov	r1, r4
 8004d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d64:	4621      	mov	r1, r4
 8004d66:	028a      	lsls	r2, r1, #10
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d70:	2200      	movs	r2, #0
 8004d72:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d74:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d7a:	f7fb ff85 	bl	8000c88 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4613      	mov	r3, r2
 8004d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d88:	4b41      	ldr	r3, [pc, #260]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	3301      	adds	r3, #1
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004d9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004daa:	e0eb      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dac:	4b38      	ldr	r3, [pc, #224]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db8:	4b35      	ldr	r3, [pc, #212]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d06b      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc4:	4b32      	ldr	r3, [pc, #200]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	2200      	movs	r2, #0
 8004dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dd8:	2300      	movs	r3, #0
 8004dda:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ddc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004de0:	4622      	mov	r2, r4
 8004de2:	462b      	mov	r3, r5
 8004de4:	f04f 0000 	mov.w	r0, #0
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	0159      	lsls	r1, r3, #5
 8004dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df2:	0150      	lsls	r0, r2, #5
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4621      	mov	r1, r4
 8004dfa:	1a51      	subs	r1, r2, r1
 8004dfc:	61b9      	str	r1, [r7, #24]
 8004dfe:	4629      	mov	r1, r5
 8004e00:	eb63 0301 	sbc.w	r3, r3, r1
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e12:	4659      	mov	r1, fp
 8004e14:	018b      	lsls	r3, r1, #6
 8004e16:	4651      	mov	r1, sl
 8004e18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	018a      	lsls	r2, r1, #6
 8004e20:	4651      	mov	r1, sl
 8004e22:	ebb2 0801 	subs.w	r8, r2, r1
 8004e26:	4659      	mov	r1, fp
 8004e28:	eb63 0901 	sbc.w	r9, r3, r1
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e40:	4690      	mov	r8, r2
 8004e42:	4699      	mov	r9, r3
 8004e44:	4623      	mov	r3, r4
 8004e46:	eb18 0303 	adds.w	r3, r8, r3
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	eb49 0303 	adc.w	r3, r9, r3
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e60:	4629      	mov	r1, r5
 8004e62:	024b      	lsls	r3, r1, #9
 8004e64:	4621      	mov	r1, r4
 8004e66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	024a      	lsls	r2, r1, #9
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e76:	2200      	movs	r2, #0
 8004e78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e7a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e80:	f7fb ff02 	bl	8000c88 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4613      	mov	r3, r2
 8004e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e8e:	e065      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x420>
 8004e90:	40023800 	.word	0x40023800
 8004e94:	00f42400 	.word	0x00f42400
 8004e98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	099b      	lsrs	r3, r3, #6
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eac:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eae:	2300      	movs	r3, #0
 8004eb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eb2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	464b      	mov	r3, r9
 8004eba:	f04f 0000 	mov.w	r0, #0
 8004ebe:	f04f 0100 	mov.w	r1, #0
 8004ec2:	0159      	lsls	r1, r3, #5
 8004ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec8:	0150      	lsls	r0, r2, #5
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4641      	mov	r1, r8
 8004ed0:	1a51      	subs	r1, r2, r1
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ee8:	4659      	mov	r1, fp
 8004eea:	018b      	lsls	r3, r1, #6
 8004eec:	4651      	mov	r1, sl
 8004eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ef2:	4651      	mov	r1, sl
 8004ef4:	018a      	lsls	r2, r1, #6
 8004ef6:	4651      	mov	r1, sl
 8004ef8:	1a54      	subs	r4, r2, r1
 8004efa:	4659      	mov	r1, fp
 8004efc:	eb63 0501 	sbc.w	r5, r3, r1
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	00eb      	lsls	r3, r5, #3
 8004f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0e:	00e2      	lsls	r2, r4, #3
 8004f10:	4614      	mov	r4, r2
 8004f12:	461d      	mov	r5, r3
 8004f14:	4643      	mov	r3, r8
 8004f16:	18e3      	adds	r3, r4, r3
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	eb45 0303 	adc.w	r3, r5, r3
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f2e:	4629      	mov	r1, r5
 8004f30:	028b      	lsls	r3, r1, #10
 8004f32:	4621      	mov	r1, r4
 8004f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f38:	4621      	mov	r1, r4
 8004f3a:	028a      	lsls	r2, r1, #10
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f44:	2200      	movs	r2, #0
 8004f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f48:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f4e:	f7fb fe9b 	bl	8000c88 <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4613      	mov	r3, r2
 8004f58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	0f1b      	lsrs	r3, r3, #28
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f7a:	e003      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	37b8      	adds	r7, #184	@ 0xb8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	00f42400 	.word	0x00f42400

08004f9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e28d      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8083 	beq.w	80050c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fbc:	4b94      	ldr	r3, [pc, #592]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d019      	beq.n	8004ffc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fc8:	4b91      	ldr	r3, [pc, #580]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fd4:	4b8e      	ldr	r3, [pc, #568]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fe0:	d00c      	beq.n	8004ffc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe2:	4b8b      	ldr	r3, [pc, #556]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fea:	2b0c      	cmp	r3, #12
 8004fec:	d112      	bne.n	8005014 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fee:	4b88      	ldr	r3, [pc, #544]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ffa:	d10b      	bne.n	8005014 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	4b84      	ldr	r3, [pc, #528]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d05b      	beq.n	80050c0 <HAL_RCC_OscConfig+0x124>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d157      	bne.n	80050c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e25a      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800501c:	d106      	bne.n	800502c <HAL_RCC_OscConfig+0x90>
 800501e:	4b7c      	ldr	r3, [pc, #496]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7b      	ldr	r2, [pc, #492]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e01d      	b.n	8005068 <HAL_RCC_OscConfig+0xcc>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005034:	d10c      	bne.n	8005050 <HAL_RCC_OscConfig+0xb4>
 8005036:	4b76      	ldr	r3, [pc, #472]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a75      	ldr	r2, [pc, #468]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 800503c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4b73      	ldr	r3, [pc, #460]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a72      	ldr	r2, [pc, #456]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e00b      	b.n	8005068 <HAL_RCC_OscConfig+0xcc>
 8005050:	4b6f      	ldr	r3, [pc, #444]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6e      	ldr	r2, [pc, #440]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4b6c      	ldr	r3, [pc, #432]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a6b      	ldr	r2, [pc, #428]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d013      	beq.n	8005098 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd ffe2 	bl	8003038 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005078:	f7fd ffde 	bl	8003038 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	@ 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e21f      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508a:	4b61      	ldr	r3, [pc, #388]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0xdc>
 8005096:	e014      	b.n	80050c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fd ffce 	bl	8003038 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fd ffca 	bl	8003038 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	@ 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e20b      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b2:	4b57      	ldr	r3, [pc, #348]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x104>
 80050be:	e000      	b.n	80050c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d06f      	beq.n	80051ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050ce:	4b50      	ldr	r3, [pc, #320]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d017      	beq.n	800510a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050da:	4b4d      	ldr	r3, [pc, #308]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d105      	bne.n	80050f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f2:	4b47      	ldr	r3, [pc, #284]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d11c      	bne.n	8005138 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fe:	4b44      	ldr	r3, [pc, #272]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d116      	bne.n	8005138 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510a:	4b41      	ldr	r3, [pc, #260]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_RCC_OscConfig+0x186>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d001      	beq.n	8005122 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e1d3      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005122:	4b3b      	ldr	r3, [pc, #236]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4937      	ldr	r1, [pc, #220]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005136:	e03a      	b.n	80051ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d020      	beq.n	8005182 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005140:	4b34      	ldr	r3, [pc, #208]	@ (8005214 <HAL_RCC_OscConfig+0x278>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005146:	f7fd ff77 	bl	8003038 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800514e:	f7fd ff73 	bl	8003038 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e1b4      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005160:	4b2b      	ldr	r3, [pc, #172]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516c:	4b28      	ldr	r3, [pc, #160]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4925      	ldr	r1, [pc, #148]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 800517c:	4313      	orrs	r3, r2
 800517e:	600b      	str	r3, [r1, #0]
 8005180:	e015      	b.n	80051ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005182:	4b24      	ldr	r3, [pc, #144]	@ (8005214 <HAL_RCC_OscConfig+0x278>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd ff56 	bl	8003038 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005190:	f7fd ff52 	bl	8003038 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e193      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d036      	beq.n	8005228 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c2:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <HAL_RCC_OscConfig+0x27c>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fd ff36 	bl	8003038 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d0:	f7fd ff32 	bl	8003038 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e173      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <HAL_RCC_OscConfig+0x274>)
 80051e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x234>
 80051ee:	e01b      	b.n	8005228 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f0:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <HAL_RCC_OscConfig+0x27c>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f6:	f7fd ff1f 	bl	8003038 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051fc:	e00e      	b.n	800521c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051fe:	f7fd ff1b 	bl	8003038 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d907      	bls.n	800521c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e15c      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
 8005210:	40023800 	.word	0x40023800
 8005214:	42470000 	.word	0x42470000
 8005218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800521c:	4b8a      	ldr	r3, [pc, #552]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 800521e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1ea      	bne.n	80051fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8097 	beq.w	8005364 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523a:	4b83      	ldr	r3, [pc, #524]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10f      	bne.n	8005266 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	4b7f      	ldr	r3, [pc, #508]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	4a7e      	ldr	r2, [pc, #504]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005254:	6413      	str	r3, [r2, #64]	@ 0x40
 8005256:	4b7c      	ldr	r3, [pc, #496]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005266:	4b79      	ldr	r3, [pc, #484]	@ (800544c <HAL_RCC_OscConfig+0x4b0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d118      	bne.n	80052a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005272:	4b76      	ldr	r3, [pc, #472]	@ (800544c <HAL_RCC_OscConfig+0x4b0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a75      	ldr	r2, [pc, #468]	@ (800544c <HAL_RCC_OscConfig+0x4b0>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800527c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527e:	f7fd fedb 	bl	8003038 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005286:	f7fd fed7 	bl	8003038 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e118      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005298:	4b6c      	ldr	r3, [pc, #432]	@ (800544c <HAL_RCC_OscConfig+0x4b0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d106      	bne.n	80052ba <HAL_RCC_OscConfig+0x31e>
 80052ac:	4b66      	ldr	r3, [pc, #408]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	4a65      	ldr	r2, [pc, #404]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052b2:	f043 0301 	orr.w	r3, r3, #1
 80052b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b8:	e01c      	b.n	80052f4 <HAL_RCC_OscConfig+0x358>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d10c      	bne.n	80052dc <HAL_RCC_OscConfig+0x340>
 80052c2:	4b61      	ldr	r3, [pc, #388]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	4a60      	ldr	r2, [pc, #384]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052c8:	f043 0304 	orr.w	r3, r3, #4
 80052cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ce:	4b5e      	ldr	r3, [pc, #376]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d2:	4a5d      	ldr	r2, [pc, #372]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052da:	e00b      	b.n	80052f4 <HAL_RCC_OscConfig+0x358>
 80052dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	4a59      	ldr	r2, [pc, #356]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e8:	4b57      	ldr	r3, [pc, #348]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ec:	4a56      	ldr	r2, [pc, #344]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80052ee:	f023 0304 	bic.w	r3, r3, #4
 80052f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d015      	beq.n	8005328 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fc:	f7fd fe9c 	bl	8003038 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005302:	e00a      	b.n	800531a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005304:	f7fd fe98 	bl	8003038 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0d7      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531a:	4b4b      	ldr	r3, [pc, #300]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0ee      	beq.n	8005304 <HAL_RCC_OscConfig+0x368>
 8005326:	e014      	b.n	8005352 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005328:	f7fd fe86 	bl	8003038 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532e:	e00a      	b.n	8005346 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fd fe82 	bl	8003038 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e0c1      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005346:	4b40      	ldr	r3, [pc, #256]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ee      	bne.n	8005330 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005352:	7dfb      	ldrb	r3, [r7, #23]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d105      	bne.n	8005364 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005358:	4b3b      	ldr	r3, [pc, #236]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	4a3a      	ldr	r2, [pc, #232]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 800535e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005362:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80ad 	beq.w	80054c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800536e:	4b36      	ldr	r3, [pc, #216]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b08      	cmp	r3, #8
 8005378:	d060      	beq.n	800543c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d145      	bne.n	800540e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005382:	4b33      	ldr	r3, [pc, #204]	@ (8005450 <HAL_RCC_OscConfig+0x4b4>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fd fe56 	bl	8003038 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005390:	f7fd fe52 	bl	8003038 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e093      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a2:	4b29      	ldr	r3, [pc, #164]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f0      	bne.n	8005390 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	019b      	lsls	r3, r3, #6
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	3b01      	subs	r3, #1
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	061b      	lsls	r3, r3, #24
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	071b      	lsls	r3, r3, #28
 80053da:	491b      	ldr	r1, [pc, #108]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <HAL_RCC_OscConfig+0x4b4>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fd fe27 	bl	8003038 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ee:	f7fd fe23 	bl	8003038 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e064      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005400:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x452>
 800540c:	e05c      	b.n	80054c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <HAL_RCC_OscConfig+0x4b4>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fd fe10 	bl	8003038 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800541c:	f7fd fe0c 	bl	8003038 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e04d      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542e:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <HAL_RCC_OscConfig+0x4ac>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x480>
 800543a:	e045      	b.n	80054c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d107      	bne.n	8005454 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e040      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
 8005448:	40023800 	.word	0x40023800
 800544c:	40007000 	.word	0x40007000
 8005450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005454:	4b1f      	ldr	r3, [pc, #124]	@ (80054d4 <HAL_RCC_OscConfig+0x538>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d030      	beq.n	80054c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d129      	bne.n	80054c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d122      	bne.n	80054c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800548a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800548c:	4293      	cmp	r3, r2
 800548e:	d119      	bne.n	80054c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549a:	085b      	lsrs	r3, r3, #1
 800549c:	3b01      	subs	r3, #1
 800549e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d10f      	bne.n	80054c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d107      	bne.n	80054c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023800 	.word	0x40023800

080054d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e041      	b.n	800556e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fd fc3c 	bl	8002d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f000 fa70 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d001      	beq.n	8005590 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e046      	b.n	800561e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a23      	ldr	r2, [pc, #140]	@ (800562c <HAL_TIM_Base_Start+0xb4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_TIM_Base_Start+0x70>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055aa:	d01d      	beq.n	80055e8 <HAL_TIM_Base_Start+0x70>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005630 <HAL_TIM_Base_Start+0xb8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_TIM_Base_Start+0x70>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005634 <HAL_TIM_Base_Start+0xbc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_TIM_Base_Start+0x70>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005638 <HAL_TIM_Base_Start+0xc0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_TIM_Base_Start+0x70>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1b      	ldr	r2, [pc, #108]	@ (800563c <HAL_TIM_Base_Start+0xc4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_TIM_Base_Start+0x70>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a19      	ldr	r2, [pc, #100]	@ (8005640 <HAL_TIM_Base_Start+0xc8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIM_Base_Start+0x70>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a18      	ldr	r2, [pc, #96]	@ (8005644 <HAL_TIM_Base_Start+0xcc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d111      	bne.n	800560c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d010      	beq.n	800561c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0201 	orr.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560a:	e007      	b.n	800561c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40000400 	.word	0x40000400
 8005634:	40000800 	.word	0x40000800
 8005638:	40000c00 	.word	0x40000c00
 800563c:	40010400 	.word	0x40010400
 8005640:	40014000 	.word	0x40014000
 8005644:	40001800 	.word	0x40001800

08005648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e041      	b.n	80056de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fd fb62 	bl	8002d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f000 f9b8 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <HAL_TIM_PWM_Start+0x24>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e022      	b.n	8005752 <HAL_TIM_PWM_Start+0x6a>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b04      	cmp	r3, #4
 8005710:	d109      	bne.n	8005726 <HAL_TIM_PWM_Start+0x3e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	bf14      	ite	ne
 800571e:	2301      	movne	r3, #1
 8005720:	2300      	moveq	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e015      	b.n	8005752 <HAL_TIM_PWM_Start+0x6a>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d109      	bne.n	8005740 <HAL_TIM_PWM_Start+0x58>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e008      	b.n	8005752 <HAL_TIM_PWM_Start+0x6a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e07c      	b.n	8005854 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0x82>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005768:	e013      	b.n	8005792 <HAL_TIM_PWM_Start+0xaa>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b04      	cmp	r3, #4
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0x92>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005778:	e00b      	b.n	8005792 <HAL_TIM_PWM_Start+0xaa>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d104      	bne.n	800578a <HAL_TIM_PWM_Start+0xa2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005788:	e003      	b.n	8005792 <HAL_TIM_PWM_Start+0xaa>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2201      	movs	r2, #1
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fb8a 	bl	8005eb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2d      	ldr	r2, [pc, #180]	@ (800585c <HAL_TIM_PWM_Start+0x174>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <HAL_TIM_PWM_Start+0xcc>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005860 <HAL_TIM_PWM_Start+0x178>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d101      	bne.n	80057b8 <HAL_TIM_PWM_Start+0xd0>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <HAL_TIM_PWM_Start+0xd2>
 80057b8:	2300      	movs	r3, #0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a22      	ldr	r2, [pc, #136]	@ (800585c <HAL_TIM_PWM_Start+0x174>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <HAL_TIM_PWM_Start+0x136>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e0:	d01d      	beq.n	800581e <HAL_TIM_PWM_Start+0x136>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005864 <HAL_TIM_PWM_Start+0x17c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <HAL_TIM_PWM_Start+0x136>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005868 <HAL_TIM_PWM_Start+0x180>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_TIM_PWM_Start+0x136>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1c      	ldr	r2, [pc, #112]	@ (800586c <HAL_TIM_PWM_Start+0x184>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_TIM_PWM_Start+0x136>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a16      	ldr	r2, [pc, #88]	@ (8005860 <HAL_TIM_PWM_Start+0x178>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIM_PWM_Start+0x136>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a18      	ldr	r2, [pc, #96]	@ (8005870 <HAL_TIM_PWM_Start+0x188>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIM_PWM_Start+0x136>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a16      	ldr	r2, [pc, #88]	@ (8005874 <HAL_TIM_PWM_Start+0x18c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d111      	bne.n	8005842 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d010      	beq.n	8005852 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005840:	e007      	b.n	8005852 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0201 	orr.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40010000 	.word	0x40010000
 8005860:	40010400 	.word	0x40010400
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40014000 	.word	0x40014000
 8005874:	40001800 	.word	0x40001800

08005878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005892:	2302      	movs	r3, #2
 8005894:	e0ae      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	f200 809f 	bhi.w	80059e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	080059e5 	.word	0x080059e5
 80058b4:	080059e5 	.word	0x080059e5
 80058b8:	080059e5 	.word	0x080059e5
 80058bc:	08005921 	.word	0x08005921
 80058c0:	080059e5 	.word	0x080059e5
 80058c4:	080059e5 	.word	0x080059e5
 80058c8:	080059e5 	.word	0x080059e5
 80058cc:	08005963 	.word	0x08005963
 80058d0:	080059e5 	.word	0x080059e5
 80058d4:	080059e5 	.word	0x080059e5
 80058d8:	080059e5 	.word	0x080059e5
 80058dc:	080059a3 	.word	0x080059a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f934 	bl	8005b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0204 	bic.w	r2, r2, #4
 800590a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6999      	ldr	r1, [r3, #24]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	619a      	str	r2, [r3, #24]
      break;
 800591e:	e064      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 f984 	bl	8005c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	619a      	str	r2, [r3, #24]
      break;
 8005960:	e043      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f9d9 	bl	8005d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0208 	orr.w	r2, r2, #8
 800597c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0204 	bic.w	r2, r2, #4
 800598c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69d9      	ldr	r1, [r3, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	61da      	str	r2, [r3, #28]
      break;
 80059a0:	e023      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fa2d 	bl	8005e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69d9      	ldr	r1, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	021a      	lsls	r2, r3, #8
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	61da      	str	r2, [r3, #28]
      break;
 80059e2:	e002      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	75fb      	strb	r3, [r7, #23]
      break;
 80059e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a46      	ldr	r2, [pc, #280]	@ (8005b28 <TIM_Base_SetConfig+0x12c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1a:	d00f      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a43      	ldr	r2, [pc, #268]	@ (8005b2c <TIM_Base_SetConfig+0x130>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a42      	ldr	r2, [pc, #264]	@ (8005b30 <TIM_Base_SetConfig+0x134>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a41      	ldr	r2, [pc, #260]	@ (8005b34 <TIM_Base_SetConfig+0x138>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a40      	ldr	r2, [pc, #256]	@ (8005b38 <TIM_Base_SetConfig+0x13c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d108      	bne.n	8005a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a35      	ldr	r2, [pc, #212]	@ (8005b28 <TIM_Base_SetConfig+0x12c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d02b      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5c:	d027      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a32      	ldr	r2, [pc, #200]	@ (8005b2c <TIM_Base_SetConfig+0x130>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d023      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a31      	ldr	r2, [pc, #196]	@ (8005b30 <TIM_Base_SetConfig+0x134>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01f      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a30      	ldr	r2, [pc, #192]	@ (8005b34 <TIM_Base_SetConfig+0x138>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01b      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2f      	ldr	r2, [pc, #188]	@ (8005b38 <TIM_Base_SetConfig+0x13c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d017      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2e      	ldr	r2, [pc, #184]	@ (8005b3c <TIM_Base_SetConfig+0x140>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2d      	ldr	r2, [pc, #180]	@ (8005b40 <TIM_Base_SetConfig+0x144>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00f      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2c      	ldr	r2, [pc, #176]	@ (8005b44 <TIM_Base_SetConfig+0x148>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00b      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2b      	ldr	r2, [pc, #172]	@ (8005b48 <TIM_Base_SetConfig+0x14c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d007      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8005b4c <TIM_Base_SetConfig+0x150>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d003      	beq.n	8005aae <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a29      	ldr	r2, [pc, #164]	@ (8005b50 <TIM_Base_SetConfig+0x154>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d108      	bne.n	8005ac0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a10      	ldr	r2, [pc, #64]	@ (8005b28 <TIM_Base_SetConfig+0x12c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_Base_SetConfig+0xf8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a12      	ldr	r2, [pc, #72]	@ (8005b38 <TIM_Base_SetConfig+0x13c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d103      	bne.n	8005afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d105      	bne.n	8005b1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f023 0201 	bic.w	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	611a      	str	r2, [r3, #16]
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800
 8005b48:	40001800 	.word	0x40001800
 8005b4c:	40001c00 	.word	0x40001c00
 8005b50:	40002000 	.word	0x40002000

08005b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f023 0201 	bic.w	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f023 0302 	bic.w	r3, r3, #2
 8005b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a20      	ldr	r2, [pc, #128]	@ (8005c2c <TIM_OC1_SetConfig+0xd8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x64>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c30 <TIM_OC1_SetConfig+0xdc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10c      	bne.n	8005bd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0308 	bic.w	r3, r3, #8
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f023 0304 	bic.w	r3, r3, #4
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	@ (8005c2c <TIM_OC1_SetConfig+0xd8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_OC1_SetConfig+0x8e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <TIM_OC1_SetConfig+0xdc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d111      	bne.n	8005c06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f023 0210 	bic.w	r2, r3, #16
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0320 	bic.w	r3, r3, #32
 8005c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a22      	ldr	r2, [pc, #136]	@ (8005d18 <TIM_OC2_SetConfig+0xe4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC2_SetConfig+0x68>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a21      	ldr	r2, [pc, #132]	@ (8005d1c <TIM_OC2_SetConfig+0xe8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d10d      	bne.n	8005cb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a17      	ldr	r2, [pc, #92]	@ (8005d18 <TIM_OC2_SetConfig+0xe4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC2_SetConfig+0x94>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <TIM_OC2_SetConfig+0xe8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d113      	bne.n	8005cf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40010400 	.word	0x40010400

08005d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a21      	ldr	r2, [pc, #132]	@ (8005e00 <TIM_OC3_SetConfig+0xe0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC3_SetConfig+0x66>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a20      	ldr	r2, [pc, #128]	@ (8005e04 <TIM_OC3_SetConfig+0xe4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10d      	bne.n	8005da2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <TIM_OC3_SetConfig+0xe0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_OC3_SetConfig+0x92>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a15      	ldr	r2, [pc, #84]	@ (8005e04 <TIM_OC3_SetConfig+0xe4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d113      	bne.n	8005dda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400

08005e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a12      	ldr	r2, [pc, #72]	@ (8005eac <TIM_OC4_SetConfig+0xa4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC4_SetConfig+0x68>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a11      	ldr	r2, [pc, #68]	@ (8005eb0 <TIM_OC4_SetConfig+0xa8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d109      	bne.n	8005e84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	019b      	lsls	r3, r3, #6
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40010400 	.word	0x40010400

08005eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	401a      	ands	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1a      	ldr	r2, [r3, #32]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
	...

08005f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e05a      	b.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a21      	ldr	r2, [pc, #132]	@ (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f64:	d01d      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a18      	ldr	r2, [pc, #96]	@ (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a17      	ldr	r2, [pc, #92]	@ (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a15      	ldr	r2, [pc, #84]	@ (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d10c      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800
 8005fe8:	40000c00 	.word	0x40000c00
 8005fec:	40010400 	.word	0x40010400
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40001800 	.word	0x40001800

08005ff8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006010:	2302      	movs	r3, #2
 8006012:	e03d      	b.n	8006090 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e042      	b.n	8006134 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fc fee0 	bl	8002e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2224      	movs	r2, #36	@ 0x24
 80060cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f973 	bl	80063cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	@ 0x28
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b20      	cmp	r3, #32
 800615a:	d175      	bne.n	8006248 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Transmit+0x2c>
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e06e      	b.n	800624a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2221      	movs	r2, #33	@ 0x21
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800617a:	f7fc ff5d 	bl	8003038 <HAL_GetTick>
 800617e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006194:	d108      	bne.n	80061a8 <HAL_UART_Transmit+0x6c>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e003      	b.n	80061b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061b0:	e02e      	b.n	8006210 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	2180      	movs	r1, #128	@ 0x80
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f848 	bl	8006252 <UART_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e03a      	b.n	800624a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10b      	bne.n	80061f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	3302      	adds	r3, #2
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e007      	b.n	8006202 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	3301      	adds	r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1cb      	bne.n	80061b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	2140      	movs	r1, #64	@ 0x40
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f814 	bl	8006252 <UART_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e000      	b.n	800624a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b086      	sub	sp, #24
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	603b      	str	r3, [r7, #0]
 800625e:	4613      	mov	r3, r2
 8006260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006262:	e03b      	b.n	80062dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d037      	beq.n	80062dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626c:	f7fc fee4 	bl	8003038 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	429a      	cmp	r2, r3
 800627a:	d302      	bcc.n	8006282 <UART_WaitOnFlagUntilTimeout+0x30>
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e03a      	b.n	80062fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d023      	beq.n	80062dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b80      	cmp	r3, #128	@ 0x80
 8006298:	d020      	beq.n	80062dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b40      	cmp	r3, #64	@ 0x40
 800629e:	d01d      	beq.n	80062dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d116      	bne.n	80062dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f81d 	bl	8006304 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2208      	movs	r2, #8
 80062ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e00f      	b.n	80062fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4013      	ands	r3, r2
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d0b4      	beq.n	8006264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b095      	sub	sp, #84	@ 0x54
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800632c:	643a      	str	r2, [r7, #64]	@ 0x40
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006332:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800633a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3314      	adds	r3, #20
 8006346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3314      	adds	r3, #20
 800635e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006360:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006362:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006378:	2b01      	cmp	r3, #1
 800637a:	d119      	bne.n	80063b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	60bb      	str	r3, [r7, #8]
   return(result);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f023 0310 	bic.w	r3, r3, #16
 8006392:	647b      	str	r3, [r7, #68]	@ 0x44
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800639c:	61ba      	str	r2, [r7, #24]
 800639e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6979      	ldr	r1, [r7, #20]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	613b      	str	r3, [r7, #16]
   return(result);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e5      	bne.n	800637c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063be:	bf00      	nop
 80063c0:	3754      	adds	r7, #84	@ 0x54
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d0:	b0c0      	sub	sp, #256	@ 0x100
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e8:	68d9      	ldr	r1, [r3, #12]
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	ea40 0301 	orr.w	r3, r0, r1
 80063f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	431a      	orrs	r2, r3
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	431a      	orrs	r2, r3
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006424:	f021 010c 	bic.w	r1, r1, #12
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006432:	430b      	orrs	r3, r1
 8006434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	6999      	ldr	r1, [r3, #24]
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	ea40 0301 	orr.w	r3, r0, r1
 8006452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b8f      	ldr	r3, [pc, #572]	@ (8006698 <UART_SetConfig+0x2cc>)
 800645c:	429a      	cmp	r2, r3
 800645e:	d005      	beq.n	800646c <UART_SetConfig+0xa0>
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b8d      	ldr	r3, [pc, #564]	@ (800669c <UART_SetConfig+0x2d0>)
 8006468:	429a      	cmp	r2, r3
 800646a:	d104      	bne.n	8006476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7fe fb52 	bl	8004b14 <HAL_RCC_GetPCLK2Freq>
 8006470:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006474:	e003      	b.n	800647e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006476:	f7fe fb39 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 800647a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006488:	f040 810c 	bne.w	80066a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800648c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006490:	2200      	movs	r2, #0
 8006492:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006496:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800649a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800649e:	4622      	mov	r2, r4
 80064a0:	462b      	mov	r3, r5
 80064a2:	1891      	adds	r1, r2, r2
 80064a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064a6:	415b      	adcs	r3, r3
 80064a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064ae:	4621      	mov	r1, r4
 80064b0:	eb12 0801 	adds.w	r8, r2, r1
 80064b4:	4629      	mov	r1, r5
 80064b6:	eb43 0901 	adc.w	r9, r3, r1
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ce:	4690      	mov	r8, r2
 80064d0:	4699      	mov	r9, r3
 80064d2:	4623      	mov	r3, r4
 80064d4:	eb18 0303 	adds.w	r3, r8, r3
 80064d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064dc:	462b      	mov	r3, r5
 80064de:	eb49 0303 	adc.w	r3, r9, r3
 80064e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80064f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064fa:	460b      	mov	r3, r1
 80064fc:	18db      	adds	r3, r3, r3
 80064fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006500:	4613      	mov	r3, r2
 8006502:	eb42 0303 	adc.w	r3, r2, r3
 8006506:	657b      	str	r3, [r7, #84]	@ 0x54
 8006508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800650c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006510:	f7fa fbba 	bl	8000c88 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4b61      	ldr	r3, [pc, #388]	@ (80066a0 <UART_SetConfig+0x2d4>)
 800651a:	fba3 2302 	umull	r2, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	011c      	lsls	r4, r3, #4
 8006522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006526:	2200      	movs	r2, #0
 8006528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800652c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006534:	4642      	mov	r2, r8
 8006536:	464b      	mov	r3, r9
 8006538:	1891      	adds	r1, r2, r2
 800653a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800653c:	415b      	adcs	r3, r3
 800653e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006544:	4641      	mov	r1, r8
 8006546:	eb12 0a01 	adds.w	sl, r2, r1
 800654a:	4649      	mov	r1, r9
 800654c:	eb43 0b01 	adc.w	fp, r3, r1
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800655c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006564:	4692      	mov	sl, r2
 8006566:	469b      	mov	fp, r3
 8006568:	4643      	mov	r3, r8
 800656a:	eb1a 0303 	adds.w	r3, sl, r3
 800656e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006572:	464b      	mov	r3, r9
 8006574:	eb4b 0303 	adc.w	r3, fp, r3
 8006578:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006588:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800658c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006590:	460b      	mov	r3, r1
 8006592:	18db      	adds	r3, r3, r3
 8006594:	643b      	str	r3, [r7, #64]	@ 0x40
 8006596:	4613      	mov	r3, r2
 8006598:	eb42 0303 	adc.w	r3, r2, r3
 800659c:	647b      	str	r3, [r7, #68]	@ 0x44
 800659e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065a6:	f7fa fb6f 	bl	8000c88 <__aeabi_uldivmod>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	4b3b      	ldr	r3, [pc, #236]	@ (80066a0 <UART_SetConfig+0x2d4>)
 80065b2:	fba3 2301 	umull	r2, r3, r3, r1
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	2264      	movs	r2, #100	@ 0x64
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	1acb      	subs	r3, r1, r3
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065c6:	4b36      	ldr	r3, [pc, #216]	@ (80066a0 <UART_SetConfig+0x2d4>)
 80065c8:	fba3 2302 	umull	r2, r3, r3, r2
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065d4:	441c      	add	r4, r3
 80065d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	1891      	adds	r1, r2, r2
 80065ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065f0:	415b      	adcs	r3, r3
 80065f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80065f8:	4641      	mov	r1, r8
 80065fa:	1851      	adds	r1, r2, r1
 80065fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80065fe:	4649      	mov	r1, r9
 8006600:	414b      	adcs	r3, r1
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006610:	4659      	mov	r1, fp
 8006612:	00cb      	lsls	r3, r1, #3
 8006614:	4651      	mov	r1, sl
 8006616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800661a:	4651      	mov	r1, sl
 800661c:	00ca      	lsls	r2, r1, #3
 800661e:	4610      	mov	r0, r2
 8006620:	4619      	mov	r1, r3
 8006622:	4603      	mov	r3, r0
 8006624:	4642      	mov	r2, r8
 8006626:	189b      	adds	r3, r3, r2
 8006628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800662c:	464b      	mov	r3, r9
 800662e:	460a      	mov	r2, r1
 8006630:	eb42 0303 	adc.w	r3, r2, r3
 8006634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006644:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800664c:	460b      	mov	r3, r1
 800664e:	18db      	adds	r3, r3, r3
 8006650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006652:	4613      	mov	r3, r2
 8006654:	eb42 0303 	adc.w	r3, r2, r3
 8006658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800665a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800665e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006662:	f7fa fb11 	bl	8000c88 <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <UART_SetConfig+0x2d4>)
 800666c:	fba3 1302 	umull	r1, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	2164      	movs	r1, #100	@ 0x64
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	3332      	adds	r3, #50	@ 0x32
 800667e:	4a08      	ldr	r2, [pc, #32]	@ (80066a0 <UART_SetConfig+0x2d4>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	f003 0207 	and.w	r2, r3, #7
 800668a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4422      	add	r2, r4
 8006692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006694:	e106      	b.n	80068a4 <UART_SetConfig+0x4d8>
 8006696:	bf00      	nop
 8006698:	40011000 	.word	0x40011000
 800669c:	40011400 	.word	0x40011400
 80066a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066b6:	4642      	mov	r2, r8
 80066b8:	464b      	mov	r3, r9
 80066ba:	1891      	adds	r1, r2, r2
 80066bc:	6239      	str	r1, [r7, #32]
 80066be:	415b      	adcs	r3, r3
 80066c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066c6:	4641      	mov	r1, r8
 80066c8:	1854      	adds	r4, r2, r1
 80066ca:	4649      	mov	r1, r9
 80066cc:	eb43 0501 	adc.w	r5, r3, r1
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	00eb      	lsls	r3, r5, #3
 80066da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066de:	00e2      	lsls	r2, r4, #3
 80066e0:	4614      	mov	r4, r2
 80066e2:	461d      	mov	r5, r3
 80066e4:	4643      	mov	r3, r8
 80066e6:	18e3      	adds	r3, r4, r3
 80066e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066ec:	464b      	mov	r3, r9
 80066ee:	eb45 0303 	adc.w	r3, r5, r3
 80066f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006702:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006712:	4629      	mov	r1, r5
 8006714:	008b      	lsls	r3, r1, #2
 8006716:	4621      	mov	r1, r4
 8006718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800671c:	4621      	mov	r1, r4
 800671e:	008a      	lsls	r2, r1, #2
 8006720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006724:	f7fa fab0 	bl	8000c88 <__aeabi_uldivmod>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4b60      	ldr	r3, [pc, #384]	@ (80068b0 <UART_SetConfig+0x4e4>)
 800672e:	fba3 2302 	umull	r2, r3, r3, r2
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	011c      	lsls	r4, r3, #4
 8006736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800673a:	2200      	movs	r2, #0
 800673c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006740:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006748:	4642      	mov	r2, r8
 800674a:	464b      	mov	r3, r9
 800674c:	1891      	adds	r1, r2, r2
 800674e:	61b9      	str	r1, [r7, #24]
 8006750:	415b      	adcs	r3, r3
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006758:	4641      	mov	r1, r8
 800675a:	1851      	adds	r1, r2, r1
 800675c:	6139      	str	r1, [r7, #16]
 800675e:	4649      	mov	r1, r9
 8006760:	414b      	adcs	r3, r1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006770:	4659      	mov	r1, fp
 8006772:	00cb      	lsls	r3, r1, #3
 8006774:	4651      	mov	r1, sl
 8006776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800677a:	4651      	mov	r1, sl
 800677c:	00ca      	lsls	r2, r1, #3
 800677e:	4610      	mov	r0, r2
 8006780:	4619      	mov	r1, r3
 8006782:	4603      	mov	r3, r0
 8006784:	4642      	mov	r2, r8
 8006786:	189b      	adds	r3, r3, r2
 8006788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800678c:	464b      	mov	r3, r9
 800678e:	460a      	mov	r2, r1
 8006790:	eb42 0303 	adc.w	r3, r2, r3
 8006794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067b0:	4649      	mov	r1, r9
 80067b2:	008b      	lsls	r3, r1, #2
 80067b4:	4641      	mov	r1, r8
 80067b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ba:	4641      	mov	r1, r8
 80067bc:	008a      	lsls	r2, r1, #2
 80067be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067c2:	f7fa fa61 	bl	8000c88 <__aeabi_uldivmod>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	4b38      	ldr	r3, [pc, #224]	@ (80068b0 <UART_SetConfig+0x4e4>)
 80067ce:	fba3 2301 	umull	r2, r3, r3, r1
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2264      	movs	r2, #100	@ 0x64
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	1acb      	subs	r3, r1, r3
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	3332      	adds	r3, #50	@ 0x32
 80067e0:	4a33      	ldr	r2, [pc, #204]	@ (80068b0 <UART_SetConfig+0x4e4>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067ec:	441c      	add	r4, r3
 80067ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f2:	2200      	movs	r2, #0
 80067f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80067f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80067f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067fc:	4642      	mov	r2, r8
 80067fe:	464b      	mov	r3, r9
 8006800:	1891      	adds	r1, r2, r2
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	415b      	adcs	r3, r3
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800680c:	4641      	mov	r1, r8
 800680e:	1851      	adds	r1, r2, r1
 8006810:	6039      	str	r1, [r7, #0]
 8006812:	4649      	mov	r1, r9
 8006814:	414b      	adcs	r3, r1
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006824:	4659      	mov	r1, fp
 8006826:	00cb      	lsls	r3, r1, #3
 8006828:	4651      	mov	r1, sl
 800682a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800682e:	4651      	mov	r1, sl
 8006830:	00ca      	lsls	r2, r1, #3
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	4603      	mov	r3, r0
 8006838:	4642      	mov	r2, r8
 800683a:	189b      	adds	r3, r3, r2
 800683c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800683e:	464b      	mov	r3, r9
 8006840:	460a      	mov	r2, r1
 8006842:	eb42 0303 	adc.w	r3, r2, r3
 8006846:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	663b      	str	r3, [r7, #96]	@ 0x60
 8006852:	667a      	str	r2, [r7, #100]	@ 0x64
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006860:	4649      	mov	r1, r9
 8006862:	008b      	lsls	r3, r1, #2
 8006864:	4641      	mov	r1, r8
 8006866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800686a:	4641      	mov	r1, r8
 800686c:	008a      	lsls	r2, r1, #2
 800686e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006872:	f7fa fa09 	bl	8000c88 <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <UART_SetConfig+0x4e4>)
 800687c:	fba3 1302 	umull	r1, r3, r3, r2
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	2164      	movs	r1, #100	@ 0x64
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	3332      	adds	r3, #50	@ 0x32
 800688e:	4a08      	ldr	r2, [pc, #32]	@ (80068b0 <UART_SetConfig+0x4e4>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	f003 020f 	and.w	r2, r3, #15
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4422      	add	r2, r4
 80068a2:	609a      	str	r2, [r3, #8]
}
 80068a4:	bf00      	nop
 80068a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068aa:	46bd      	mov	sp, r7
 80068ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b0:	51eb851f 	.word	0x51eb851f

080068b4 <__cvt>:
 80068b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	ec57 6b10 	vmov	r6, r7, d0
 80068bc:	2f00      	cmp	r7, #0
 80068be:	460c      	mov	r4, r1
 80068c0:	4619      	mov	r1, r3
 80068c2:	463b      	mov	r3, r7
 80068c4:	bfbb      	ittet	lt
 80068c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80068ca:	461f      	movlt	r7, r3
 80068cc:	2300      	movge	r3, #0
 80068ce:	232d      	movlt	r3, #45	@ 0x2d
 80068d0:	700b      	strb	r3, [r1, #0]
 80068d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80068d8:	4691      	mov	r9, r2
 80068da:	f023 0820 	bic.w	r8, r3, #32
 80068de:	bfbc      	itt	lt
 80068e0:	4632      	movlt	r2, r6
 80068e2:	4616      	movlt	r6, r2
 80068e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068e8:	d005      	beq.n	80068f6 <__cvt+0x42>
 80068ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068ee:	d100      	bne.n	80068f2 <__cvt+0x3e>
 80068f0:	3401      	adds	r4, #1
 80068f2:	2102      	movs	r1, #2
 80068f4:	e000      	b.n	80068f8 <__cvt+0x44>
 80068f6:	2103      	movs	r1, #3
 80068f8:	ab03      	add	r3, sp, #12
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	ab02      	add	r3, sp, #8
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	ec47 6b10 	vmov	d0, r6, r7
 8006904:	4653      	mov	r3, sl
 8006906:	4622      	mov	r2, r4
 8006908:	f000 fe5a 	bl	80075c0 <_dtoa_r>
 800690c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006910:	4605      	mov	r5, r0
 8006912:	d119      	bne.n	8006948 <__cvt+0x94>
 8006914:	f019 0f01 	tst.w	r9, #1
 8006918:	d00e      	beq.n	8006938 <__cvt+0x84>
 800691a:	eb00 0904 	add.w	r9, r0, r4
 800691e:	2200      	movs	r2, #0
 8006920:	2300      	movs	r3, #0
 8006922:	4630      	mov	r0, r6
 8006924:	4639      	mov	r1, r7
 8006926:	f7fa f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800692a:	b108      	cbz	r0, 8006930 <__cvt+0x7c>
 800692c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006930:	2230      	movs	r2, #48	@ 0x30
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	454b      	cmp	r3, r9
 8006936:	d31e      	bcc.n	8006976 <__cvt+0xc2>
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800693c:	1b5b      	subs	r3, r3, r5
 800693e:	4628      	mov	r0, r5
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	b004      	add	sp, #16
 8006944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800694c:	eb00 0904 	add.w	r9, r0, r4
 8006950:	d1e5      	bne.n	800691e <__cvt+0x6a>
 8006952:	7803      	ldrb	r3, [r0, #0]
 8006954:	2b30      	cmp	r3, #48	@ 0x30
 8006956:	d10a      	bne.n	800696e <__cvt+0xba>
 8006958:	2200      	movs	r2, #0
 800695a:	2300      	movs	r3, #0
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	f7fa f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 8006964:	b918      	cbnz	r0, 800696e <__cvt+0xba>
 8006966:	f1c4 0401 	rsb	r4, r4, #1
 800696a:	f8ca 4000 	str.w	r4, [sl]
 800696e:	f8da 3000 	ldr.w	r3, [sl]
 8006972:	4499      	add	r9, r3
 8006974:	e7d3      	b.n	800691e <__cvt+0x6a>
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	9103      	str	r1, [sp, #12]
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	e7d9      	b.n	8006932 <__cvt+0x7e>

0800697e <__exponent>:
 800697e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006980:	2900      	cmp	r1, #0
 8006982:	bfba      	itte	lt
 8006984:	4249      	neglt	r1, r1
 8006986:	232d      	movlt	r3, #45	@ 0x2d
 8006988:	232b      	movge	r3, #43	@ 0x2b
 800698a:	2909      	cmp	r1, #9
 800698c:	7002      	strb	r2, [r0, #0]
 800698e:	7043      	strb	r3, [r0, #1]
 8006990:	dd29      	ble.n	80069e6 <__exponent+0x68>
 8006992:	f10d 0307 	add.w	r3, sp, #7
 8006996:	461d      	mov	r5, r3
 8006998:	270a      	movs	r7, #10
 800699a:	461a      	mov	r2, r3
 800699c:	fbb1 f6f7 	udiv	r6, r1, r7
 80069a0:	fb07 1416 	mls	r4, r7, r6, r1
 80069a4:	3430      	adds	r4, #48	@ 0x30
 80069a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80069aa:	460c      	mov	r4, r1
 80069ac:	2c63      	cmp	r4, #99	@ 0x63
 80069ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80069b2:	4631      	mov	r1, r6
 80069b4:	dcf1      	bgt.n	800699a <__exponent+0x1c>
 80069b6:	3130      	adds	r1, #48	@ 0x30
 80069b8:	1e94      	subs	r4, r2, #2
 80069ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069be:	1c41      	adds	r1, r0, #1
 80069c0:	4623      	mov	r3, r4
 80069c2:	42ab      	cmp	r3, r5
 80069c4:	d30a      	bcc.n	80069dc <__exponent+0x5e>
 80069c6:	f10d 0309 	add.w	r3, sp, #9
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	42ac      	cmp	r4, r5
 80069ce:	bf88      	it	hi
 80069d0:	2300      	movhi	r3, #0
 80069d2:	3302      	adds	r3, #2
 80069d4:	4403      	add	r3, r0
 80069d6:	1a18      	subs	r0, r3, r0
 80069d8:	b003      	add	sp, #12
 80069da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069e4:	e7ed      	b.n	80069c2 <__exponent+0x44>
 80069e6:	2330      	movs	r3, #48	@ 0x30
 80069e8:	3130      	adds	r1, #48	@ 0x30
 80069ea:	7083      	strb	r3, [r0, #2]
 80069ec:	70c1      	strb	r1, [r0, #3]
 80069ee:	1d03      	adds	r3, r0, #4
 80069f0:	e7f1      	b.n	80069d6 <__exponent+0x58>
	...

080069f4 <_printf_float>:
 80069f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f8:	b08d      	sub	sp, #52	@ 0x34
 80069fa:	460c      	mov	r4, r1
 80069fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a00:	4616      	mov	r6, r2
 8006a02:	461f      	mov	r7, r3
 8006a04:	4605      	mov	r5, r0
 8006a06:	f000 fcdb 	bl	80073c0 <_localeconv_r>
 8006a0a:	6803      	ldr	r3, [r0, #0]
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7f9 fc4e 	bl	80002b0 <strlen>
 8006a14:	2300      	movs	r3, #0
 8006a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a18:	f8d8 3000 	ldr.w	r3, [r8]
 8006a1c:	9005      	str	r0, [sp, #20]
 8006a1e:	3307      	adds	r3, #7
 8006a20:	f023 0307 	bic.w	r3, r3, #7
 8006a24:	f103 0208 	add.w	r2, r3, #8
 8006a28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a2c:	f8d4 b000 	ldr.w	fp, [r4]
 8006a30:	f8c8 2000 	str.w	r2, [r8]
 8006a34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a3c:	9307      	str	r3, [sp, #28]
 8006a3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8006cbc <_printf_float+0x2c8>)
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a50:	f7fa f88c 	bl	8000b6c <__aeabi_dcmpun>
 8006a54:	bb70      	cbnz	r0, 8006ab4 <_printf_float+0xc0>
 8006a56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a5a:	4b98      	ldr	r3, [pc, #608]	@ (8006cbc <_printf_float+0x2c8>)
 8006a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a60:	f7fa f866 	bl	8000b30 <__aeabi_dcmple>
 8006a64:	bb30      	cbnz	r0, 8006ab4 <_printf_float+0xc0>
 8006a66:	2200      	movs	r2, #0
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	f7fa f855 	bl	8000b1c <__aeabi_dcmplt>
 8006a72:	b110      	cbz	r0, 8006a7a <_printf_float+0x86>
 8006a74:	232d      	movs	r3, #45	@ 0x2d
 8006a76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a7a:	4a91      	ldr	r2, [pc, #580]	@ (8006cc0 <_printf_float+0x2cc>)
 8006a7c:	4b91      	ldr	r3, [pc, #580]	@ (8006cc4 <_printf_float+0x2d0>)
 8006a7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a82:	bf94      	ite	ls
 8006a84:	4690      	movls	r8, r2
 8006a86:	4698      	movhi	r8, r3
 8006a88:	2303      	movs	r3, #3
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	f02b 0304 	bic.w	r3, fp, #4
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	f04f 0900 	mov.w	r9, #0
 8006a96:	9700      	str	r7, [sp, #0]
 8006a98:	4633      	mov	r3, r6
 8006a9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f9d2 	bl	8006e48 <_printf_common>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f040 808d 	bne.w	8006bc4 <_printf_float+0x1d0>
 8006aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006aae:	b00d      	add	sp, #52	@ 0x34
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	4642      	mov	r2, r8
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7fa f856 	bl	8000b6c <__aeabi_dcmpun>
 8006ac0:	b140      	cbz	r0, 8006ad4 <_printf_float+0xe0>
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bfbc      	itt	lt
 8006ac8:	232d      	movlt	r3, #45	@ 0x2d
 8006aca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ace:	4a7e      	ldr	r2, [pc, #504]	@ (8006cc8 <_printf_float+0x2d4>)
 8006ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8006ccc <_printf_float+0x2d8>)
 8006ad2:	e7d4      	b.n	8006a7e <_printf_float+0x8a>
 8006ad4:	6863      	ldr	r3, [r4, #4]
 8006ad6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006ada:	9206      	str	r2, [sp, #24]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	d13b      	bne.n	8006b58 <_printf_float+0x164>
 8006ae0:	2306      	movs	r3, #6
 8006ae2:	6063      	str	r3, [r4, #4]
 8006ae4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ae8:	2300      	movs	r3, #0
 8006aea:	6022      	str	r2, [r4, #0]
 8006aec:	9303      	str	r3, [sp, #12]
 8006aee:	ab0a      	add	r3, sp, #40	@ 0x28
 8006af0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006af4:	ab09      	add	r3, sp, #36	@ 0x24
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	6861      	ldr	r1, [r4, #4]
 8006afa:	ec49 8b10 	vmov	d0, r8, r9
 8006afe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7ff fed6 	bl	80068b4 <__cvt>
 8006b08:	9b06      	ldr	r3, [sp, #24]
 8006b0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b0c:	2b47      	cmp	r3, #71	@ 0x47
 8006b0e:	4680      	mov	r8, r0
 8006b10:	d129      	bne.n	8006b66 <_printf_float+0x172>
 8006b12:	1cc8      	adds	r0, r1, #3
 8006b14:	db02      	blt.n	8006b1c <_printf_float+0x128>
 8006b16:	6863      	ldr	r3, [r4, #4]
 8006b18:	4299      	cmp	r1, r3
 8006b1a:	dd41      	ble.n	8006ba0 <_printf_float+0x1ac>
 8006b1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b20:	fa5f fa8a 	uxtb.w	sl, sl
 8006b24:	3901      	subs	r1, #1
 8006b26:	4652      	mov	r2, sl
 8006b28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b2e:	f7ff ff26 	bl	800697e <__exponent>
 8006b32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b34:	1813      	adds	r3, r2, r0
 8006b36:	2a01      	cmp	r2, #1
 8006b38:	4681      	mov	r9, r0
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	dc02      	bgt.n	8006b44 <_printf_float+0x150>
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	07d2      	lsls	r2, r2, #31
 8006b42:	d501      	bpl.n	8006b48 <_printf_float+0x154>
 8006b44:	3301      	adds	r3, #1
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0a2      	beq.n	8006a96 <_printf_float+0xa2>
 8006b50:	232d      	movs	r3, #45	@ 0x2d
 8006b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b56:	e79e      	b.n	8006a96 <_printf_float+0xa2>
 8006b58:	9a06      	ldr	r2, [sp, #24]
 8006b5a:	2a47      	cmp	r2, #71	@ 0x47
 8006b5c:	d1c2      	bne.n	8006ae4 <_printf_float+0xf0>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1c0      	bne.n	8006ae4 <_printf_float+0xf0>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e7bd      	b.n	8006ae2 <_printf_float+0xee>
 8006b66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b6a:	d9db      	bls.n	8006b24 <_printf_float+0x130>
 8006b6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b70:	d118      	bne.n	8006ba4 <_printf_float+0x1b0>
 8006b72:	2900      	cmp	r1, #0
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	dd0b      	ble.n	8006b90 <_printf_float+0x19c>
 8006b78:	6121      	str	r1, [r4, #16]
 8006b7a:	b913      	cbnz	r3, 8006b82 <_printf_float+0x18e>
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	07d0      	lsls	r0, r2, #31
 8006b80:	d502      	bpl.n	8006b88 <_printf_float+0x194>
 8006b82:	3301      	adds	r3, #1
 8006b84:	440b      	add	r3, r1
 8006b86:	6123      	str	r3, [r4, #16]
 8006b88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b8a:	f04f 0900 	mov.w	r9, #0
 8006b8e:	e7db      	b.n	8006b48 <_printf_float+0x154>
 8006b90:	b913      	cbnz	r3, 8006b98 <_printf_float+0x1a4>
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	07d2      	lsls	r2, r2, #31
 8006b96:	d501      	bpl.n	8006b9c <_printf_float+0x1a8>
 8006b98:	3302      	adds	r3, #2
 8006b9a:	e7f4      	b.n	8006b86 <_printf_float+0x192>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e7f2      	b.n	8006b86 <_printf_float+0x192>
 8006ba0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	db05      	blt.n	8006bb6 <_printf_float+0x1c2>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	6121      	str	r1, [r4, #16]
 8006bae:	07d8      	lsls	r0, r3, #31
 8006bb0:	d5ea      	bpl.n	8006b88 <_printf_float+0x194>
 8006bb2:	1c4b      	adds	r3, r1, #1
 8006bb4:	e7e7      	b.n	8006b86 <_printf_float+0x192>
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	bfd4      	ite	le
 8006bba:	f1c1 0202 	rsble	r2, r1, #2
 8006bbe:	2201      	movgt	r2, #1
 8006bc0:	4413      	add	r3, r2
 8006bc2:	e7e0      	b.n	8006b86 <_printf_float+0x192>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	055a      	lsls	r2, r3, #21
 8006bc8:	d407      	bmi.n	8006bda <_printf_float+0x1e6>
 8006bca:	6923      	ldr	r3, [r4, #16]
 8006bcc:	4642      	mov	r2, r8
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d12b      	bne.n	8006c30 <_printf_float+0x23c>
 8006bd8:	e767      	b.n	8006aaa <_printf_float+0xb6>
 8006bda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bde:	f240 80dd 	bls.w	8006d9c <_printf_float+0x3a8>
 8006be2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006be6:	2200      	movs	r2, #0
 8006be8:	2300      	movs	r3, #0
 8006bea:	f7f9 ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d033      	beq.n	8006c5a <_printf_float+0x266>
 8006bf2:	4a37      	ldr	r2, [pc, #220]	@ (8006cd0 <_printf_float+0x2dc>)
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f af54 	beq.w	8006aaa <_printf_float+0xb6>
 8006c02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c06:	4543      	cmp	r3, r8
 8006c08:	db02      	blt.n	8006c10 <_printf_float+0x21c>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	07d8      	lsls	r0, r3, #31
 8006c0e:	d50f      	bpl.n	8006c30 <_printf_float+0x23c>
 8006c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f af45 	beq.w	8006aaa <_printf_float+0xb6>
 8006c20:	f04f 0900 	mov.w	r9, #0
 8006c24:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c28:	f104 0a1a 	add.w	sl, r4, #26
 8006c2c:	45c8      	cmp	r8, r9
 8006c2e:	dc09      	bgt.n	8006c44 <_printf_float+0x250>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	079b      	lsls	r3, r3, #30
 8006c34:	f100 8103 	bmi.w	8006e3e <_printf_float+0x44a>
 8006c38:	68e0      	ldr	r0, [r4, #12]
 8006c3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c3c:	4298      	cmp	r0, r3
 8006c3e:	bfb8      	it	lt
 8006c40:	4618      	movlt	r0, r3
 8006c42:	e734      	b.n	8006aae <_printf_float+0xba>
 8006c44:	2301      	movs	r3, #1
 8006c46:	4652      	mov	r2, sl
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	f43f af2b 	beq.w	8006aaa <_printf_float+0xb6>
 8006c54:	f109 0901 	add.w	r9, r9, #1
 8006c58:	e7e8      	b.n	8006c2c <_printf_float+0x238>
 8006c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dc39      	bgt.n	8006cd4 <_printf_float+0x2e0>
 8006c60:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd0 <_printf_float+0x2dc>)
 8006c62:	2301      	movs	r3, #1
 8006c64:	4631      	mov	r1, r6
 8006c66:	4628      	mov	r0, r5
 8006c68:	47b8      	blx	r7
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	f43f af1d 	beq.w	8006aaa <_printf_float+0xb6>
 8006c70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c74:	ea59 0303 	orrs.w	r3, r9, r3
 8006c78:	d102      	bne.n	8006c80 <_printf_float+0x28c>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	07d9      	lsls	r1, r3, #31
 8006c7e:	d5d7      	bpl.n	8006c30 <_printf_float+0x23c>
 8006c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f af0d 	beq.w	8006aaa <_printf_float+0xb6>
 8006c90:	f04f 0a00 	mov.w	sl, #0
 8006c94:	f104 0b1a 	add.w	fp, r4, #26
 8006c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9a:	425b      	negs	r3, r3
 8006c9c:	4553      	cmp	r3, sl
 8006c9e:	dc01      	bgt.n	8006ca4 <_printf_float+0x2b0>
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	e793      	b.n	8006bcc <_printf_float+0x1d8>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	465a      	mov	r2, fp
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b8      	blx	r7
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f43f aefb 	beq.w	8006aaa <_printf_float+0xb6>
 8006cb4:	f10a 0a01 	add.w	sl, sl, #1
 8006cb8:	e7ee      	b.n	8006c98 <_printf_float+0x2a4>
 8006cba:	bf00      	nop
 8006cbc:	7fefffff 	.word	0x7fefffff
 8006cc0:	080097a4 	.word	0x080097a4
 8006cc4:	080097a8 	.word	0x080097a8
 8006cc8:	080097ac 	.word	0x080097ac
 8006ccc:	080097b0 	.word	0x080097b0
 8006cd0:	080097b4 	.word	0x080097b4
 8006cd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cda:	4553      	cmp	r3, sl
 8006cdc:	bfa8      	it	ge
 8006cde:	4653      	movge	r3, sl
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	4699      	mov	r9, r3
 8006ce4:	dc36      	bgt.n	8006d54 <_printf_float+0x360>
 8006ce6:	f04f 0b00 	mov.w	fp, #0
 8006cea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cee:	f104 021a 	add.w	r2, r4, #26
 8006cf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cf4:	9306      	str	r3, [sp, #24]
 8006cf6:	eba3 0309 	sub.w	r3, r3, r9
 8006cfa:	455b      	cmp	r3, fp
 8006cfc:	dc31      	bgt.n	8006d62 <_printf_float+0x36e>
 8006cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d00:	459a      	cmp	sl, r3
 8006d02:	dc3a      	bgt.n	8006d7a <_printf_float+0x386>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	07da      	lsls	r2, r3, #31
 8006d08:	d437      	bmi.n	8006d7a <_printf_float+0x386>
 8006d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0c:	ebaa 0903 	sub.w	r9, sl, r3
 8006d10:	9b06      	ldr	r3, [sp, #24]
 8006d12:	ebaa 0303 	sub.w	r3, sl, r3
 8006d16:	4599      	cmp	r9, r3
 8006d18:	bfa8      	it	ge
 8006d1a:	4699      	movge	r9, r3
 8006d1c:	f1b9 0f00 	cmp.w	r9, #0
 8006d20:	dc33      	bgt.n	8006d8a <_printf_float+0x396>
 8006d22:	f04f 0800 	mov.w	r8, #0
 8006d26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d2a:	f104 0b1a 	add.w	fp, r4, #26
 8006d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d30:	ebaa 0303 	sub.w	r3, sl, r3
 8006d34:	eba3 0309 	sub.w	r3, r3, r9
 8006d38:	4543      	cmp	r3, r8
 8006d3a:	f77f af79 	ble.w	8006c30 <_printf_float+0x23c>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	465a      	mov	r2, fp
 8006d42:	4631      	mov	r1, r6
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b8      	blx	r7
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f43f aeae 	beq.w	8006aaa <_printf_float+0xb6>
 8006d4e:	f108 0801 	add.w	r8, r8, #1
 8006d52:	e7ec      	b.n	8006d2e <_printf_float+0x33a>
 8006d54:	4642      	mov	r2, r8
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d1c2      	bne.n	8006ce6 <_printf_float+0x2f2>
 8006d60:	e6a3      	b.n	8006aaa <_printf_float+0xb6>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4631      	mov	r1, r6
 8006d66:	4628      	mov	r0, r5
 8006d68:	9206      	str	r2, [sp, #24]
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f43f ae9c 	beq.w	8006aaa <_printf_float+0xb6>
 8006d72:	9a06      	ldr	r2, [sp, #24]
 8006d74:	f10b 0b01 	add.w	fp, fp, #1
 8006d78:	e7bb      	b.n	8006cf2 <_printf_float+0x2fe>
 8006d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	d1c0      	bne.n	8006d0a <_printf_float+0x316>
 8006d88:	e68f      	b.n	8006aaa <_printf_float+0xb6>
 8006d8a:	9a06      	ldr	r2, [sp, #24]
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	4442      	add	r2, r8
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	d1c3      	bne.n	8006d22 <_printf_float+0x32e>
 8006d9a:	e686      	b.n	8006aaa <_printf_float+0xb6>
 8006d9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006da0:	f1ba 0f01 	cmp.w	sl, #1
 8006da4:	dc01      	bgt.n	8006daa <_printf_float+0x3b6>
 8006da6:	07db      	lsls	r3, r3, #31
 8006da8:	d536      	bpl.n	8006e18 <_printf_float+0x424>
 8006daa:	2301      	movs	r3, #1
 8006dac:	4642      	mov	r2, r8
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f ae78 	beq.w	8006aaa <_printf_float+0xb6>
 8006dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b8      	blx	r7
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f43f ae70 	beq.w	8006aaa <_printf_float+0xb6>
 8006dca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dd6:	f7f9 fe97 	bl	8000b08 <__aeabi_dcmpeq>
 8006dda:	b9c0      	cbnz	r0, 8006e0e <_printf_float+0x41a>
 8006ddc:	4653      	mov	r3, sl
 8006dde:	f108 0201 	add.w	r2, r8, #1
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b8      	blx	r7
 8006de8:	3001      	adds	r0, #1
 8006dea:	d10c      	bne.n	8006e06 <_printf_float+0x412>
 8006dec:	e65d      	b.n	8006aaa <_printf_float+0xb6>
 8006dee:	2301      	movs	r3, #1
 8006df0:	465a      	mov	r2, fp
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f ae56 	beq.w	8006aaa <_printf_float+0xb6>
 8006dfe:	f108 0801 	add.w	r8, r8, #1
 8006e02:	45d0      	cmp	r8, sl
 8006e04:	dbf3      	blt.n	8006dee <_printf_float+0x3fa>
 8006e06:	464b      	mov	r3, r9
 8006e08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e0c:	e6df      	b.n	8006bce <_printf_float+0x1da>
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	f104 0b1a 	add.w	fp, r4, #26
 8006e16:	e7f4      	b.n	8006e02 <_printf_float+0x40e>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	e7e1      	b.n	8006de2 <_printf_float+0x3ee>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	464a      	mov	r2, r9
 8006e22:	4631      	mov	r1, r6
 8006e24:	4628      	mov	r0, r5
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f43f ae3e 	beq.w	8006aaa <_printf_float+0xb6>
 8006e2e:	f108 0801 	add.w	r8, r8, #1
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e36:	1a5b      	subs	r3, r3, r1
 8006e38:	4543      	cmp	r3, r8
 8006e3a:	dcf0      	bgt.n	8006e1e <_printf_float+0x42a>
 8006e3c:	e6fc      	b.n	8006c38 <_printf_float+0x244>
 8006e3e:	f04f 0800 	mov.w	r8, #0
 8006e42:	f104 0919 	add.w	r9, r4, #25
 8006e46:	e7f4      	b.n	8006e32 <_printf_float+0x43e>

08006e48 <_printf_common>:
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	4698      	mov	r8, r3
 8006e50:	688a      	ldr	r2, [r1, #8]
 8006e52:	690b      	ldr	r3, [r1, #16]
 8006e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bfb8      	it	lt
 8006e5c:	4613      	movlt	r3, r2
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e64:	4607      	mov	r7, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	b10a      	cbz	r2, 8006e6e <_printf_common+0x26>
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	0699      	lsls	r1, r3, #26
 8006e72:	bf42      	ittt	mi
 8006e74:	6833      	ldrmi	r3, [r6, #0]
 8006e76:	3302      	addmi	r3, #2
 8006e78:	6033      	strmi	r3, [r6, #0]
 8006e7a:	6825      	ldr	r5, [r4, #0]
 8006e7c:	f015 0506 	ands.w	r5, r5, #6
 8006e80:	d106      	bne.n	8006e90 <_printf_common+0x48>
 8006e82:	f104 0a19 	add.w	sl, r4, #25
 8006e86:	68e3      	ldr	r3, [r4, #12]
 8006e88:	6832      	ldr	r2, [r6, #0]
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	dc26      	bgt.n	8006ede <_printf_common+0x96>
 8006e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	3b00      	subs	r3, #0
 8006e98:	bf18      	it	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	0692      	lsls	r2, r2, #26
 8006e9e:	d42b      	bmi.n	8006ef8 <_printf_common+0xb0>
 8006ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	47c8      	blx	r9
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d01e      	beq.n	8006eec <_printf_common+0xa4>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	6922      	ldr	r2, [r4, #16]
 8006eb2:	f003 0306 	and.w	r3, r3, #6
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	bf02      	ittt	eq
 8006eba:	68e5      	ldreq	r5, [r4, #12]
 8006ebc:	6833      	ldreq	r3, [r6, #0]
 8006ebe:	1aed      	subeq	r5, r5, r3
 8006ec0:	68a3      	ldr	r3, [r4, #8]
 8006ec2:	bf0c      	ite	eq
 8006ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec8:	2500      	movne	r5, #0
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bfc4      	itt	gt
 8006ece:	1a9b      	subgt	r3, r3, r2
 8006ed0:	18ed      	addgt	r5, r5, r3
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	341a      	adds	r4, #26
 8006ed6:	42b5      	cmp	r5, r6
 8006ed8:	d11a      	bne.n	8006f10 <_printf_common+0xc8>
 8006eda:	2000      	movs	r0, #0
 8006edc:	e008      	b.n	8006ef0 <_printf_common+0xa8>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	4641      	mov	r1, r8
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	47c8      	blx	r9
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d103      	bne.n	8006ef4 <_printf_common+0xac>
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	e7c6      	b.n	8006e86 <_printf_common+0x3e>
 8006ef8:	18e1      	adds	r1, r4, r3
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	2030      	movs	r0, #48	@ 0x30
 8006efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f02:	4422      	add	r2, r4
 8006f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	e7c7      	b.n	8006ea0 <_printf_common+0x58>
 8006f10:	2301      	movs	r3, #1
 8006f12:	4622      	mov	r2, r4
 8006f14:	4641      	mov	r1, r8
 8006f16:	4638      	mov	r0, r7
 8006f18:	47c8      	blx	r9
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d0e6      	beq.n	8006eec <_printf_common+0xa4>
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7d9      	b.n	8006ed6 <_printf_common+0x8e>
	...

08006f24 <_printf_i>:
 8006f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	7e0f      	ldrb	r7, [r1, #24]
 8006f2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f2c:	2f78      	cmp	r7, #120	@ 0x78
 8006f2e:	4691      	mov	r9, r2
 8006f30:	4680      	mov	r8, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	469a      	mov	sl, r3
 8006f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f3a:	d807      	bhi.n	8006f4c <_printf_i+0x28>
 8006f3c:	2f62      	cmp	r7, #98	@ 0x62
 8006f3e:	d80a      	bhi.n	8006f56 <_printf_i+0x32>
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	f000 80d2 	beq.w	80070ea <_printf_i+0x1c6>
 8006f46:	2f58      	cmp	r7, #88	@ 0x58
 8006f48:	f000 80b9 	beq.w	80070be <_printf_i+0x19a>
 8006f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f54:	e03a      	b.n	8006fcc <_printf_i+0xa8>
 8006f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f5a:	2b15      	cmp	r3, #21
 8006f5c:	d8f6      	bhi.n	8006f4c <_printf_i+0x28>
 8006f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f64 <_printf_i+0x40>)
 8006f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	08006fd1 	.word	0x08006fd1
 8006f6c:	08006f4d 	.word	0x08006f4d
 8006f70:	08006f4d 	.word	0x08006f4d
 8006f74:	08006f4d 	.word	0x08006f4d
 8006f78:	08006f4d 	.word	0x08006f4d
 8006f7c:	08006fd1 	.word	0x08006fd1
 8006f80:	08006f4d 	.word	0x08006f4d
 8006f84:	08006f4d 	.word	0x08006f4d
 8006f88:	08006f4d 	.word	0x08006f4d
 8006f8c:	08006f4d 	.word	0x08006f4d
 8006f90:	080070d1 	.word	0x080070d1
 8006f94:	08006ffb 	.word	0x08006ffb
 8006f98:	0800708b 	.word	0x0800708b
 8006f9c:	08006f4d 	.word	0x08006f4d
 8006fa0:	08006f4d 	.word	0x08006f4d
 8006fa4:	080070f3 	.word	0x080070f3
 8006fa8:	08006f4d 	.word	0x08006f4d
 8006fac:	08006ffb 	.word	0x08006ffb
 8006fb0:	08006f4d 	.word	0x08006f4d
 8006fb4:	08006f4d 	.word	0x08006f4d
 8006fb8:	08007093 	.word	0x08007093
 8006fbc:	6833      	ldr	r3, [r6, #0]
 8006fbe:	1d1a      	adds	r2, r3, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6032      	str	r2, [r6, #0]
 8006fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e09d      	b.n	800710c <_printf_i+0x1e8>
 8006fd0:	6833      	ldr	r3, [r6, #0]
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	1d19      	adds	r1, r3, #4
 8006fd6:	6031      	str	r1, [r6, #0]
 8006fd8:	0606      	lsls	r6, r0, #24
 8006fda:	d501      	bpl.n	8006fe0 <_printf_i+0xbc>
 8006fdc:	681d      	ldr	r5, [r3, #0]
 8006fde:	e003      	b.n	8006fe8 <_printf_i+0xc4>
 8006fe0:	0645      	lsls	r5, r0, #25
 8006fe2:	d5fb      	bpl.n	8006fdc <_printf_i+0xb8>
 8006fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	da03      	bge.n	8006ff4 <_printf_i+0xd0>
 8006fec:	232d      	movs	r3, #45	@ 0x2d
 8006fee:	426d      	negs	r5, r5
 8006ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff4:	4859      	ldr	r0, [pc, #356]	@ (800715c <_printf_i+0x238>)
 8006ff6:	230a      	movs	r3, #10
 8006ff8:	e011      	b.n	800701e <_printf_i+0xfa>
 8006ffa:	6821      	ldr	r1, [r4, #0]
 8006ffc:	6833      	ldr	r3, [r6, #0]
 8006ffe:	0608      	lsls	r0, r1, #24
 8007000:	f853 5b04 	ldr.w	r5, [r3], #4
 8007004:	d402      	bmi.n	800700c <_printf_i+0xe8>
 8007006:	0649      	lsls	r1, r1, #25
 8007008:	bf48      	it	mi
 800700a:	b2ad      	uxthmi	r5, r5
 800700c:	2f6f      	cmp	r7, #111	@ 0x6f
 800700e:	4853      	ldr	r0, [pc, #332]	@ (800715c <_printf_i+0x238>)
 8007010:	6033      	str	r3, [r6, #0]
 8007012:	bf14      	ite	ne
 8007014:	230a      	movne	r3, #10
 8007016:	2308      	moveq	r3, #8
 8007018:	2100      	movs	r1, #0
 800701a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800701e:	6866      	ldr	r6, [r4, #4]
 8007020:	60a6      	str	r6, [r4, #8]
 8007022:	2e00      	cmp	r6, #0
 8007024:	bfa2      	ittt	ge
 8007026:	6821      	ldrge	r1, [r4, #0]
 8007028:	f021 0104 	bicge.w	r1, r1, #4
 800702c:	6021      	strge	r1, [r4, #0]
 800702e:	b90d      	cbnz	r5, 8007034 <_printf_i+0x110>
 8007030:	2e00      	cmp	r6, #0
 8007032:	d04b      	beq.n	80070cc <_printf_i+0x1a8>
 8007034:	4616      	mov	r6, r2
 8007036:	fbb5 f1f3 	udiv	r1, r5, r3
 800703a:	fb03 5711 	mls	r7, r3, r1, r5
 800703e:	5dc7      	ldrb	r7, [r0, r7]
 8007040:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007044:	462f      	mov	r7, r5
 8007046:	42bb      	cmp	r3, r7
 8007048:	460d      	mov	r5, r1
 800704a:	d9f4      	bls.n	8007036 <_printf_i+0x112>
 800704c:	2b08      	cmp	r3, #8
 800704e:	d10b      	bne.n	8007068 <_printf_i+0x144>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	07df      	lsls	r7, r3, #31
 8007054:	d508      	bpl.n	8007068 <_printf_i+0x144>
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	6861      	ldr	r1, [r4, #4]
 800705a:	4299      	cmp	r1, r3
 800705c:	bfde      	ittt	le
 800705e:	2330      	movle	r3, #48	@ 0x30
 8007060:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007064:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007068:	1b92      	subs	r2, r2, r6
 800706a:	6122      	str	r2, [r4, #16]
 800706c:	f8cd a000 	str.w	sl, [sp]
 8007070:	464b      	mov	r3, r9
 8007072:	aa03      	add	r2, sp, #12
 8007074:	4621      	mov	r1, r4
 8007076:	4640      	mov	r0, r8
 8007078:	f7ff fee6 	bl	8006e48 <_printf_common>
 800707c:	3001      	adds	r0, #1
 800707e:	d14a      	bne.n	8007116 <_printf_i+0x1f2>
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	b004      	add	sp, #16
 8007086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	f043 0320 	orr.w	r3, r3, #32
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	4833      	ldr	r0, [pc, #204]	@ (8007160 <_printf_i+0x23c>)
 8007094:	2778      	movs	r7, #120	@ 0x78
 8007096:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	6831      	ldr	r1, [r6, #0]
 800709e:	061f      	lsls	r7, r3, #24
 80070a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80070a4:	d402      	bmi.n	80070ac <_printf_i+0x188>
 80070a6:	065f      	lsls	r7, r3, #25
 80070a8:	bf48      	it	mi
 80070aa:	b2ad      	uxthmi	r5, r5
 80070ac:	6031      	str	r1, [r6, #0]
 80070ae:	07d9      	lsls	r1, r3, #31
 80070b0:	bf44      	itt	mi
 80070b2:	f043 0320 	orrmi.w	r3, r3, #32
 80070b6:	6023      	strmi	r3, [r4, #0]
 80070b8:	b11d      	cbz	r5, 80070c2 <_printf_i+0x19e>
 80070ba:	2310      	movs	r3, #16
 80070bc:	e7ac      	b.n	8007018 <_printf_i+0xf4>
 80070be:	4827      	ldr	r0, [pc, #156]	@ (800715c <_printf_i+0x238>)
 80070c0:	e7e9      	b.n	8007096 <_printf_i+0x172>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	f023 0320 	bic.w	r3, r3, #32
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	e7f6      	b.n	80070ba <_printf_i+0x196>
 80070cc:	4616      	mov	r6, r2
 80070ce:	e7bd      	b.n	800704c <_printf_i+0x128>
 80070d0:	6833      	ldr	r3, [r6, #0]
 80070d2:	6825      	ldr	r5, [r4, #0]
 80070d4:	6961      	ldr	r1, [r4, #20]
 80070d6:	1d18      	adds	r0, r3, #4
 80070d8:	6030      	str	r0, [r6, #0]
 80070da:	062e      	lsls	r6, r5, #24
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	d501      	bpl.n	80070e4 <_printf_i+0x1c0>
 80070e0:	6019      	str	r1, [r3, #0]
 80070e2:	e002      	b.n	80070ea <_printf_i+0x1c6>
 80070e4:	0668      	lsls	r0, r5, #25
 80070e6:	d5fb      	bpl.n	80070e0 <_printf_i+0x1bc>
 80070e8:	8019      	strh	r1, [r3, #0]
 80070ea:	2300      	movs	r3, #0
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	4616      	mov	r6, r2
 80070f0:	e7bc      	b.n	800706c <_printf_i+0x148>
 80070f2:	6833      	ldr	r3, [r6, #0]
 80070f4:	1d1a      	adds	r2, r3, #4
 80070f6:	6032      	str	r2, [r6, #0]
 80070f8:	681e      	ldr	r6, [r3, #0]
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	2100      	movs	r1, #0
 80070fe:	4630      	mov	r0, r6
 8007100:	f7f9 f886 	bl	8000210 <memchr>
 8007104:	b108      	cbz	r0, 800710a <_printf_i+0x1e6>
 8007106:	1b80      	subs	r0, r0, r6
 8007108:	6060      	str	r0, [r4, #4]
 800710a:	6863      	ldr	r3, [r4, #4]
 800710c:	6123      	str	r3, [r4, #16]
 800710e:	2300      	movs	r3, #0
 8007110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007114:	e7aa      	b.n	800706c <_printf_i+0x148>
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	4632      	mov	r2, r6
 800711a:	4649      	mov	r1, r9
 800711c:	4640      	mov	r0, r8
 800711e:	47d0      	blx	sl
 8007120:	3001      	adds	r0, #1
 8007122:	d0ad      	beq.n	8007080 <_printf_i+0x15c>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	079b      	lsls	r3, r3, #30
 8007128:	d413      	bmi.n	8007152 <_printf_i+0x22e>
 800712a:	68e0      	ldr	r0, [r4, #12]
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	4298      	cmp	r0, r3
 8007130:	bfb8      	it	lt
 8007132:	4618      	movlt	r0, r3
 8007134:	e7a6      	b.n	8007084 <_printf_i+0x160>
 8007136:	2301      	movs	r3, #1
 8007138:	4632      	mov	r2, r6
 800713a:	4649      	mov	r1, r9
 800713c:	4640      	mov	r0, r8
 800713e:	47d0      	blx	sl
 8007140:	3001      	adds	r0, #1
 8007142:	d09d      	beq.n	8007080 <_printf_i+0x15c>
 8007144:	3501      	adds	r5, #1
 8007146:	68e3      	ldr	r3, [r4, #12]
 8007148:	9903      	ldr	r1, [sp, #12]
 800714a:	1a5b      	subs	r3, r3, r1
 800714c:	42ab      	cmp	r3, r5
 800714e:	dcf2      	bgt.n	8007136 <_printf_i+0x212>
 8007150:	e7eb      	b.n	800712a <_printf_i+0x206>
 8007152:	2500      	movs	r5, #0
 8007154:	f104 0619 	add.w	r6, r4, #25
 8007158:	e7f5      	b.n	8007146 <_printf_i+0x222>
 800715a:	bf00      	nop
 800715c:	080097b6 	.word	0x080097b6
 8007160:	080097c7 	.word	0x080097c7

08007164 <std>:
 8007164:	2300      	movs	r3, #0
 8007166:	b510      	push	{r4, lr}
 8007168:	4604      	mov	r4, r0
 800716a:	e9c0 3300 	strd	r3, r3, [r0]
 800716e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007172:	6083      	str	r3, [r0, #8]
 8007174:	8181      	strh	r1, [r0, #12]
 8007176:	6643      	str	r3, [r0, #100]	@ 0x64
 8007178:	81c2      	strh	r2, [r0, #14]
 800717a:	6183      	str	r3, [r0, #24]
 800717c:	4619      	mov	r1, r3
 800717e:	2208      	movs	r2, #8
 8007180:	305c      	adds	r0, #92	@ 0x5c
 8007182:	f000 f914 	bl	80073ae <memset>
 8007186:	4b0d      	ldr	r3, [pc, #52]	@ (80071bc <std+0x58>)
 8007188:	6263      	str	r3, [r4, #36]	@ 0x24
 800718a:	4b0d      	ldr	r3, [pc, #52]	@ (80071c0 <std+0x5c>)
 800718c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800718e:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <std+0x60>)
 8007190:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007192:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <std+0x64>)
 8007194:	6323      	str	r3, [r4, #48]	@ 0x30
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <std+0x68>)
 8007198:	6224      	str	r4, [r4, #32]
 800719a:	429c      	cmp	r4, r3
 800719c:	d006      	beq.n	80071ac <std+0x48>
 800719e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071a2:	4294      	cmp	r4, r2
 80071a4:	d002      	beq.n	80071ac <std+0x48>
 80071a6:	33d0      	adds	r3, #208	@ 0xd0
 80071a8:	429c      	cmp	r4, r3
 80071aa:	d105      	bne.n	80071b8 <std+0x54>
 80071ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b4:	f000 b978 	b.w	80074a8 <__retarget_lock_init_recursive>
 80071b8:	bd10      	pop	{r4, pc}
 80071ba:	bf00      	nop
 80071bc:	08007329 	.word	0x08007329
 80071c0:	0800734b 	.word	0x0800734b
 80071c4:	08007383 	.word	0x08007383
 80071c8:	080073a7 	.word	0x080073a7
 80071cc:	200004d4 	.word	0x200004d4

080071d0 <stdio_exit_handler>:
 80071d0:	4a02      	ldr	r2, [pc, #8]	@ (80071dc <stdio_exit_handler+0xc>)
 80071d2:	4903      	ldr	r1, [pc, #12]	@ (80071e0 <stdio_exit_handler+0x10>)
 80071d4:	4803      	ldr	r0, [pc, #12]	@ (80071e4 <stdio_exit_handler+0x14>)
 80071d6:	f000 b869 	b.w	80072ac <_fwalk_sglue>
 80071da:	bf00      	nop
 80071dc:	2000001c 	.word	0x2000001c
 80071e0:	08008e05 	.word	0x08008e05
 80071e4:	2000002c 	.word	0x2000002c

080071e8 <cleanup_stdio>:
 80071e8:	6841      	ldr	r1, [r0, #4]
 80071ea:	4b0c      	ldr	r3, [pc, #48]	@ (800721c <cleanup_stdio+0x34>)
 80071ec:	4299      	cmp	r1, r3
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	d001      	beq.n	80071f8 <cleanup_stdio+0x10>
 80071f4:	f001 fe06 	bl	8008e04 <_fflush_r>
 80071f8:	68a1      	ldr	r1, [r4, #8]
 80071fa:	4b09      	ldr	r3, [pc, #36]	@ (8007220 <cleanup_stdio+0x38>)
 80071fc:	4299      	cmp	r1, r3
 80071fe:	d002      	beq.n	8007206 <cleanup_stdio+0x1e>
 8007200:	4620      	mov	r0, r4
 8007202:	f001 fdff 	bl	8008e04 <_fflush_r>
 8007206:	68e1      	ldr	r1, [r4, #12]
 8007208:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <cleanup_stdio+0x3c>)
 800720a:	4299      	cmp	r1, r3
 800720c:	d004      	beq.n	8007218 <cleanup_stdio+0x30>
 800720e:	4620      	mov	r0, r4
 8007210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007214:	f001 bdf6 	b.w	8008e04 <_fflush_r>
 8007218:	bd10      	pop	{r4, pc}
 800721a:	bf00      	nop
 800721c:	200004d4 	.word	0x200004d4
 8007220:	2000053c 	.word	0x2000053c
 8007224:	200005a4 	.word	0x200005a4

08007228 <global_stdio_init.part.0>:
 8007228:	b510      	push	{r4, lr}
 800722a:	4b0b      	ldr	r3, [pc, #44]	@ (8007258 <global_stdio_init.part.0+0x30>)
 800722c:	4c0b      	ldr	r4, [pc, #44]	@ (800725c <global_stdio_init.part.0+0x34>)
 800722e:	4a0c      	ldr	r2, [pc, #48]	@ (8007260 <global_stdio_init.part.0+0x38>)
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	4620      	mov	r0, r4
 8007234:	2200      	movs	r2, #0
 8007236:	2104      	movs	r1, #4
 8007238:	f7ff ff94 	bl	8007164 <std>
 800723c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007240:	2201      	movs	r2, #1
 8007242:	2109      	movs	r1, #9
 8007244:	f7ff ff8e 	bl	8007164 <std>
 8007248:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800724c:	2202      	movs	r2, #2
 800724e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007252:	2112      	movs	r1, #18
 8007254:	f7ff bf86 	b.w	8007164 <std>
 8007258:	2000060c 	.word	0x2000060c
 800725c:	200004d4 	.word	0x200004d4
 8007260:	080071d1 	.word	0x080071d1

08007264 <__sfp_lock_acquire>:
 8007264:	4801      	ldr	r0, [pc, #4]	@ (800726c <__sfp_lock_acquire+0x8>)
 8007266:	f000 b920 	b.w	80074aa <__retarget_lock_acquire_recursive>
 800726a:	bf00      	nop
 800726c:	20000615 	.word	0x20000615

08007270 <__sfp_lock_release>:
 8007270:	4801      	ldr	r0, [pc, #4]	@ (8007278 <__sfp_lock_release+0x8>)
 8007272:	f000 b91b 	b.w	80074ac <__retarget_lock_release_recursive>
 8007276:	bf00      	nop
 8007278:	20000615 	.word	0x20000615

0800727c <__sinit>:
 800727c:	b510      	push	{r4, lr}
 800727e:	4604      	mov	r4, r0
 8007280:	f7ff fff0 	bl	8007264 <__sfp_lock_acquire>
 8007284:	6a23      	ldr	r3, [r4, #32]
 8007286:	b11b      	cbz	r3, 8007290 <__sinit+0x14>
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728c:	f7ff bff0 	b.w	8007270 <__sfp_lock_release>
 8007290:	4b04      	ldr	r3, [pc, #16]	@ (80072a4 <__sinit+0x28>)
 8007292:	6223      	str	r3, [r4, #32]
 8007294:	4b04      	ldr	r3, [pc, #16]	@ (80072a8 <__sinit+0x2c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1f5      	bne.n	8007288 <__sinit+0xc>
 800729c:	f7ff ffc4 	bl	8007228 <global_stdio_init.part.0>
 80072a0:	e7f2      	b.n	8007288 <__sinit+0xc>
 80072a2:	bf00      	nop
 80072a4:	080071e9 	.word	0x080071e9
 80072a8:	2000060c 	.word	0x2000060c

080072ac <_fwalk_sglue>:
 80072ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b0:	4607      	mov	r7, r0
 80072b2:	4688      	mov	r8, r1
 80072b4:	4614      	mov	r4, r2
 80072b6:	2600      	movs	r6, #0
 80072b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072bc:	f1b9 0901 	subs.w	r9, r9, #1
 80072c0:	d505      	bpl.n	80072ce <_fwalk_sglue+0x22>
 80072c2:	6824      	ldr	r4, [r4, #0]
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	d1f7      	bne.n	80072b8 <_fwalk_sglue+0xc>
 80072c8:	4630      	mov	r0, r6
 80072ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d907      	bls.n	80072e4 <_fwalk_sglue+0x38>
 80072d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072d8:	3301      	adds	r3, #1
 80072da:	d003      	beq.n	80072e4 <_fwalk_sglue+0x38>
 80072dc:	4629      	mov	r1, r5
 80072de:	4638      	mov	r0, r7
 80072e0:	47c0      	blx	r8
 80072e2:	4306      	orrs	r6, r0
 80072e4:	3568      	adds	r5, #104	@ 0x68
 80072e6:	e7e9      	b.n	80072bc <_fwalk_sglue+0x10>

080072e8 <siprintf>:
 80072e8:	b40e      	push	{r1, r2, r3}
 80072ea:	b500      	push	{lr}
 80072ec:	b09c      	sub	sp, #112	@ 0x70
 80072ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80072f0:	9002      	str	r0, [sp, #8]
 80072f2:	9006      	str	r0, [sp, #24]
 80072f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072f8:	4809      	ldr	r0, [pc, #36]	@ (8007320 <siprintf+0x38>)
 80072fa:	9107      	str	r1, [sp, #28]
 80072fc:	9104      	str	r1, [sp, #16]
 80072fe:	4909      	ldr	r1, [pc, #36]	@ (8007324 <siprintf+0x3c>)
 8007300:	f853 2b04 	ldr.w	r2, [r3], #4
 8007304:	9105      	str	r1, [sp, #20]
 8007306:	6800      	ldr	r0, [r0, #0]
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	a902      	add	r1, sp, #8
 800730c:	f001 fbfa 	bl	8008b04 <_svfiprintf_r>
 8007310:	9b02      	ldr	r3, [sp, #8]
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	b01c      	add	sp, #112	@ 0x70
 8007318:	f85d eb04 	ldr.w	lr, [sp], #4
 800731c:	b003      	add	sp, #12
 800731e:	4770      	bx	lr
 8007320:	20000028 	.word	0x20000028
 8007324:	ffff0208 	.word	0xffff0208

08007328 <__sread>:
 8007328:	b510      	push	{r4, lr}
 800732a:	460c      	mov	r4, r1
 800732c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007330:	f000 f86c 	bl	800740c <_read_r>
 8007334:	2800      	cmp	r0, #0
 8007336:	bfab      	itete	ge
 8007338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800733a:	89a3      	ldrhlt	r3, [r4, #12]
 800733c:	181b      	addge	r3, r3, r0
 800733e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007342:	bfac      	ite	ge
 8007344:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007346:	81a3      	strhlt	r3, [r4, #12]
 8007348:	bd10      	pop	{r4, pc}

0800734a <__swrite>:
 800734a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800734e:	461f      	mov	r7, r3
 8007350:	898b      	ldrh	r3, [r1, #12]
 8007352:	05db      	lsls	r3, r3, #23
 8007354:	4605      	mov	r5, r0
 8007356:	460c      	mov	r4, r1
 8007358:	4616      	mov	r6, r2
 800735a:	d505      	bpl.n	8007368 <__swrite+0x1e>
 800735c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007360:	2302      	movs	r3, #2
 8007362:	2200      	movs	r2, #0
 8007364:	f000 f840 	bl	80073e8 <_lseek_r>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800736e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	4628      	mov	r0, r5
 800737a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800737e:	f000 b857 	b.w	8007430 <_write_r>

08007382 <__sseek>:
 8007382:	b510      	push	{r4, lr}
 8007384:	460c      	mov	r4, r1
 8007386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800738a:	f000 f82d 	bl	80073e8 <_lseek_r>
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	bf15      	itete	ne
 8007394:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800739a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800739e:	81a3      	strheq	r3, [r4, #12]
 80073a0:	bf18      	it	ne
 80073a2:	81a3      	strhne	r3, [r4, #12]
 80073a4:	bd10      	pop	{r4, pc}

080073a6 <__sclose>:
 80073a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073aa:	f000 b80d 	b.w	80073c8 <_close_r>

080073ae <memset>:
 80073ae:	4402      	add	r2, r0
 80073b0:	4603      	mov	r3, r0
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d100      	bne.n	80073b8 <memset+0xa>
 80073b6:	4770      	bx	lr
 80073b8:	f803 1b01 	strb.w	r1, [r3], #1
 80073bc:	e7f9      	b.n	80073b2 <memset+0x4>
	...

080073c0 <_localeconv_r>:
 80073c0:	4800      	ldr	r0, [pc, #0]	@ (80073c4 <_localeconv_r+0x4>)
 80073c2:	4770      	bx	lr
 80073c4:	20000168 	.word	0x20000168

080073c8 <_close_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d06      	ldr	r5, [pc, #24]	@ (80073e4 <_close_r+0x1c>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	f7fb fb79 	bl	8002aca <_close>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_close_r+0x1a>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_close_r+0x1a>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	20000610 	.word	0x20000610

080073e8 <_lseek_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4d07      	ldr	r5, [pc, #28]	@ (8007408 <_lseek_r+0x20>)
 80073ec:	4604      	mov	r4, r0
 80073ee:	4608      	mov	r0, r1
 80073f0:	4611      	mov	r1, r2
 80073f2:	2200      	movs	r2, #0
 80073f4:	602a      	str	r2, [r5, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f7fb fb8e 	bl	8002b18 <_lseek>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_lseek_r+0x1e>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_lseek_r+0x1e>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	20000610 	.word	0x20000610

0800740c <_read_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	@ (800742c <_read_r+0x20>)
 8007410:	4604      	mov	r4, r0
 8007412:	4608      	mov	r0, r1
 8007414:	4611      	mov	r1, r2
 8007416:	2200      	movs	r2, #0
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	f7fb fb1c 	bl	8002a58 <_read>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_read_r+0x1e>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_read_r+0x1e>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	20000610 	.word	0x20000610

08007430 <_write_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d07      	ldr	r5, [pc, #28]	@ (8007450 <_write_r+0x20>)
 8007434:	4604      	mov	r4, r0
 8007436:	4608      	mov	r0, r1
 8007438:	4611      	mov	r1, r2
 800743a:	2200      	movs	r2, #0
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f7fb fb27 	bl	8002a92 <_write>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_write_r+0x1e>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_write_r+0x1e>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20000610 	.word	0x20000610

08007454 <__errno>:
 8007454:	4b01      	ldr	r3, [pc, #4]	@ (800745c <__errno+0x8>)
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	20000028 	.word	0x20000028

08007460 <__libc_init_array>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4d0d      	ldr	r5, [pc, #52]	@ (8007498 <__libc_init_array+0x38>)
 8007464:	4c0d      	ldr	r4, [pc, #52]	@ (800749c <__libc_init_array+0x3c>)
 8007466:	1b64      	subs	r4, r4, r5
 8007468:	10a4      	asrs	r4, r4, #2
 800746a:	2600      	movs	r6, #0
 800746c:	42a6      	cmp	r6, r4
 800746e:	d109      	bne.n	8007484 <__libc_init_array+0x24>
 8007470:	4d0b      	ldr	r5, [pc, #44]	@ (80074a0 <__libc_init_array+0x40>)
 8007472:	4c0c      	ldr	r4, [pc, #48]	@ (80074a4 <__libc_init_array+0x44>)
 8007474:	f002 f864 	bl	8009540 <_init>
 8007478:	1b64      	subs	r4, r4, r5
 800747a:	10a4      	asrs	r4, r4, #2
 800747c:	2600      	movs	r6, #0
 800747e:	42a6      	cmp	r6, r4
 8007480:	d105      	bne.n	800748e <__libc_init_array+0x2e>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f855 3b04 	ldr.w	r3, [r5], #4
 8007488:	4798      	blx	r3
 800748a:	3601      	adds	r6, #1
 800748c:	e7ee      	b.n	800746c <__libc_init_array+0xc>
 800748e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007492:	4798      	blx	r3
 8007494:	3601      	adds	r6, #1
 8007496:	e7f2      	b.n	800747e <__libc_init_array+0x1e>
 8007498:	08009b20 	.word	0x08009b20
 800749c:	08009b20 	.word	0x08009b20
 80074a0:	08009b20 	.word	0x08009b20
 80074a4:	08009b24 	.word	0x08009b24

080074a8 <__retarget_lock_init_recursive>:
 80074a8:	4770      	bx	lr

080074aa <__retarget_lock_acquire_recursive>:
 80074aa:	4770      	bx	lr

080074ac <__retarget_lock_release_recursive>:
 80074ac:	4770      	bx	lr

080074ae <quorem>:
 80074ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b2:	6903      	ldr	r3, [r0, #16]
 80074b4:	690c      	ldr	r4, [r1, #16]
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	4607      	mov	r7, r0
 80074ba:	db7e      	blt.n	80075ba <quorem+0x10c>
 80074bc:	3c01      	subs	r4, #1
 80074be:	f101 0814 	add.w	r8, r1, #20
 80074c2:	00a3      	lsls	r3, r4, #2
 80074c4:	f100 0514 	add.w	r5, r0, #20
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074d8:	3301      	adds	r3, #1
 80074da:	429a      	cmp	r2, r3
 80074dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80074e4:	d32e      	bcc.n	8007544 <quorem+0x96>
 80074e6:	f04f 0a00 	mov.w	sl, #0
 80074ea:	46c4      	mov	ip, r8
 80074ec:	46ae      	mov	lr, r5
 80074ee:	46d3      	mov	fp, sl
 80074f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074f4:	b298      	uxth	r0, r3
 80074f6:	fb06 a000 	mla	r0, r6, r0, sl
 80074fa:	0c02      	lsrs	r2, r0, #16
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	fb06 2303 	mla	r3, r6, r3, r2
 8007502:	f8de 2000 	ldr.w	r2, [lr]
 8007506:	b280      	uxth	r0, r0
 8007508:	b292      	uxth	r2, r2
 800750a:	1a12      	subs	r2, r2, r0
 800750c:	445a      	add	r2, fp
 800750e:	f8de 0000 	ldr.w	r0, [lr]
 8007512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007516:	b29b      	uxth	r3, r3
 8007518:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800751c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007520:	b292      	uxth	r2, r2
 8007522:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007526:	45e1      	cmp	r9, ip
 8007528:	f84e 2b04 	str.w	r2, [lr], #4
 800752c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007530:	d2de      	bcs.n	80074f0 <quorem+0x42>
 8007532:	9b00      	ldr	r3, [sp, #0]
 8007534:	58eb      	ldr	r3, [r5, r3]
 8007536:	b92b      	cbnz	r3, 8007544 <quorem+0x96>
 8007538:	9b01      	ldr	r3, [sp, #4]
 800753a:	3b04      	subs	r3, #4
 800753c:	429d      	cmp	r5, r3
 800753e:	461a      	mov	r2, r3
 8007540:	d32f      	bcc.n	80075a2 <quorem+0xf4>
 8007542:	613c      	str	r4, [r7, #16]
 8007544:	4638      	mov	r0, r7
 8007546:	f001 f979 	bl	800883c <__mcmp>
 800754a:	2800      	cmp	r0, #0
 800754c:	db25      	blt.n	800759a <quorem+0xec>
 800754e:	4629      	mov	r1, r5
 8007550:	2000      	movs	r0, #0
 8007552:	f858 2b04 	ldr.w	r2, [r8], #4
 8007556:	f8d1 c000 	ldr.w	ip, [r1]
 800755a:	fa1f fe82 	uxth.w	lr, r2
 800755e:	fa1f f38c 	uxth.w	r3, ip
 8007562:	eba3 030e 	sub.w	r3, r3, lr
 8007566:	4403      	add	r3, r0
 8007568:	0c12      	lsrs	r2, r2, #16
 800756a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800756e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007578:	45c1      	cmp	r9, r8
 800757a:	f841 3b04 	str.w	r3, [r1], #4
 800757e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007582:	d2e6      	bcs.n	8007552 <quorem+0xa4>
 8007584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007588:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800758c:	b922      	cbnz	r2, 8007598 <quorem+0xea>
 800758e:	3b04      	subs	r3, #4
 8007590:	429d      	cmp	r5, r3
 8007592:	461a      	mov	r2, r3
 8007594:	d30b      	bcc.n	80075ae <quorem+0x100>
 8007596:	613c      	str	r4, [r7, #16]
 8007598:	3601      	adds	r6, #1
 800759a:	4630      	mov	r0, r6
 800759c:	b003      	add	sp, #12
 800759e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	d1cb      	bne.n	8007542 <quorem+0x94>
 80075aa:	3c01      	subs	r4, #1
 80075ac:	e7c6      	b.n	800753c <quorem+0x8e>
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	3b04      	subs	r3, #4
 80075b2:	2a00      	cmp	r2, #0
 80075b4:	d1ef      	bne.n	8007596 <quorem+0xe8>
 80075b6:	3c01      	subs	r4, #1
 80075b8:	e7ea      	b.n	8007590 <quorem+0xe2>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e7ee      	b.n	800759c <quorem+0xee>
	...

080075c0 <_dtoa_r>:
 80075c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	69c7      	ldr	r7, [r0, #28]
 80075c6:	b099      	sub	sp, #100	@ 0x64
 80075c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80075cc:	ec55 4b10 	vmov	r4, r5, d0
 80075d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80075d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80075d4:	4683      	mov	fp, r0
 80075d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80075d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075da:	b97f      	cbnz	r7, 80075fc <_dtoa_r+0x3c>
 80075dc:	2010      	movs	r0, #16
 80075de:	f000 fdfd 	bl	80081dc <malloc>
 80075e2:	4602      	mov	r2, r0
 80075e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80075e8:	b920      	cbnz	r0, 80075f4 <_dtoa_r+0x34>
 80075ea:	4ba7      	ldr	r3, [pc, #668]	@ (8007888 <_dtoa_r+0x2c8>)
 80075ec:	21ef      	movs	r1, #239	@ 0xef
 80075ee:	48a7      	ldr	r0, [pc, #668]	@ (800788c <_dtoa_r+0x2cc>)
 80075f0:	f001 fc68 	bl	8008ec4 <__assert_func>
 80075f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80075f8:	6007      	str	r7, [r0, #0]
 80075fa:	60c7      	str	r7, [r0, #12]
 80075fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007600:	6819      	ldr	r1, [r3, #0]
 8007602:	b159      	cbz	r1, 800761c <_dtoa_r+0x5c>
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	604a      	str	r2, [r1, #4]
 8007608:	2301      	movs	r3, #1
 800760a:	4093      	lsls	r3, r2
 800760c:	608b      	str	r3, [r1, #8]
 800760e:	4658      	mov	r0, fp
 8007610:	f000 feda 	bl	80083c8 <_Bfree>
 8007614:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	1e2b      	subs	r3, r5, #0
 800761e:	bfb9      	ittee	lt
 8007620:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007624:	9303      	strlt	r3, [sp, #12]
 8007626:	2300      	movge	r3, #0
 8007628:	6033      	strge	r3, [r6, #0]
 800762a:	9f03      	ldr	r7, [sp, #12]
 800762c:	4b98      	ldr	r3, [pc, #608]	@ (8007890 <_dtoa_r+0x2d0>)
 800762e:	bfbc      	itt	lt
 8007630:	2201      	movlt	r2, #1
 8007632:	6032      	strlt	r2, [r6, #0]
 8007634:	43bb      	bics	r3, r7
 8007636:	d112      	bne.n	800765e <_dtoa_r+0x9e>
 8007638:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800763a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007644:	4323      	orrs	r3, r4
 8007646:	f000 854d 	beq.w	80080e4 <_dtoa_r+0xb24>
 800764a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800764c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80078a4 <_dtoa_r+0x2e4>
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 854f 	beq.w	80080f4 <_dtoa_r+0xb34>
 8007656:	f10a 0303 	add.w	r3, sl, #3
 800765a:	f000 bd49 	b.w	80080f0 <_dtoa_r+0xb30>
 800765e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	ec51 0b17 	vmov	r0, r1, d7
 8007668:	2300      	movs	r3, #0
 800766a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800766e:	f7f9 fa4b 	bl	8000b08 <__aeabi_dcmpeq>
 8007672:	4680      	mov	r8, r0
 8007674:	b158      	cbz	r0, 800768e <_dtoa_r+0xce>
 8007676:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007678:	2301      	movs	r3, #1
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800767e:	b113      	cbz	r3, 8007686 <_dtoa_r+0xc6>
 8007680:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007682:	4b84      	ldr	r3, [pc, #528]	@ (8007894 <_dtoa_r+0x2d4>)
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80078a8 <_dtoa_r+0x2e8>
 800768a:	f000 bd33 	b.w	80080f4 <_dtoa_r+0xb34>
 800768e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007692:	aa16      	add	r2, sp, #88	@ 0x58
 8007694:	a917      	add	r1, sp, #92	@ 0x5c
 8007696:	4658      	mov	r0, fp
 8007698:	f001 f980 	bl	800899c <__d2b>
 800769c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80076a0:	4681      	mov	r9, r0
 80076a2:	2e00      	cmp	r6, #0
 80076a4:	d077      	beq.n	8007796 <_dtoa_r+0x1d6>
 80076a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80076ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80076b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80076bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80076c0:	4619      	mov	r1, r3
 80076c2:	2200      	movs	r2, #0
 80076c4:	4b74      	ldr	r3, [pc, #464]	@ (8007898 <_dtoa_r+0x2d8>)
 80076c6:	f7f8 fdff 	bl	80002c8 <__aeabi_dsub>
 80076ca:	a369      	add	r3, pc, #420	@ (adr r3, 8007870 <_dtoa_r+0x2b0>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f7f8 ffb2 	bl	8000638 <__aeabi_dmul>
 80076d4:	a368      	add	r3, pc, #416	@ (adr r3, 8007878 <_dtoa_r+0x2b8>)
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f7f8 fdf7 	bl	80002cc <__adddf3>
 80076de:	4604      	mov	r4, r0
 80076e0:	4630      	mov	r0, r6
 80076e2:	460d      	mov	r5, r1
 80076e4:	f7f8 ff3e 	bl	8000564 <__aeabi_i2d>
 80076e8:	a365      	add	r3, pc, #404	@ (adr r3, 8007880 <_dtoa_r+0x2c0>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 ffa3 	bl	8000638 <__aeabi_dmul>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4620      	mov	r0, r4
 80076f8:	4629      	mov	r1, r5
 80076fa:	f7f8 fde7 	bl	80002cc <__adddf3>
 80076fe:	4604      	mov	r4, r0
 8007700:	460d      	mov	r5, r1
 8007702:	f7f9 fa49 	bl	8000b98 <__aeabi_d2iz>
 8007706:	2200      	movs	r2, #0
 8007708:	4607      	mov	r7, r0
 800770a:	2300      	movs	r3, #0
 800770c:	4620      	mov	r0, r4
 800770e:	4629      	mov	r1, r5
 8007710:	f7f9 fa04 	bl	8000b1c <__aeabi_dcmplt>
 8007714:	b140      	cbz	r0, 8007728 <_dtoa_r+0x168>
 8007716:	4638      	mov	r0, r7
 8007718:	f7f8 ff24 	bl	8000564 <__aeabi_i2d>
 800771c:	4622      	mov	r2, r4
 800771e:	462b      	mov	r3, r5
 8007720:	f7f9 f9f2 	bl	8000b08 <__aeabi_dcmpeq>
 8007724:	b900      	cbnz	r0, 8007728 <_dtoa_r+0x168>
 8007726:	3f01      	subs	r7, #1
 8007728:	2f16      	cmp	r7, #22
 800772a:	d851      	bhi.n	80077d0 <_dtoa_r+0x210>
 800772c:	4b5b      	ldr	r3, [pc, #364]	@ (800789c <_dtoa_r+0x2dc>)
 800772e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800773a:	f7f9 f9ef 	bl	8000b1c <__aeabi_dcmplt>
 800773e:	2800      	cmp	r0, #0
 8007740:	d048      	beq.n	80077d4 <_dtoa_r+0x214>
 8007742:	3f01      	subs	r7, #1
 8007744:	2300      	movs	r3, #0
 8007746:	9312      	str	r3, [sp, #72]	@ 0x48
 8007748:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800774a:	1b9b      	subs	r3, r3, r6
 800774c:	1e5a      	subs	r2, r3, #1
 800774e:	bf44      	itt	mi
 8007750:	f1c3 0801 	rsbmi	r8, r3, #1
 8007754:	2300      	movmi	r3, #0
 8007756:	9208      	str	r2, [sp, #32]
 8007758:	bf54      	ite	pl
 800775a:	f04f 0800 	movpl.w	r8, #0
 800775e:	9308      	strmi	r3, [sp, #32]
 8007760:	2f00      	cmp	r7, #0
 8007762:	db39      	blt.n	80077d8 <_dtoa_r+0x218>
 8007764:	9b08      	ldr	r3, [sp, #32]
 8007766:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007768:	443b      	add	r3, r7
 800776a:	9308      	str	r3, [sp, #32]
 800776c:	2300      	movs	r3, #0
 800776e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007772:	2b09      	cmp	r3, #9
 8007774:	d864      	bhi.n	8007840 <_dtoa_r+0x280>
 8007776:	2b05      	cmp	r3, #5
 8007778:	bfc4      	itt	gt
 800777a:	3b04      	subgt	r3, #4
 800777c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800777e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007780:	f1a3 0302 	sub.w	r3, r3, #2
 8007784:	bfcc      	ite	gt
 8007786:	2400      	movgt	r4, #0
 8007788:	2401      	movle	r4, #1
 800778a:	2b03      	cmp	r3, #3
 800778c:	d863      	bhi.n	8007856 <_dtoa_r+0x296>
 800778e:	e8df f003 	tbb	[pc, r3]
 8007792:	372a      	.short	0x372a
 8007794:	5535      	.short	0x5535
 8007796:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800779a:	441e      	add	r6, r3
 800779c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	bfc1      	itttt	gt
 80077a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80077a8:	409f      	lslgt	r7, r3
 80077aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80077ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80077b2:	bfd6      	itet	le
 80077b4:	f1c3 0320 	rsble	r3, r3, #32
 80077b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80077bc:	fa04 f003 	lslle.w	r0, r4, r3
 80077c0:	f7f8 fec0 	bl	8000544 <__aeabi_ui2d>
 80077c4:	2201      	movs	r2, #1
 80077c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80077ca:	3e01      	subs	r6, #1
 80077cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80077ce:	e777      	b.n	80076c0 <_dtoa_r+0x100>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e7b8      	b.n	8007746 <_dtoa_r+0x186>
 80077d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80077d6:	e7b7      	b.n	8007748 <_dtoa_r+0x188>
 80077d8:	427b      	negs	r3, r7
 80077da:	930a      	str	r3, [sp, #40]	@ 0x28
 80077dc:	2300      	movs	r3, #0
 80077de:	eba8 0807 	sub.w	r8, r8, r7
 80077e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077e4:	e7c4      	b.n	8007770 <_dtoa_r+0x1b0>
 80077e6:	2300      	movs	r3, #0
 80077e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dc35      	bgt.n	800785c <_dtoa_r+0x29c>
 80077f0:	2301      	movs	r3, #1
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	9307      	str	r3, [sp, #28]
 80077f6:	461a      	mov	r2, r3
 80077f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077fa:	e00b      	b.n	8007814 <_dtoa_r+0x254>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e7f3      	b.n	80077e8 <_dtoa_r+0x228>
 8007800:	2300      	movs	r3, #0
 8007802:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007806:	18fb      	adds	r3, r7, r3
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	3301      	adds	r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	9307      	str	r3, [sp, #28]
 8007810:	bfb8      	it	lt
 8007812:	2301      	movlt	r3, #1
 8007814:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007818:	2100      	movs	r1, #0
 800781a:	2204      	movs	r2, #4
 800781c:	f102 0514 	add.w	r5, r2, #20
 8007820:	429d      	cmp	r5, r3
 8007822:	d91f      	bls.n	8007864 <_dtoa_r+0x2a4>
 8007824:	6041      	str	r1, [r0, #4]
 8007826:	4658      	mov	r0, fp
 8007828:	f000 fd8e 	bl	8008348 <_Balloc>
 800782c:	4682      	mov	sl, r0
 800782e:	2800      	cmp	r0, #0
 8007830:	d13c      	bne.n	80078ac <_dtoa_r+0x2ec>
 8007832:	4b1b      	ldr	r3, [pc, #108]	@ (80078a0 <_dtoa_r+0x2e0>)
 8007834:	4602      	mov	r2, r0
 8007836:	f240 11af 	movw	r1, #431	@ 0x1af
 800783a:	e6d8      	b.n	80075ee <_dtoa_r+0x2e>
 800783c:	2301      	movs	r3, #1
 800783e:	e7e0      	b.n	8007802 <_dtoa_r+0x242>
 8007840:	2401      	movs	r4, #1
 8007842:	2300      	movs	r3, #0
 8007844:	9309      	str	r3, [sp, #36]	@ 0x24
 8007846:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007848:	f04f 33ff 	mov.w	r3, #4294967295
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	9307      	str	r3, [sp, #28]
 8007850:	2200      	movs	r2, #0
 8007852:	2312      	movs	r3, #18
 8007854:	e7d0      	b.n	80077f8 <_dtoa_r+0x238>
 8007856:	2301      	movs	r3, #1
 8007858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800785a:	e7f5      	b.n	8007848 <_dtoa_r+0x288>
 800785c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	9307      	str	r3, [sp, #28]
 8007862:	e7d7      	b.n	8007814 <_dtoa_r+0x254>
 8007864:	3101      	adds	r1, #1
 8007866:	0052      	lsls	r2, r2, #1
 8007868:	e7d8      	b.n	800781c <_dtoa_r+0x25c>
 800786a:	bf00      	nop
 800786c:	f3af 8000 	nop.w
 8007870:	636f4361 	.word	0x636f4361
 8007874:	3fd287a7 	.word	0x3fd287a7
 8007878:	8b60c8b3 	.word	0x8b60c8b3
 800787c:	3fc68a28 	.word	0x3fc68a28
 8007880:	509f79fb 	.word	0x509f79fb
 8007884:	3fd34413 	.word	0x3fd34413
 8007888:	080097e5 	.word	0x080097e5
 800788c:	080097fc 	.word	0x080097fc
 8007890:	7ff00000 	.word	0x7ff00000
 8007894:	080097b5 	.word	0x080097b5
 8007898:	3ff80000 	.word	0x3ff80000
 800789c:	080098f8 	.word	0x080098f8
 80078a0:	08009854 	.word	0x08009854
 80078a4:	080097e1 	.word	0x080097e1
 80078a8:	080097b4 	.word	0x080097b4
 80078ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078b0:	6018      	str	r0, [r3, #0]
 80078b2:	9b07      	ldr	r3, [sp, #28]
 80078b4:	2b0e      	cmp	r3, #14
 80078b6:	f200 80a4 	bhi.w	8007a02 <_dtoa_r+0x442>
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	f000 80a1 	beq.w	8007a02 <_dtoa_r+0x442>
 80078c0:	2f00      	cmp	r7, #0
 80078c2:	dd33      	ble.n	800792c <_dtoa_r+0x36c>
 80078c4:	4bad      	ldr	r3, [pc, #692]	@ (8007b7c <_dtoa_r+0x5bc>)
 80078c6:	f007 020f 	and.w	r2, r7, #15
 80078ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ce:	ed93 7b00 	vldr	d7, [r3]
 80078d2:	05f8      	lsls	r0, r7, #23
 80078d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80078d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80078dc:	d516      	bpl.n	800790c <_dtoa_r+0x34c>
 80078de:	4ba8      	ldr	r3, [pc, #672]	@ (8007b80 <_dtoa_r+0x5c0>)
 80078e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078e8:	f7f8 ffd0 	bl	800088c <__aeabi_ddiv>
 80078ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f0:	f004 040f 	and.w	r4, r4, #15
 80078f4:	2603      	movs	r6, #3
 80078f6:	4da2      	ldr	r5, [pc, #648]	@ (8007b80 <_dtoa_r+0x5c0>)
 80078f8:	b954      	cbnz	r4, 8007910 <_dtoa_r+0x350>
 80078fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007902:	f7f8 ffc3 	bl	800088c <__aeabi_ddiv>
 8007906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800790a:	e028      	b.n	800795e <_dtoa_r+0x39e>
 800790c:	2602      	movs	r6, #2
 800790e:	e7f2      	b.n	80078f6 <_dtoa_r+0x336>
 8007910:	07e1      	lsls	r1, r4, #31
 8007912:	d508      	bpl.n	8007926 <_dtoa_r+0x366>
 8007914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007918:	e9d5 2300 	ldrd	r2, r3, [r5]
 800791c:	f7f8 fe8c 	bl	8000638 <__aeabi_dmul>
 8007920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007924:	3601      	adds	r6, #1
 8007926:	1064      	asrs	r4, r4, #1
 8007928:	3508      	adds	r5, #8
 800792a:	e7e5      	b.n	80078f8 <_dtoa_r+0x338>
 800792c:	f000 80d2 	beq.w	8007ad4 <_dtoa_r+0x514>
 8007930:	427c      	negs	r4, r7
 8007932:	4b92      	ldr	r3, [pc, #584]	@ (8007b7c <_dtoa_r+0x5bc>)
 8007934:	4d92      	ldr	r5, [pc, #584]	@ (8007b80 <_dtoa_r+0x5c0>)
 8007936:	f004 020f 	and.w	r2, r4, #15
 800793a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007946:	f7f8 fe77 	bl	8000638 <__aeabi_dmul>
 800794a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800794e:	1124      	asrs	r4, r4, #4
 8007950:	2300      	movs	r3, #0
 8007952:	2602      	movs	r6, #2
 8007954:	2c00      	cmp	r4, #0
 8007956:	f040 80b2 	bne.w	8007abe <_dtoa_r+0x4fe>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1d3      	bne.n	8007906 <_dtoa_r+0x346>
 800795e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007960:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80b7 	beq.w	8007ad8 <_dtoa_r+0x518>
 800796a:	4b86      	ldr	r3, [pc, #536]	@ (8007b84 <_dtoa_r+0x5c4>)
 800796c:	2200      	movs	r2, #0
 800796e:	4620      	mov	r0, r4
 8007970:	4629      	mov	r1, r5
 8007972:	f7f9 f8d3 	bl	8000b1c <__aeabi_dcmplt>
 8007976:	2800      	cmp	r0, #0
 8007978:	f000 80ae 	beq.w	8007ad8 <_dtoa_r+0x518>
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80aa 	beq.w	8007ad8 <_dtoa_r+0x518>
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	dd37      	ble.n	80079fa <_dtoa_r+0x43a>
 800798a:	1e7b      	subs	r3, r7, #1
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	4620      	mov	r0, r4
 8007990:	4b7d      	ldr	r3, [pc, #500]	@ (8007b88 <_dtoa_r+0x5c8>)
 8007992:	2200      	movs	r2, #0
 8007994:	4629      	mov	r1, r5
 8007996:	f7f8 fe4f 	bl	8000638 <__aeabi_dmul>
 800799a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800799e:	9c00      	ldr	r4, [sp, #0]
 80079a0:	3601      	adds	r6, #1
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7f8 fdde 	bl	8000564 <__aeabi_i2d>
 80079a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079ac:	f7f8 fe44 	bl	8000638 <__aeabi_dmul>
 80079b0:	4b76      	ldr	r3, [pc, #472]	@ (8007b8c <_dtoa_r+0x5cc>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	f7f8 fc8a 	bl	80002cc <__adddf3>
 80079b8:	4605      	mov	r5, r0
 80079ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80079be:	2c00      	cmp	r4, #0
 80079c0:	f040 808d 	bne.w	8007ade <_dtoa_r+0x51e>
 80079c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c8:	4b71      	ldr	r3, [pc, #452]	@ (8007b90 <_dtoa_r+0x5d0>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	f7f8 fc7c 	bl	80002c8 <__aeabi_dsub>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079d8:	462a      	mov	r2, r5
 80079da:	4633      	mov	r3, r6
 80079dc:	f7f9 f8bc 	bl	8000b58 <__aeabi_dcmpgt>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f040 828b 	bne.w	8007efc <_dtoa_r+0x93c>
 80079e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ea:	462a      	mov	r2, r5
 80079ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80079f0:	f7f9 f894 	bl	8000b1c <__aeabi_dcmplt>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f040 8128 	bne.w	8007c4a <_dtoa_r+0x68a>
 80079fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80079fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f2c0 815a 	blt.w	8007cbe <_dtoa_r+0x6fe>
 8007a0a:	2f0e      	cmp	r7, #14
 8007a0c:	f300 8157 	bgt.w	8007cbe <_dtoa_r+0x6fe>
 8007a10:	4b5a      	ldr	r3, [pc, #360]	@ (8007b7c <_dtoa_r+0x5bc>)
 8007a12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a16:	ed93 7b00 	vldr	d7, [r3]
 8007a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	ed8d 7b00 	vstr	d7, [sp]
 8007a22:	da03      	bge.n	8007a2c <_dtoa_r+0x46c>
 8007a24:	9b07      	ldr	r3, [sp, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f340 8101 	ble.w	8007c2e <_dtoa_r+0x66e>
 8007a2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a30:	4656      	mov	r6, sl
 8007a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 ff27 	bl	800088c <__aeabi_ddiv>
 8007a3e:	f7f9 f8ab 	bl	8000b98 <__aeabi_d2iz>
 8007a42:	4680      	mov	r8, r0
 8007a44:	f7f8 fd8e 	bl	8000564 <__aeabi_i2d>
 8007a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a4c:	f7f8 fdf4 	bl	8000638 <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a5c:	f7f8 fc34 	bl	80002c8 <__aeabi_dsub>
 8007a60:	f806 4b01 	strb.w	r4, [r6], #1
 8007a64:	9d07      	ldr	r5, [sp, #28]
 8007a66:	eba6 040a 	sub.w	r4, r6, sl
 8007a6a:	42a5      	cmp	r5, r4
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	f040 8117 	bne.w	8007ca2 <_dtoa_r+0x6e2>
 8007a74:	f7f8 fc2a 	bl	80002cc <__adddf3>
 8007a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	460d      	mov	r5, r1
 8007a80:	f7f9 f86a 	bl	8000b58 <__aeabi_dcmpgt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f040 80f9 	bne.w	8007c7c <_dtoa_r+0x6bc>
 8007a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	4629      	mov	r1, r5
 8007a92:	f7f9 f839 	bl	8000b08 <__aeabi_dcmpeq>
 8007a96:	b118      	cbz	r0, 8007aa0 <_dtoa_r+0x4e0>
 8007a98:	f018 0f01 	tst.w	r8, #1
 8007a9c:	f040 80ee 	bne.w	8007c7c <_dtoa_r+0x6bc>
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	4658      	mov	r0, fp
 8007aa4:	f000 fc90 	bl	80083c8 <_Bfree>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	7033      	strb	r3, [r6, #0]
 8007aac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007aae:	3701      	adds	r7, #1
 8007ab0:	601f      	str	r7, [r3, #0]
 8007ab2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 831d 	beq.w	80080f4 <_dtoa_r+0xb34>
 8007aba:	601e      	str	r6, [r3, #0]
 8007abc:	e31a      	b.n	80080f4 <_dtoa_r+0xb34>
 8007abe:	07e2      	lsls	r2, r4, #31
 8007ac0:	d505      	bpl.n	8007ace <_dtoa_r+0x50e>
 8007ac2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ac6:	f7f8 fdb7 	bl	8000638 <__aeabi_dmul>
 8007aca:	3601      	adds	r6, #1
 8007acc:	2301      	movs	r3, #1
 8007ace:	1064      	asrs	r4, r4, #1
 8007ad0:	3508      	adds	r5, #8
 8007ad2:	e73f      	b.n	8007954 <_dtoa_r+0x394>
 8007ad4:	2602      	movs	r6, #2
 8007ad6:	e742      	b.n	800795e <_dtoa_r+0x39e>
 8007ad8:	9c07      	ldr	r4, [sp, #28]
 8007ada:	9704      	str	r7, [sp, #16]
 8007adc:	e761      	b.n	80079a2 <_dtoa_r+0x3e2>
 8007ade:	4b27      	ldr	r3, [pc, #156]	@ (8007b7c <_dtoa_r+0x5bc>)
 8007ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ae2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ae6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007aea:	4454      	add	r4, sl
 8007aec:	2900      	cmp	r1, #0
 8007aee:	d053      	beq.n	8007b98 <_dtoa_r+0x5d8>
 8007af0:	4928      	ldr	r1, [pc, #160]	@ (8007b94 <_dtoa_r+0x5d4>)
 8007af2:	2000      	movs	r0, #0
 8007af4:	f7f8 feca 	bl	800088c <__aeabi_ddiv>
 8007af8:	4633      	mov	r3, r6
 8007afa:	462a      	mov	r2, r5
 8007afc:	f7f8 fbe4 	bl	80002c8 <__aeabi_dsub>
 8007b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b04:	4656      	mov	r6, sl
 8007b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b0a:	f7f9 f845 	bl	8000b98 <__aeabi_d2iz>
 8007b0e:	4605      	mov	r5, r0
 8007b10:	f7f8 fd28 	bl	8000564 <__aeabi_i2d>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b1c:	f7f8 fbd4 	bl	80002c8 <__aeabi_dsub>
 8007b20:	3530      	adds	r5, #48	@ 0x30
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b2a:	f806 5b01 	strb.w	r5, [r6], #1
 8007b2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b32:	f7f8 fff3 	bl	8000b1c <__aeabi_dcmplt>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d171      	bne.n	8007c1e <_dtoa_r+0x65e>
 8007b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b3e:	4911      	ldr	r1, [pc, #68]	@ (8007b84 <_dtoa_r+0x5c4>)
 8007b40:	2000      	movs	r0, #0
 8007b42:	f7f8 fbc1 	bl	80002c8 <__aeabi_dsub>
 8007b46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b4a:	f7f8 ffe7 	bl	8000b1c <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f040 8095 	bne.w	8007c7e <_dtoa_r+0x6be>
 8007b54:	42a6      	cmp	r6, r4
 8007b56:	f43f af50 	beq.w	80079fa <_dtoa_r+0x43a>
 8007b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b88 <_dtoa_r+0x5c8>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	f7f8 fd69 	bl	8000638 <__aeabi_dmul>
 8007b66:	4b08      	ldr	r3, [pc, #32]	@ (8007b88 <_dtoa_r+0x5c8>)
 8007b68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b72:	f7f8 fd61 	bl	8000638 <__aeabi_dmul>
 8007b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b7a:	e7c4      	b.n	8007b06 <_dtoa_r+0x546>
 8007b7c:	080098f8 	.word	0x080098f8
 8007b80:	080098d0 	.word	0x080098d0
 8007b84:	3ff00000 	.word	0x3ff00000
 8007b88:	40240000 	.word	0x40240000
 8007b8c:	401c0000 	.word	0x401c0000
 8007b90:	40140000 	.word	0x40140000
 8007b94:	3fe00000 	.word	0x3fe00000
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f7f8 fd4c 	bl	8000638 <__aeabi_dmul>
 8007ba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ba4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007ba6:	4656      	mov	r6, sl
 8007ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bac:	f7f8 fff4 	bl	8000b98 <__aeabi_d2iz>
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	f7f8 fcd7 	bl	8000564 <__aeabi_i2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bbe:	f7f8 fb83 	bl	80002c8 <__aeabi_dsub>
 8007bc2:	3530      	adds	r5, #48	@ 0x30
 8007bc4:	f806 5b01 	strb.w	r5, [r6], #1
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	42a6      	cmp	r6, r4
 8007bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	d124      	bne.n	8007c22 <_dtoa_r+0x662>
 8007bd8:	4bac      	ldr	r3, [pc, #688]	@ (8007e8c <_dtoa_r+0x8cc>)
 8007bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007bde:	f7f8 fb75 	bl	80002cc <__adddf3>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bea:	f7f8 ffb5 	bl	8000b58 <__aeabi_dcmpgt>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d145      	bne.n	8007c7e <_dtoa_r+0x6be>
 8007bf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bf6:	49a5      	ldr	r1, [pc, #660]	@ (8007e8c <_dtoa_r+0x8cc>)
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	f7f8 fb65 	bl	80002c8 <__aeabi_dsub>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c06:	f7f8 ff89 	bl	8000b1c <__aeabi_dcmplt>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f43f aef5 	beq.w	80079fa <_dtoa_r+0x43a>
 8007c10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007c12:	1e73      	subs	r3, r6, #1
 8007c14:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c1a:	2b30      	cmp	r3, #48	@ 0x30
 8007c1c:	d0f8      	beq.n	8007c10 <_dtoa_r+0x650>
 8007c1e:	9f04      	ldr	r7, [sp, #16]
 8007c20:	e73e      	b.n	8007aa0 <_dtoa_r+0x4e0>
 8007c22:	4b9b      	ldr	r3, [pc, #620]	@ (8007e90 <_dtoa_r+0x8d0>)
 8007c24:	f7f8 fd08 	bl	8000638 <__aeabi_dmul>
 8007c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c2c:	e7bc      	b.n	8007ba8 <_dtoa_r+0x5e8>
 8007c2e:	d10c      	bne.n	8007c4a <_dtoa_r+0x68a>
 8007c30:	4b98      	ldr	r3, [pc, #608]	@ (8007e94 <_dtoa_r+0x8d4>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c38:	f7f8 fcfe 	bl	8000638 <__aeabi_dmul>
 8007c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c40:	f7f8 ff80 	bl	8000b44 <__aeabi_dcmpge>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f000 8157 	beq.w	8007ef8 <_dtoa_r+0x938>
 8007c4a:	2400      	movs	r4, #0
 8007c4c:	4625      	mov	r5, r4
 8007c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c50:	43db      	mvns	r3, r3
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	4656      	mov	r6, sl
 8007c56:	2700      	movs	r7, #0
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4658      	mov	r0, fp
 8007c5c:	f000 fbb4 	bl	80083c8 <_Bfree>
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	d0dc      	beq.n	8007c1e <_dtoa_r+0x65e>
 8007c64:	b12f      	cbz	r7, 8007c72 <_dtoa_r+0x6b2>
 8007c66:	42af      	cmp	r7, r5
 8007c68:	d003      	beq.n	8007c72 <_dtoa_r+0x6b2>
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	4658      	mov	r0, fp
 8007c6e:	f000 fbab 	bl	80083c8 <_Bfree>
 8007c72:	4629      	mov	r1, r5
 8007c74:	4658      	mov	r0, fp
 8007c76:	f000 fba7 	bl	80083c8 <_Bfree>
 8007c7a:	e7d0      	b.n	8007c1e <_dtoa_r+0x65e>
 8007c7c:	9704      	str	r7, [sp, #16]
 8007c7e:	4633      	mov	r3, r6
 8007c80:	461e      	mov	r6, r3
 8007c82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c86:	2a39      	cmp	r2, #57	@ 0x39
 8007c88:	d107      	bne.n	8007c9a <_dtoa_r+0x6da>
 8007c8a:	459a      	cmp	sl, r3
 8007c8c:	d1f8      	bne.n	8007c80 <_dtoa_r+0x6c0>
 8007c8e:	9a04      	ldr	r2, [sp, #16]
 8007c90:	3201      	adds	r2, #1
 8007c92:	9204      	str	r2, [sp, #16]
 8007c94:	2230      	movs	r2, #48	@ 0x30
 8007c96:	f88a 2000 	strb.w	r2, [sl]
 8007c9a:	781a      	ldrb	r2, [r3, #0]
 8007c9c:	3201      	adds	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]
 8007ca0:	e7bd      	b.n	8007c1e <_dtoa_r+0x65e>
 8007ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8007e90 <_dtoa_r+0x8d0>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f7f8 fcc7 	bl	8000638 <__aeabi_dmul>
 8007caa:	2200      	movs	r2, #0
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	f7f8 ff29 	bl	8000b08 <__aeabi_dcmpeq>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f43f aebb 	beq.w	8007a32 <_dtoa_r+0x472>
 8007cbc:	e6f0      	b.n	8007aa0 <_dtoa_r+0x4e0>
 8007cbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	f000 80db 	beq.w	8007e7c <_dtoa_r+0x8bc>
 8007cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cc8:	2a01      	cmp	r2, #1
 8007cca:	f300 80bf 	bgt.w	8007e4c <_dtoa_r+0x88c>
 8007cce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	f000 80b7 	beq.w	8007e44 <_dtoa_r+0x884>
 8007cd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007cda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007cdc:	4646      	mov	r6, r8
 8007cde:	9a08      	ldr	r2, [sp, #32]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	441a      	add	r2, r3
 8007ce4:	4658      	mov	r0, fp
 8007ce6:	4498      	add	r8, r3
 8007ce8:	9208      	str	r2, [sp, #32]
 8007cea:	f000 fc21 	bl	8008530 <__i2b>
 8007cee:	4605      	mov	r5, r0
 8007cf0:	b15e      	cbz	r6, 8007d0a <_dtoa_r+0x74a>
 8007cf2:	9b08      	ldr	r3, [sp, #32]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dd08      	ble.n	8007d0a <_dtoa_r+0x74a>
 8007cf8:	42b3      	cmp	r3, r6
 8007cfa:	9a08      	ldr	r2, [sp, #32]
 8007cfc:	bfa8      	it	ge
 8007cfe:	4633      	movge	r3, r6
 8007d00:	eba8 0803 	sub.w	r8, r8, r3
 8007d04:	1af6      	subs	r6, r6, r3
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	9308      	str	r3, [sp, #32]
 8007d0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d0c:	b1f3      	cbz	r3, 8007d4c <_dtoa_r+0x78c>
 8007d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80b7 	beq.w	8007e84 <_dtoa_r+0x8c4>
 8007d16:	b18c      	cbz	r4, 8007d3c <_dtoa_r+0x77c>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	4658      	mov	r0, fp
 8007d1e:	f000 fcc7 	bl	80086b0 <__pow5mult>
 8007d22:	464a      	mov	r2, r9
 8007d24:	4601      	mov	r1, r0
 8007d26:	4605      	mov	r5, r0
 8007d28:	4658      	mov	r0, fp
 8007d2a:	f000 fc17 	bl	800855c <__multiply>
 8007d2e:	4649      	mov	r1, r9
 8007d30:	9004      	str	r0, [sp, #16]
 8007d32:	4658      	mov	r0, fp
 8007d34:	f000 fb48 	bl	80083c8 <_Bfree>
 8007d38:	9b04      	ldr	r3, [sp, #16]
 8007d3a:	4699      	mov	r9, r3
 8007d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d3e:	1b1a      	subs	r2, r3, r4
 8007d40:	d004      	beq.n	8007d4c <_dtoa_r+0x78c>
 8007d42:	4649      	mov	r1, r9
 8007d44:	4658      	mov	r0, fp
 8007d46:	f000 fcb3 	bl	80086b0 <__pow5mult>
 8007d4a:	4681      	mov	r9, r0
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	4658      	mov	r0, fp
 8007d50:	f000 fbee 	bl	8008530 <__i2b>
 8007d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d56:	4604      	mov	r4, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 81cf 	beq.w	80080fc <_dtoa_r+0xb3c>
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4601      	mov	r1, r0
 8007d62:	4658      	mov	r0, fp
 8007d64:	f000 fca4 	bl	80086b0 <__pow5mult>
 8007d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	f300 8095 	bgt.w	8007e9c <_dtoa_r+0x8dc>
 8007d72:	9b02      	ldr	r3, [sp, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f040 8087 	bne.w	8007e88 <_dtoa_r+0x8c8>
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f040 8089 	bne.w	8007e98 <_dtoa_r+0x8d8>
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d8c:	0d1b      	lsrs	r3, r3, #20
 8007d8e:	051b      	lsls	r3, r3, #20
 8007d90:	b12b      	cbz	r3, 8007d9e <_dtoa_r+0x7de>
 8007d92:	9b08      	ldr	r3, [sp, #32]
 8007d94:	3301      	adds	r3, #1
 8007d96:	9308      	str	r3, [sp, #32]
 8007d98:	f108 0801 	add.w	r8, r8, #1
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 81b0 	beq.w	8008108 <_dtoa_r+0xb48>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007dae:	6918      	ldr	r0, [r3, #16]
 8007db0:	f000 fb72 	bl	8008498 <__hi0bits>
 8007db4:	f1c0 0020 	rsb	r0, r0, #32
 8007db8:	9b08      	ldr	r3, [sp, #32]
 8007dba:	4418      	add	r0, r3
 8007dbc:	f010 001f 	ands.w	r0, r0, #31
 8007dc0:	d077      	beq.n	8007eb2 <_dtoa_r+0x8f2>
 8007dc2:	f1c0 0320 	rsb	r3, r0, #32
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	dd6b      	ble.n	8007ea2 <_dtoa_r+0x8e2>
 8007dca:	9b08      	ldr	r3, [sp, #32]
 8007dcc:	f1c0 001c 	rsb	r0, r0, #28
 8007dd0:	4403      	add	r3, r0
 8007dd2:	4480      	add	r8, r0
 8007dd4:	4406      	add	r6, r0
 8007dd6:	9308      	str	r3, [sp, #32]
 8007dd8:	f1b8 0f00 	cmp.w	r8, #0
 8007ddc:	dd05      	ble.n	8007dea <_dtoa_r+0x82a>
 8007dde:	4649      	mov	r1, r9
 8007de0:	4642      	mov	r2, r8
 8007de2:	4658      	mov	r0, fp
 8007de4:	f000 fcbe 	bl	8008764 <__lshift>
 8007de8:	4681      	mov	r9, r0
 8007dea:	9b08      	ldr	r3, [sp, #32]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dd05      	ble.n	8007dfc <_dtoa_r+0x83c>
 8007df0:	4621      	mov	r1, r4
 8007df2:	461a      	mov	r2, r3
 8007df4:	4658      	mov	r0, fp
 8007df6:	f000 fcb5 	bl	8008764 <__lshift>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d059      	beq.n	8007eb6 <_dtoa_r+0x8f6>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4648      	mov	r0, r9
 8007e06:	f000 fd19 	bl	800883c <__mcmp>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	da53      	bge.n	8007eb6 <_dtoa_r+0x8f6>
 8007e0e:	1e7b      	subs	r3, r7, #1
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	4649      	mov	r1, r9
 8007e14:	2300      	movs	r3, #0
 8007e16:	220a      	movs	r2, #10
 8007e18:	4658      	mov	r0, fp
 8007e1a:	f000 faf7 	bl	800840c <__multadd>
 8007e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e20:	4681      	mov	r9, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8172 	beq.w	800810c <_dtoa_r+0xb4c>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	220a      	movs	r2, #10
 8007e2e:	4658      	mov	r0, fp
 8007e30:	f000 faec 	bl	800840c <__multadd>
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	4605      	mov	r5, r0
 8007e3a:	dc67      	bgt.n	8007f0c <_dtoa_r+0x94c>
 8007e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	dc41      	bgt.n	8007ec6 <_dtoa_r+0x906>
 8007e42:	e063      	b.n	8007f0c <_dtoa_r+0x94c>
 8007e44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007e4a:	e746      	b.n	8007cda <_dtoa_r+0x71a>
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	1e5c      	subs	r4, r3, #1
 8007e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e52:	42a3      	cmp	r3, r4
 8007e54:	bfbf      	itttt	lt
 8007e56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007e58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007e5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007e5c:	1ae3      	sublt	r3, r4, r3
 8007e5e:	bfb4      	ite	lt
 8007e60:	18d2      	addlt	r2, r2, r3
 8007e62:	1b1c      	subge	r4, r3, r4
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	bfbc      	itt	lt
 8007e68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007e6a:	2400      	movlt	r4, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bfb5      	itete	lt
 8007e70:	eba8 0603 	sublt.w	r6, r8, r3
 8007e74:	9b07      	ldrge	r3, [sp, #28]
 8007e76:	2300      	movlt	r3, #0
 8007e78:	4646      	movge	r6, r8
 8007e7a:	e730      	b.n	8007cde <_dtoa_r+0x71e>
 8007e7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007e80:	4646      	mov	r6, r8
 8007e82:	e735      	b.n	8007cf0 <_dtoa_r+0x730>
 8007e84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e86:	e75c      	b.n	8007d42 <_dtoa_r+0x782>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e788      	b.n	8007d9e <_dtoa_r+0x7de>
 8007e8c:	3fe00000 	.word	0x3fe00000
 8007e90:	40240000 	.word	0x40240000
 8007e94:	40140000 	.word	0x40140000
 8007e98:	9b02      	ldr	r3, [sp, #8]
 8007e9a:	e780      	b.n	8007d9e <_dtoa_r+0x7de>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ea0:	e782      	b.n	8007da8 <_dtoa_r+0x7e8>
 8007ea2:	d099      	beq.n	8007dd8 <_dtoa_r+0x818>
 8007ea4:	9a08      	ldr	r2, [sp, #32]
 8007ea6:	331c      	adds	r3, #28
 8007ea8:	441a      	add	r2, r3
 8007eaa:	4498      	add	r8, r3
 8007eac:	441e      	add	r6, r3
 8007eae:	9208      	str	r2, [sp, #32]
 8007eb0:	e792      	b.n	8007dd8 <_dtoa_r+0x818>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	e7f6      	b.n	8007ea4 <_dtoa_r+0x8e4>
 8007eb6:	9b07      	ldr	r3, [sp, #28]
 8007eb8:	9704      	str	r7, [sp, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dc20      	bgt.n	8007f00 <_dtoa_r+0x940>
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	dd1e      	ble.n	8007f04 <_dtoa_r+0x944>
 8007ec6:	9b00      	ldr	r3, [sp, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f47f aec0 	bne.w	8007c4e <_dtoa_r+0x68e>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	4658      	mov	r0, fp
 8007ed4:	f000 fa9a 	bl	800840c <__multadd>
 8007ed8:	4601      	mov	r1, r0
 8007eda:	4604      	mov	r4, r0
 8007edc:	4648      	mov	r0, r9
 8007ede:	f000 fcad 	bl	800883c <__mcmp>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	f77f aeb3 	ble.w	8007c4e <_dtoa_r+0x68e>
 8007ee8:	4656      	mov	r6, sl
 8007eea:	2331      	movs	r3, #49	@ 0x31
 8007eec:	f806 3b01 	strb.w	r3, [r6], #1
 8007ef0:	9b04      	ldr	r3, [sp, #16]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	e6ae      	b.n	8007c56 <_dtoa_r+0x696>
 8007ef8:	9c07      	ldr	r4, [sp, #28]
 8007efa:	9704      	str	r7, [sp, #16]
 8007efc:	4625      	mov	r5, r4
 8007efe:	e7f3      	b.n	8007ee8 <_dtoa_r+0x928>
 8007f00:	9b07      	ldr	r3, [sp, #28]
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8104 	beq.w	8008114 <_dtoa_r+0xb54>
 8007f0c:	2e00      	cmp	r6, #0
 8007f0e:	dd05      	ble.n	8007f1c <_dtoa_r+0x95c>
 8007f10:	4629      	mov	r1, r5
 8007f12:	4632      	mov	r2, r6
 8007f14:	4658      	mov	r0, fp
 8007f16:	f000 fc25 	bl	8008764 <__lshift>
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d05a      	beq.n	8007fd8 <_dtoa_r+0xa18>
 8007f22:	6869      	ldr	r1, [r5, #4]
 8007f24:	4658      	mov	r0, fp
 8007f26:	f000 fa0f 	bl	8008348 <_Balloc>
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	b928      	cbnz	r0, 8007f3a <_dtoa_r+0x97a>
 8007f2e:	4b84      	ldr	r3, [pc, #528]	@ (8008140 <_dtoa_r+0xb80>)
 8007f30:	4602      	mov	r2, r0
 8007f32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f36:	f7ff bb5a 	b.w	80075ee <_dtoa_r+0x2e>
 8007f3a:	692a      	ldr	r2, [r5, #16]
 8007f3c:	3202      	adds	r2, #2
 8007f3e:	0092      	lsls	r2, r2, #2
 8007f40:	f105 010c 	add.w	r1, r5, #12
 8007f44:	300c      	adds	r0, #12
 8007f46:	f000 ffaf 	bl	8008ea8 <memcpy>
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4658      	mov	r0, fp
 8007f50:	f000 fc08 	bl	8008764 <__lshift>
 8007f54:	f10a 0301 	add.w	r3, sl, #1
 8007f58:	9307      	str	r3, [sp, #28]
 8007f5a:	9b00      	ldr	r3, [sp, #0]
 8007f5c:	4453      	add	r3, sl
 8007f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f60:	9b02      	ldr	r3, [sp, #8]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	462f      	mov	r7, r5
 8007f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	9b07      	ldr	r3, [sp, #28]
 8007f6e:	4621      	mov	r1, r4
 8007f70:	3b01      	subs	r3, #1
 8007f72:	4648      	mov	r0, r9
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	f7ff fa9a 	bl	80074ae <quorem>
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	9002      	str	r0, [sp, #8]
 8007f7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f82:	4648      	mov	r0, r9
 8007f84:	f000 fc5a 	bl	800883c <__mcmp>
 8007f88:	462a      	mov	r2, r5
 8007f8a:	9008      	str	r0, [sp, #32]
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4658      	mov	r0, fp
 8007f90:	f000 fc70 	bl	8008874 <__mdiff>
 8007f94:	68c2      	ldr	r2, [r0, #12]
 8007f96:	4606      	mov	r6, r0
 8007f98:	bb02      	cbnz	r2, 8007fdc <_dtoa_r+0xa1c>
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4648      	mov	r0, r9
 8007f9e:	f000 fc4d 	bl	800883c <__mcmp>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4658      	mov	r0, fp
 8007fa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007faa:	f000 fa0d 	bl	80083c8 <_Bfree>
 8007fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fb2:	9e07      	ldr	r6, [sp, #28]
 8007fb4:	ea43 0102 	orr.w	r1, r3, r2
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fba:	4319      	orrs	r1, r3
 8007fbc:	d110      	bne.n	8007fe0 <_dtoa_r+0xa20>
 8007fbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fc2:	d029      	beq.n	8008018 <_dtoa_r+0xa58>
 8007fc4:	9b08      	ldr	r3, [sp, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	dd02      	ble.n	8007fd0 <_dtoa_r+0xa10>
 8007fca:	9b02      	ldr	r3, [sp, #8]
 8007fcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007fd0:	9b00      	ldr	r3, [sp, #0]
 8007fd2:	f883 8000 	strb.w	r8, [r3]
 8007fd6:	e63f      	b.n	8007c58 <_dtoa_r+0x698>
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e7bb      	b.n	8007f54 <_dtoa_r+0x994>
 8007fdc:	2201      	movs	r2, #1
 8007fde:	e7e1      	b.n	8007fa4 <_dtoa_r+0x9e4>
 8007fe0:	9b08      	ldr	r3, [sp, #32]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	db04      	blt.n	8007ff0 <_dtoa_r+0xa30>
 8007fe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fec:	430b      	orrs	r3, r1
 8007fee:	d120      	bne.n	8008032 <_dtoa_r+0xa72>
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	dded      	ble.n	8007fd0 <_dtoa_r+0xa10>
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4658      	mov	r0, fp
 8007ffa:	f000 fbb3 	bl	8008764 <__lshift>
 8007ffe:	4621      	mov	r1, r4
 8008000:	4681      	mov	r9, r0
 8008002:	f000 fc1b 	bl	800883c <__mcmp>
 8008006:	2800      	cmp	r0, #0
 8008008:	dc03      	bgt.n	8008012 <_dtoa_r+0xa52>
 800800a:	d1e1      	bne.n	8007fd0 <_dtoa_r+0xa10>
 800800c:	f018 0f01 	tst.w	r8, #1
 8008010:	d0de      	beq.n	8007fd0 <_dtoa_r+0xa10>
 8008012:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008016:	d1d8      	bne.n	8007fca <_dtoa_r+0xa0a>
 8008018:	9a00      	ldr	r2, [sp, #0]
 800801a:	2339      	movs	r3, #57	@ 0x39
 800801c:	7013      	strb	r3, [r2, #0]
 800801e:	4633      	mov	r3, r6
 8008020:	461e      	mov	r6, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008028:	2a39      	cmp	r2, #57	@ 0x39
 800802a:	d052      	beq.n	80080d2 <_dtoa_r+0xb12>
 800802c:	3201      	adds	r2, #1
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	e612      	b.n	8007c58 <_dtoa_r+0x698>
 8008032:	2a00      	cmp	r2, #0
 8008034:	dd07      	ble.n	8008046 <_dtoa_r+0xa86>
 8008036:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800803a:	d0ed      	beq.n	8008018 <_dtoa_r+0xa58>
 800803c:	9a00      	ldr	r2, [sp, #0]
 800803e:	f108 0301 	add.w	r3, r8, #1
 8008042:	7013      	strb	r3, [r2, #0]
 8008044:	e608      	b.n	8007c58 <_dtoa_r+0x698>
 8008046:	9b07      	ldr	r3, [sp, #28]
 8008048:	9a07      	ldr	r2, [sp, #28]
 800804a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800804e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008050:	4293      	cmp	r3, r2
 8008052:	d028      	beq.n	80080a6 <_dtoa_r+0xae6>
 8008054:	4649      	mov	r1, r9
 8008056:	2300      	movs	r3, #0
 8008058:	220a      	movs	r2, #10
 800805a:	4658      	mov	r0, fp
 800805c:	f000 f9d6 	bl	800840c <__multadd>
 8008060:	42af      	cmp	r7, r5
 8008062:	4681      	mov	r9, r0
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	f04f 020a 	mov.w	r2, #10
 800806c:	4639      	mov	r1, r7
 800806e:	4658      	mov	r0, fp
 8008070:	d107      	bne.n	8008082 <_dtoa_r+0xac2>
 8008072:	f000 f9cb 	bl	800840c <__multadd>
 8008076:	4607      	mov	r7, r0
 8008078:	4605      	mov	r5, r0
 800807a:	9b07      	ldr	r3, [sp, #28]
 800807c:	3301      	adds	r3, #1
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	e774      	b.n	8007f6c <_dtoa_r+0x9ac>
 8008082:	f000 f9c3 	bl	800840c <__multadd>
 8008086:	4629      	mov	r1, r5
 8008088:	4607      	mov	r7, r0
 800808a:	2300      	movs	r3, #0
 800808c:	220a      	movs	r2, #10
 800808e:	4658      	mov	r0, fp
 8008090:	f000 f9bc 	bl	800840c <__multadd>
 8008094:	4605      	mov	r5, r0
 8008096:	e7f0      	b.n	800807a <_dtoa_r+0xaba>
 8008098:	9b00      	ldr	r3, [sp, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	bfcc      	ite	gt
 800809e:	461e      	movgt	r6, r3
 80080a0:	2601      	movle	r6, #1
 80080a2:	4456      	add	r6, sl
 80080a4:	2700      	movs	r7, #0
 80080a6:	4649      	mov	r1, r9
 80080a8:	2201      	movs	r2, #1
 80080aa:	4658      	mov	r0, fp
 80080ac:	f000 fb5a 	bl	8008764 <__lshift>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4681      	mov	r9, r0
 80080b4:	f000 fbc2 	bl	800883c <__mcmp>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	dcb0      	bgt.n	800801e <_dtoa_r+0xa5e>
 80080bc:	d102      	bne.n	80080c4 <_dtoa_r+0xb04>
 80080be:	f018 0f01 	tst.w	r8, #1
 80080c2:	d1ac      	bne.n	800801e <_dtoa_r+0xa5e>
 80080c4:	4633      	mov	r3, r6
 80080c6:	461e      	mov	r6, r3
 80080c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080cc:	2a30      	cmp	r2, #48	@ 0x30
 80080ce:	d0fa      	beq.n	80080c6 <_dtoa_r+0xb06>
 80080d0:	e5c2      	b.n	8007c58 <_dtoa_r+0x698>
 80080d2:	459a      	cmp	sl, r3
 80080d4:	d1a4      	bne.n	8008020 <_dtoa_r+0xa60>
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	3301      	adds	r3, #1
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	2331      	movs	r3, #49	@ 0x31
 80080de:	f88a 3000 	strb.w	r3, [sl]
 80080e2:	e5b9      	b.n	8007c58 <_dtoa_r+0x698>
 80080e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008144 <_dtoa_r+0xb84>
 80080ea:	b11b      	cbz	r3, 80080f4 <_dtoa_r+0xb34>
 80080ec:	f10a 0308 	add.w	r3, sl, #8
 80080f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	4650      	mov	r0, sl
 80080f6:	b019      	add	sp, #100	@ 0x64
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080fe:	2b01      	cmp	r3, #1
 8008100:	f77f ae37 	ble.w	8007d72 <_dtoa_r+0x7b2>
 8008104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008106:	930a      	str	r3, [sp, #40]	@ 0x28
 8008108:	2001      	movs	r0, #1
 800810a:	e655      	b.n	8007db8 <_dtoa_r+0x7f8>
 800810c:	9b00      	ldr	r3, [sp, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f77f aed6 	ble.w	8007ec0 <_dtoa_r+0x900>
 8008114:	4656      	mov	r6, sl
 8008116:	4621      	mov	r1, r4
 8008118:	4648      	mov	r0, r9
 800811a:	f7ff f9c8 	bl	80074ae <quorem>
 800811e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008122:	f806 8b01 	strb.w	r8, [r6], #1
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	eba6 020a 	sub.w	r2, r6, sl
 800812c:	4293      	cmp	r3, r2
 800812e:	ddb3      	ble.n	8008098 <_dtoa_r+0xad8>
 8008130:	4649      	mov	r1, r9
 8008132:	2300      	movs	r3, #0
 8008134:	220a      	movs	r2, #10
 8008136:	4658      	mov	r0, fp
 8008138:	f000 f968 	bl	800840c <__multadd>
 800813c:	4681      	mov	r9, r0
 800813e:	e7ea      	b.n	8008116 <_dtoa_r+0xb56>
 8008140:	08009854 	.word	0x08009854
 8008144:	080097d8 	.word	0x080097d8

08008148 <_free_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4605      	mov	r5, r0
 800814c:	2900      	cmp	r1, #0
 800814e:	d041      	beq.n	80081d4 <_free_r+0x8c>
 8008150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008154:	1f0c      	subs	r4, r1, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfb8      	it	lt
 800815a:	18e4      	addlt	r4, r4, r3
 800815c:	f000 f8e8 	bl	8008330 <__malloc_lock>
 8008160:	4a1d      	ldr	r2, [pc, #116]	@ (80081d8 <_free_r+0x90>)
 8008162:	6813      	ldr	r3, [r2, #0]
 8008164:	b933      	cbnz	r3, 8008174 <_free_r+0x2c>
 8008166:	6063      	str	r3, [r4, #4]
 8008168:	6014      	str	r4, [r2, #0]
 800816a:	4628      	mov	r0, r5
 800816c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008170:	f000 b8e4 	b.w	800833c <__malloc_unlock>
 8008174:	42a3      	cmp	r3, r4
 8008176:	d908      	bls.n	800818a <_free_r+0x42>
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	1821      	adds	r1, r4, r0
 800817c:	428b      	cmp	r3, r1
 800817e:	bf01      	itttt	eq
 8008180:	6819      	ldreq	r1, [r3, #0]
 8008182:	685b      	ldreq	r3, [r3, #4]
 8008184:	1809      	addeq	r1, r1, r0
 8008186:	6021      	streq	r1, [r4, #0]
 8008188:	e7ed      	b.n	8008166 <_free_r+0x1e>
 800818a:	461a      	mov	r2, r3
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	b10b      	cbz	r3, 8008194 <_free_r+0x4c>
 8008190:	42a3      	cmp	r3, r4
 8008192:	d9fa      	bls.n	800818a <_free_r+0x42>
 8008194:	6811      	ldr	r1, [r2, #0]
 8008196:	1850      	adds	r0, r2, r1
 8008198:	42a0      	cmp	r0, r4
 800819a:	d10b      	bne.n	80081b4 <_free_r+0x6c>
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	4401      	add	r1, r0
 80081a0:	1850      	adds	r0, r2, r1
 80081a2:	4283      	cmp	r3, r0
 80081a4:	6011      	str	r1, [r2, #0]
 80081a6:	d1e0      	bne.n	800816a <_free_r+0x22>
 80081a8:	6818      	ldr	r0, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	6053      	str	r3, [r2, #4]
 80081ae:	4408      	add	r0, r1
 80081b0:	6010      	str	r0, [r2, #0]
 80081b2:	e7da      	b.n	800816a <_free_r+0x22>
 80081b4:	d902      	bls.n	80081bc <_free_r+0x74>
 80081b6:	230c      	movs	r3, #12
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	e7d6      	b.n	800816a <_free_r+0x22>
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	1821      	adds	r1, r4, r0
 80081c0:	428b      	cmp	r3, r1
 80081c2:	bf04      	itt	eq
 80081c4:	6819      	ldreq	r1, [r3, #0]
 80081c6:	685b      	ldreq	r3, [r3, #4]
 80081c8:	6063      	str	r3, [r4, #4]
 80081ca:	bf04      	itt	eq
 80081cc:	1809      	addeq	r1, r1, r0
 80081ce:	6021      	streq	r1, [r4, #0]
 80081d0:	6054      	str	r4, [r2, #4]
 80081d2:	e7ca      	b.n	800816a <_free_r+0x22>
 80081d4:	bd38      	pop	{r3, r4, r5, pc}
 80081d6:	bf00      	nop
 80081d8:	2000061c 	.word	0x2000061c

080081dc <malloc>:
 80081dc:	4b02      	ldr	r3, [pc, #8]	@ (80081e8 <malloc+0xc>)
 80081de:	4601      	mov	r1, r0
 80081e0:	6818      	ldr	r0, [r3, #0]
 80081e2:	f000 b825 	b.w	8008230 <_malloc_r>
 80081e6:	bf00      	nop
 80081e8:	20000028 	.word	0x20000028

080081ec <sbrk_aligned>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	4e0f      	ldr	r6, [pc, #60]	@ (800822c <sbrk_aligned+0x40>)
 80081f0:	460c      	mov	r4, r1
 80081f2:	6831      	ldr	r1, [r6, #0]
 80081f4:	4605      	mov	r5, r0
 80081f6:	b911      	cbnz	r1, 80081fe <sbrk_aligned+0x12>
 80081f8:	f000 fe46 	bl	8008e88 <_sbrk_r>
 80081fc:	6030      	str	r0, [r6, #0]
 80081fe:	4621      	mov	r1, r4
 8008200:	4628      	mov	r0, r5
 8008202:	f000 fe41 	bl	8008e88 <_sbrk_r>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d103      	bne.n	8008212 <sbrk_aligned+0x26>
 800820a:	f04f 34ff 	mov.w	r4, #4294967295
 800820e:	4620      	mov	r0, r4
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	1cc4      	adds	r4, r0, #3
 8008214:	f024 0403 	bic.w	r4, r4, #3
 8008218:	42a0      	cmp	r0, r4
 800821a:	d0f8      	beq.n	800820e <sbrk_aligned+0x22>
 800821c:	1a21      	subs	r1, r4, r0
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fe32 	bl	8008e88 <_sbrk_r>
 8008224:	3001      	adds	r0, #1
 8008226:	d1f2      	bne.n	800820e <sbrk_aligned+0x22>
 8008228:	e7ef      	b.n	800820a <sbrk_aligned+0x1e>
 800822a:	bf00      	nop
 800822c:	20000618 	.word	0x20000618

08008230 <_malloc_r>:
 8008230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008234:	1ccd      	adds	r5, r1, #3
 8008236:	f025 0503 	bic.w	r5, r5, #3
 800823a:	3508      	adds	r5, #8
 800823c:	2d0c      	cmp	r5, #12
 800823e:	bf38      	it	cc
 8008240:	250c      	movcc	r5, #12
 8008242:	2d00      	cmp	r5, #0
 8008244:	4606      	mov	r6, r0
 8008246:	db01      	blt.n	800824c <_malloc_r+0x1c>
 8008248:	42a9      	cmp	r1, r5
 800824a:	d904      	bls.n	8008256 <_malloc_r+0x26>
 800824c:	230c      	movs	r3, #12
 800824e:	6033      	str	r3, [r6, #0]
 8008250:	2000      	movs	r0, #0
 8008252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008256:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800832c <_malloc_r+0xfc>
 800825a:	f000 f869 	bl	8008330 <__malloc_lock>
 800825e:	f8d8 3000 	ldr.w	r3, [r8]
 8008262:	461c      	mov	r4, r3
 8008264:	bb44      	cbnz	r4, 80082b8 <_malloc_r+0x88>
 8008266:	4629      	mov	r1, r5
 8008268:	4630      	mov	r0, r6
 800826a:	f7ff ffbf 	bl	80081ec <sbrk_aligned>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	4604      	mov	r4, r0
 8008272:	d158      	bne.n	8008326 <_malloc_r+0xf6>
 8008274:	f8d8 4000 	ldr.w	r4, [r8]
 8008278:	4627      	mov	r7, r4
 800827a:	2f00      	cmp	r7, #0
 800827c:	d143      	bne.n	8008306 <_malloc_r+0xd6>
 800827e:	2c00      	cmp	r4, #0
 8008280:	d04b      	beq.n	800831a <_malloc_r+0xea>
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	4639      	mov	r1, r7
 8008286:	4630      	mov	r0, r6
 8008288:	eb04 0903 	add.w	r9, r4, r3
 800828c:	f000 fdfc 	bl	8008e88 <_sbrk_r>
 8008290:	4581      	cmp	r9, r0
 8008292:	d142      	bne.n	800831a <_malloc_r+0xea>
 8008294:	6821      	ldr	r1, [r4, #0]
 8008296:	1a6d      	subs	r5, r5, r1
 8008298:	4629      	mov	r1, r5
 800829a:	4630      	mov	r0, r6
 800829c:	f7ff ffa6 	bl	80081ec <sbrk_aligned>
 80082a0:	3001      	adds	r0, #1
 80082a2:	d03a      	beq.n	800831a <_malloc_r+0xea>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	442b      	add	r3, r5
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	f8d8 3000 	ldr.w	r3, [r8]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	bb62      	cbnz	r2, 800830c <_malloc_r+0xdc>
 80082b2:	f8c8 7000 	str.w	r7, [r8]
 80082b6:	e00f      	b.n	80082d8 <_malloc_r+0xa8>
 80082b8:	6822      	ldr	r2, [r4, #0]
 80082ba:	1b52      	subs	r2, r2, r5
 80082bc:	d420      	bmi.n	8008300 <_malloc_r+0xd0>
 80082be:	2a0b      	cmp	r2, #11
 80082c0:	d917      	bls.n	80082f2 <_malloc_r+0xc2>
 80082c2:	1961      	adds	r1, r4, r5
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	6025      	str	r5, [r4, #0]
 80082c8:	bf18      	it	ne
 80082ca:	6059      	strne	r1, [r3, #4]
 80082cc:	6863      	ldr	r3, [r4, #4]
 80082ce:	bf08      	it	eq
 80082d0:	f8c8 1000 	streq.w	r1, [r8]
 80082d4:	5162      	str	r2, [r4, r5]
 80082d6:	604b      	str	r3, [r1, #4]
 80082d8:	4630      	mov	r0, r6
 80082da:	f000 f82f 	bl	800833c <__malloc_unlock>
 80082de:	f104 000b 	add.w	r0, r4, #11
 80082e2:	1d23      	adds	r3, r4, #4
 80082e4:	f020 0007 	bic.w	r0, r0, #7
 80082e8:	1ac2      	subs	r2, r0, r3
 80082ea:	bf1c      	itt	ne
 80082ec:	1a1b      	subne	r3, r3, r0
 80082ee:	50a3      	strne	r3, [r4, r2]
 80082f0:	e7af      	b.n	8008252 <_malloc_r+0x22>
 80082f2:	6862      	ldr	r2, [r4, #4]
 80082f4:	42a3      	cmp	r3, r4
 80082f6:	bf0c      	ite	eq
 80082f8:	f8c8 2000 	streq.w	r2, [r8]
 80082fc:	605a      	strne	r2, [r3, #4]
 80082fe:	e7eb      	b.n	80082d8 <_malloc_r+0xa8>
 8008300:	4623      	mov	r3, r4
 8008302:	6864      	ldr	r4, [r4, #4]
 8008304:	e7ae      	b.n	8008264 <_malloc_r+0x34>
 8008306:	463c      	mov	r4, r7
 8008308:	687f      	ldr	r7, [r7, #4]
 800830a:	e7b6      	b.n	800827a <_malloc_r+0x4a>
 800830c:	461a      	mov	r2, r3
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	42a3      	cmp	r3, r4
 8008312:	d1fb      	bne.n	800830c <_malloc_r+0xdc>
 8008314:	2300      	movs	r3, #0
 8008316:	6053      	str	r3, [r2, #4]
 8008318:	e7de      	b.n	80082d8 <_malloc_r+0xa8>
 800831a:	230c      	movs	r3, #12
 800831c:	6033      	str	r3, [r6, #0]
 800831e:	4630      	mov	r0, r6
 8008320:	f000 f80c 	bl	800833c <__malloc_unlock>
 8008324:	e794      	b.n	8008250 <_malloc_r+0x20>
 8008326:	6005      	str	r5, [r0, #0]
 8008328:	e7d6      	b.n	80082d8 <_malloc_r+0xa8>
 800832a:	bf00      	nop
 800832c:	2000061c 	.word	0x2000061c

08008330 <__malloc_lock>:
 8008330:	4801      	ldr	r0, [pc, #4]	@ (8008338 <__malloc_lock+0x8>)
 8008332:	f7ff b8ba 	b.w	80074aa <__retarget_lock_acquire_recursive>
 8008336:	bf00      	nop
 8008338:	20000614 	.word	0x20000614

0800833c <__malloc_unlock>:
 800833c:	4801      	ldr	r0, [pc, #4]	@ (8008344 <__malloc_unlock+0x8>)
 800833e:	f7ff b8b5 	b.w	80074ac <__retarget_lock_release_recursive>
 8008342:	bf00      	nop
 8008344:	20000614 	.word	0x20000614

08008348 <_Balloc>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	69c6      	ldr	r6, [r0, #28]
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	b976      	cbnz	r6, 8008370 <_Balloc+0x28>
 8008352:	2010      	movs	r0, #16
 8008354:	f7ff ff42 	bl	80081dc <malloc>
 8008358:	4602      	mov	r2, r0
 800835a:	61e0      	str	r0, [r4, #28]
 800835c:	b920      	cbnz	r0, 8008368 <_Balloc+0x20>
 800835e:	4b18      	ldr	r3, [pc, #96]	@ (80083c0 <_Balloc+0x78>)
 8008360:	4818      	ldr	r0, [pc, #96]	@ (80083c4 <_Balloc+0x7c>)
 8008362:	216b      	movs	r1, #107	@ 0x6b
 8008364:	f000 fdae 	bl	8008ec4 <__assert_func>
 8008368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800836c:	6006      	str	r6, [r0, #0]
 800836e:	60c6      	str	r6, [r0, #12]
 8008370:	69e6      	ldr	r6, [r4, #28]
 8008372:	68f3      	ldr	r3, [r6, #12]
 8008374:	b183      	cbz	r3, 8008398 <_Balloc+0x50>
 8008376:	69e3      	ldr	r3, [r4, #28]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800837e:	b9b8      	cbnz	r0, 80083b0 <_Balloc+0x68>
 8008380:	2101      	movs	r1, #1
 8008382:	fa01 f605 	lsl.w	r6, r1, r5
 8008386:	1d72      	adds	r2, r6, #5
 8008388:	0092      	lsls	r2, r2, #2
 800838a:	4620      	mov	r0, r4
 800838c:	f000 fdb8 	bl	8008f00 <_calloc_r>
 8008390:	b160      	cbz	r0, 80083ac <_Balloc+0x64>
 8008392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008396:	e00e      	b.n	80083b6 <_Balloc+0x6e>
 8008398:	2221      	movs	r2, #33	@ 0x21
 800839a:	2104      	movs	r1, #4
 800839c:	4620      	mov	r0, r4
 800839e:	f000 fdaf 	bl	8008f00 <_calloc_r>
 80083a2:	69e3      	ldr	r3, [r4, #28]
 80083a4:	60f0      	str	r0, [r6, #12]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e4      	bne.n	8008376 <_Balloc+0x2e>
 80083ac:	2000      	movs	r0, #0
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	6802      	ldr	r2, [r0, #0]
 80083b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083b6:	2300      	movs	r3, #0
 80083b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083bc:	e7f7      	b.n	80083ae <_Balloc+0x66>
 80083be:	bf00      	nop
 80083c0:	080097e5 	.word	0x080097e5
 80083c4:	08009865 	.word	0x08009865

080083c8 <_Bfree>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	69c6      	ldr	r6, [r0, #28]
 80083cc:	4605      	mov	r5, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	b976      	cbnz	r6, 80083f0 <_Bfree+0x28>
 80083d2:	2010      	movs	r0, #16
 80083d4:	f7ff ff02 	bl	80081dc <malloc>
 80083d8:	4602      	mov	r2, r0
 80083da:	61e8      	str	r0, [r5, #28]
 80083dc:	b920      	cbnz	r0, 80083e8 <_Bfree+0x20>
 80083de:	4b09      	ldr	r3, [pc, #36]	@ (8008404 <_Bfree+0x3c>)
 80083e0:	4809      	ldr	r0, [pc, #36]	@ (8008408 <_Bfree+0x40>)
 80083e2:	218f      	movs	r1, #143	@ 0x8f
 80083e4:	f000 fd6e 	bl	8008ec4 <__assert_func>
 80083e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083ec:	6006      	str	r6, [r0, #0]
 80083ee:	60c6      	str	r6, [r0, #12]
 80083f0:	b13c      	cbz	r4, 8008402 <_Bfree+0x3a>
 80083f2:	69eb      	ldr	r3, [r5, #28]
 80083f4:	6862      	ldr	r2, [r4, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083fc:	6021      	str	r1, [r4, #0]
 80083fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	080097e5 	.word	0x080097e5
 8008408:	08009865 	.word	0x08009865

0800840c <__multadd>:
 800840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008410:	690d      	ldr	r5, [r1, #16]
 8008412:	4607      	mov	r7, r0
 8008414:	460c      	mov	r4, r1
 8008416:	461e      	mov	r6, r3
 8008418:	f101 0c14 	add.w	ip, r1, #20
 800841c:	2000      	movs	r0, #0
 800841e:	f8dc 3000 	ldr.w	r3, [ip]
 8008422:	b299      	uxth	r1, r3
 8008424:	fb02 6101 	mla	r1, r2, r1, r6
 8008428:	0c1e      	lsrs	r6, r3, #16
 800842a:	0c0b      	lsrs	r3, r1, #16
 800842c:	fb02 3306 	mla	r3, r2, r6, r3
 8008430:	b289      	uxth	r1, r1
 8008432:	3001      	adds	r0, #1
 8008434:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008438:	4285      	cmp	r5, r0
 800843a:	f84c 1b04 	str.w	r1, [ip], #4
 800843e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008442:	dcec      	bgt.n	800841e <__multadd+0x12>
 8008444:	b30e      	cbz	r6, 800848a <__multadd+0x7e>
 8008446:	68a3      	ldr	r3, [r4, #8]
 8008448:	42ab      	cmp	r3, r5
 800844a:	dc19      	bgt.n	8008480 <__multadd+0x74>
 800844c:	6861      	ldr	r1, [r4, #4]
 800844e:	4638      	mov	r0, r7
 8008450:	3101      	adds	r1, #1
 8008452:	f7ff ff79 	bl	8008348 <_Balloc>
 8008456:	4680      	mov	r8, r0
 8008458:	b928      	cbnz	r0, 8008466 <__multadd+0x5a>
 800845a:	4602      	mov	r2, r0
 800845c:	4b0c      	ldr	r3, [pc, #48]	@ (8008490 <__multadd+0x84>)
 800845e:	480d      	ldr	r0, [pc, #52]	@ (8008494 <__multadd+0x88>)
 8008460:	21ba      	movs	r1, #186	@ 0xba
 8008462:	f000 fd2f 	bl	8008ec4 <__assert_func>
 8008466:	6922      	ldr	r2, [r4, #16]
 8008468:	3202      	adds	r2, #2
 800846a:	f104 010c 	add.w	r1, r4, #12
 800846e:	0092      	lsls	r2, r2, #2
 8008470:	300c      	adds	r0, #12
 8008472:	f000 fd19 	bl	8008ea8 <memcpy>
 8008476:	4621      	mov	r1, r4
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff ffa5 	bl	80083c8 <_Bfree>
 800847e:	4644      	mov	r4, r8
 8008480:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008484:	3501      	adds	r5, #1
 8008486:	615e      	str	r6, [r3, #20]
 8008488:	6125      	str	r5, [r4, #16]
 800848a:	4620      	mov	r0, r4
 800848c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008490:	08009854 	.word	0x08009854
 8008494:	08009865 	.word	0x08009865

08008498 <__hi0bits>:
 8008498:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800849c:	4603      	mov	r3, r0
 800849e:	bf36      	itet	cc
 80084a0:	0403      	lslcc	r3, r0, #16
 80084a2:	2000      	movcs	r0, #0
 80084a4:	2010      	movcc	r0, #16
 80084a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084aa:	bf3c      	itt	cc
 80084ac:	021b      	lslcc	r3, r3, #8
 80084ae:	3008      	addcc	r0, #8
 80084b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084b4:	bf3c      	itt	cc
 80084b6:	011b      	lslcc	r3, r3, #4
 80084b8:	3004      	addcc	r0, #4
 80084ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084be:	bf3c      	itt	cc
 80084c0:	009b      	lslcc	r3, r3, #2
 80084c2:	3002      	addcc	r0, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	db05      	blt.n	80084d4 <__hi0bits+0x3c>
 80084c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80084cc:	f100 0001 	add.w	r0, r0, #1
 80084d0:	bf08      	it	eq
 80084d2:	2020      	moveq	r0, #32
 80084d4:	4770      	bx	lr

080084d6 <__lo0bits>:
 80084d6:	6803      	ldr	r3, [r0, #0]
 80084d8:	4602      	mov	r2, r0
 80084da:	f013 0007 	ands.w	r0, r3, #7
 80084de:	d00b      	beq.n	80084f8 <__lo0bits+0x22>
 80084e0:	07d9      	lsls	r1, r3, #31
 80084e2:	d421      	bmi.n	8008528 <__lo0bits+0x52>
 80084e4:	0798      	lsls	r0, r3, #30
 80084e6:	bf49      	itett	mi
 80084e8:	085b      	lsrmi	r3, r3, #1
 80084ea:	089b      	lsrpl	r3, r3, #2
 80084ec:	2001      	movmi	r0, #1
 80084ee:	6013      	strmi	r3, [r2, #0]
 80084f0:	bf5c      	itt	pl
 80084f2:	6013      	strpl	r3, [r2, #0]
 80084f4:	2002      	movpl	r0, #2
 80084f6:	4770      	bx	lr
 80084f8:	b299      	uxth	r1, r3
 80084fa:	b909      	cbnz	r1, 8008500 <__lo0bits+0x2a>
 80084fc:	0c1b      	lsrs	r3, r3, #16
 80084fe:	2010      	movs	r0, #16
 8008500:	b2d9      	uxtb	r1, r3
 8008502:	b909      	cbnz	r1, 8008508 <__lo0bits+0x32>
 8008504:	3008      	adds	r0, #8
 8008506:	0a1b      	lsrs	r3, r3, #8
 8008508:	0719      	lsls	r1, r3, #28
 800850a:	bf04      	itt	eq
 800850c:	091b      	lsreq	r3, r3, #4
 800850e:	3004      	addeq	r0, #4
 8008510:	0799      	lsls	r1, r3, #30
 8008512:	bf04      	itt	eq
 8008514:	089b      	lsreq	r3, r3, #2
 8008516:	3002      	addeq	r0, #2
 8008518:	07d9      	lsls	r1, r3, #31
 800851a:	d403      	bmi.n	8008524 <__lo0bits+0x4e>
 800851c:	085b      	lsrs	r3, r3, #1
 800851e:	f100 0001 	add.w	r0, r0, #1
 8008522:	d003      	beq.n	800852c <__lo0bits+0x56>
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	4770      	bx	lr
 8008528:	2000      	movs	r0, #0
 800852a:	4770      	bx	lr
 800852c:	2020      	movs	r0, #32
 800852e:	4770      	bx	lr

08008530 <__i2b>:
 8008530:	b510      	push	{r4, lr}
 8008532:	460c      	mov	r4, r1
 8008534:	2101      	movs	r1, #1
 8008536:	f7ff ff07 	bl	8008348 <_Balloc>
 800853a:	4602      	mov	r2, r0
 800853c:	b928      	cbnz	r0, 800854a <__i2b+0x1a>
 800853e:	4b05      	ldr	r3, [pc, #20]	@ (8008554 <__i2b+0x24>)
 8008540:	4805      	ldr	r0, [pc, #20]	@ (8008558 <__i2b+0x28>)
 8008542:	f240 1145 	movw	r1, #325	@ 0x145
 8008546:	f000 fcbd 	bl	8008ec4 <__assert_func>
 800854a:	2301      	movs	r3, #1
 800854c:	6144      	str	r4, [r0, #20]
 800854e:	6103      	str	r3, [r0, #16]
 8008550:	bd10      	pop	{r4, pc}
 8008552:	bf00      	nop
 8008554:	08009854 	.word	0x08009854
 8008558:	08009865 	.word	0x08009865

0800855c <__multiply>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	4614      	mov	r4, r2
 8008562:	690a      	ldr	r2, [r1, #16]
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	429a      	cmp	r2, r3
 8008568:	bfa8      	it	ge
 800856a:	4623      	movge	r3, r4
 800856c:	460f      	mov	r7, r1
 800856e:	bfa4      	itt	ge
 8008570:	460c      	movge	r4, r1
 8008572:	461f      	movge	r7, r3
 8008574:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008578:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800857c:	68a3      	ldr	r3, [r4, #8]
 800857e:	6861      	ldr	r1, [r4, #4]
 8008580:	eb0a 0609 	add.w	r6, sl, r9
 8008584:	42b3      	cmp	r3, r6
 8008586:	b085      	sub	sp, #20
 8008588:	bfb8      	it	lt
 800858a:	3101      	addlt	r1, #1
 800858c:	f7ff fedc 	bl	8008348 <_Balloc>
 8008590:	b930      	cbnz	r0, 80085a0 <__multiply+0x44>
 8008592:	4602      	mov	r2, r0
 8008594:	4b44      	ldr	r3, [pc, #272]	@ (80086a8 <__multiply+0x14c>)
 8008596:	4845      	ldr	r0, [pc, #276]	@ (80086ac <__multiply+0x150>)
 8008598:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800859c:	f000 fc92 	bl	8008ec4 <__assert_func>
 80085a0:	f100 0514 	add.w	r5, r0, #20
 80085a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085a8:	462b      	mov	r3, r5
 80085aa:	2200      	movs	r2, #0
 80085ac:	4543      	cmp	r3, r8
 80085ae:	d321      	bcc.n	80085f4 <__multiply+0x98>
 80085b0:	f107 0114 	add.w	r1, r7, #20
 80085b4:	f104 0214 	add.w	r2, r4, #20
 80085b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80085bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80085c0:	9302      	str	r3, [sp, #8]
 80085c2:	1b13      	subs	r3, r2, r4
 80085c4:	3b15      	subs	r3, #21
 80085c6:	f023 0303 	bic.w	r3, r3, #3
 80085ca:	3304      	adds	r3, #4
 80085cc:	f104 0715 	add.w	r7, r4, #21
 80085d0:	42ba      	cmp	r2, r7
 80085d2:	bf38      	it	cc
 80085d4:	2304      	movcc	r3, #4
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	9b02      	ldr	r3, [sp, #8]
 80085da:	9103      	str	r1, [sp, #12]
 80085dc:	428b      	cmp	r3, r1
 80085de:	d80c      	bhi.n	80085fa <__multiply+0x9e>
 80085e0:	2e00      	cmp	r6, #0
 80085e2:	dd03      	ble.n	80085ec <__multiply+0x90>
 80085e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d05b      	beq.n	80086a4 <__multiply+0x148>
 80085ec:	6106      	str	r6, [r0, #16]
 80085ee:	b005      	add	sp, #20
 80085f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f4:	f843 2b04 	str.w	r2, [r3], #4
 80085f8:	e7d8      	b.n	80085ac <__multiply+0x50>
 80085fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80085fe:	f1ba 0f00 	cmp.w	sl, #0
 8008602:	d024      	beq.n	800864e <__multiply+0xf2>
 8008604:	f104 0e14 	add.w	lr, r4, #20
 8008608:	46a9      	mov	r9, r5
 800860a:	f04f 0c00 	mov.w	ip, #0
 800860e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008612:	f8d9 3000 	ldr.w	r3, [r9]
 8008616:	fa1f fb87 	uxth.w	fp, r7
 800861a:	b29b      	uxth	r3, r3
 800861c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008620:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008624:	f8d9 7000 	ldr.w	r7, [r9]
 8008628:	4463      	add	r3, ip
 800862a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800862e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008632:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008636:	b29b      	uxth	r3, r3
 8008638:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800863c:	4572      	cmp	r2, lr
 800863e:	f849 3b04 	str.w	r3, [r9], #4
 8008642:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008646:	d8e2      	bhi.n	800860e <__multiply+0xb2>
 8008648:	9b01      	ldr	r3, [sp, #4]
 800864a:	f845 c003 	str.w	ip, [r5, r3]
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008654:	3104      	adds	r1, #4
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	d021      	beq.n	80086a0 <__multiply+0x144>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	f104 0c14 	add.w	ip, r4, #20
 8008662:	46ae      	mov	lr, r5
 8008664:	f04f 0a00 	mov.w	sl, #0
 8008668:	f8bc b000 	ldrh.w	fp, [ip]
 800866c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008670:	fb09 770b 	mla	r7, r9, fp, r7
 8008674:	4457      	add	r7, sl
 8008676:	b29b      	uxth	r3, r3
 8008678:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800867c:	f84e 3b04 	str.w	r3, [lr], #4
 8008680:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008684:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008688:	f8be 3000 	ldrh.w	r3, [lr]
 800868c:	fb09 330a 	mla	r3, r9, sl, r3
 8008690:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008694:	4562      	cmp	r2, ip
 8008696:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800869a:	d8e5      	bhi.n	8008668 <__multiply+0x10c>
 800869c:	9f01      	ldr	r7, [sp, #4]
 800869e:	51eb      	str	r3, [r5, r7]
 80086a0:	3504      	adds	r5, #4
 80086a2:	e799      	b.n	80085d8 <__multiply+0x7c>
 80086a4:	3e01      	subs	r6, #1
 80086a6:	e79b      	b.n	80085e0 <__multiply+0x84>
 80086a8:	08009854 	.word	0x08009854
 80086ac:	08009865 	.word	0x08009865

080086b0 <__pow5mult>:
 80086b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b4:	4615      	mov	r5, r2
 80086b6:	f012 0203 	ands.w	r2, r2, #3
 80086ba:	4607      	mov	r7, r0
 80086bc:	460e      	mov	r6, r1
 80086be:	d007      	beq.n	80086d0 <__pow5mult+0x20>
 80086c0:	4c25      	ldr	r4, [pc, #148]	@ (8008758 <__pow5mult+0xa8>)
 80086c2:	3a01      	subs	r2, #1
 80086c4:	2300      	movs	r3, #0
 80086c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086ca:	f7ff fe9f 	bl	800840c <__multadd>
 80086ce:	4606      	mov	r6, r0
 80086d0:	10ad      	asrs	r5, r5, #2
 80086d2:	d03d      	beq.n	8008750 <__pow5mult+0xa0>
 80086d4:	69fc      	ldr	r4, [r7, #28]
 80086d6:	b97c      	cbnz	r4, 80086f8 <__pow5mult+0x48>
 80086d8:	2010      	movs	r0, #16
 80086da:	f7ff fd7f 	bl	80081dc <malloc>
 80086de:	4602      	mov	r2, r0
 80086e0:	61f8      	str	r0, [r7, #28]
 80086e2:	b928      	cbnz	r0, 80086f0 <__pow5mult+0x40>
 80086e4:	4b1d      	ldr	r3, [pc, #116]	@ (800875c <__pow5mult+0xac>)
 80086e6:	481e      	ldr	r0, [pc, #120]	@ (8008760 <__pow5mult+0xb0>)
 80086e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80086ec:	f000 fbea 	bl	8008ec4 <__assert_func>
 80086f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086f4:	6004      	str	r4, [r0, #0]
 80086f6:	60c4      	str	r4, [r0, #12]
 80086f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80086fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008700:	b94c      	cbnz	r4, 8008716 <__pow5mult+0x66>
 8008702:	f240 2171 	movw	r1, #625	@ 0x271
 8008706:	4638      	mov	r0, r7
 8008708:	f7ff ff12 	bl	8008530 <__i2b>
 800870c:	2300      	movs	r3, #0
 800870e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008712:	4604      	mov	r4, r0
 8008714:	6003      	str	r3, [r0, #0]
 8008716:	f04f 0900 	mov.w	r9, #0
 800871a:	07eb      	lsls	r3, r5, #31
 800871c:	d50a      	bpl.n	8008734 <__pow5mult+0x84>
 800871e:	4631      	mov	r1, r6
 8008720:	4622      	mov	r2, r4
 8008722:	4638      	mov	r0, r7
 8008724:	f7ff ff1a 	bl	800855c <__multiply>
 8008728:	4631      	mov	r1, r6
 800872a:	4680      	mov	r8, r0
 800872c:	4638      	mov	r0, r7
 800872e:	f7ff fe4b 	bl	80083c8 <_Bfree>
 8008732:	4646      	mov	r6, r8
 8008734:	106d      	asrs	r5, r5, #1
 8008736:	d00b      	beq.n	8008750 <__pow5mult+0xa0>
 8008738:	6820      	ldr	r0, [r4, #0]
 800873a:	b938      	cbnz	r0, 800874c <__pow5mult+0x9c>
 800873c:	4622      	mov	r2, r4
 800873e:	4621      	mov	r1, r4
 8008740:	4638      	mov	r0, r7
 8008742:	f7ff ff0b 	bl	800855c <__multiply>
 8008746:	6020      	str	r0, [r4, #0]
 8008748:	f8c0 9000 	str.w	r9, [r0]
 800874c:	4604      	mov	r4, r0
 800874e:	e7e4      	b.n	800871a <__pow5mult+0x6a>
 8008750:	4630      	mov	r0, r6
 8008752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008756:	bf00      	nop
 8008758:	080098c0 	.word	0x080098c0
 800875c:	080097e5 	.word	0x080097e5
 8008760:	08009865 	.word	0x08009865

08008764 <__lshift>:
 8008764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	460c      	mov	r4, r1
 800876a:	6849      	ldr	r1, [r1, #4]
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008772:	68a3      	ldr	r3, [r4, #8]
 8008774:	4607      	mov	r7, r0
 8008776:	4691      	mov	r9, r2
 8008778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800877c:	f108 0601 	add.w	r6, r8, #1
 8008780:	42b3      	cmp	r3, r6
 8008782:	db0b      	blt.n	800879c <__lshift+0x38>
 8008784:	4638      	mov	r0, r7
 8008786:	f7ff fddf 	bl	8008348 <_Balloc>
 800878a:	4605      	mov	r5, r0
 800878c:	b948      	cbnz	r0, 80087a2 <__lshift+0x3e>
 800878e:	4602      	mov	r2, r0
 8008790:	4b28      	ldr	r3, [pc, #160]	@ (8008834 <__lshift+0xd0>)
 8008792:	4829      	ldr	r0, [pc, #164]	@ (8008838 <__lshift+0xd4>)
 8008794:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008798:	f000 fb94 	bl	8008ec4 <__assert_func>
 800879c:	3101      	adds	r1, #1
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	e7ee      	b.n	8008780 <__lshift+0x1c>
 80087a2:	2300      	movs	r3, #0
 80087a4:	f100 0114 	add.w	r1, r0, #20
 80087a8:	f100 0210 	add.w	r2, r0, #16
 80087ac:	4618      	mov	r0, r3
 80087ae:	4553      	cmp	r3, sl
 80087b0:	db33      	blt.n	800881a <__lshift+0xb6>
 80087b2:	6920      	ldr	r0, [r4, #16]
 80087b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087b8:	f104 0314 	add.w	r3, r4, #20
 80087bc:	f019 091f 	ands.w	r9, r9, #31
 80087c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087c8:	d02b      	beq.n	8008822 <__lshift+0xbe>
 80087ca:	f1c9 0e20 	rsb	lr, r9, #32
 80087ce:	468a      	mov	sl, r1
 80087d0:	2200      	movs	r2, #0
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	fa00 f009 	lsl.w	r0, r0, r9
 80087d8:	4310      	orrs	r0, r2
 80087da:	f84a 0b04 	str.w	r0, [sl], #4
 80087de:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e2:	459c      	cmp	ip, r3
 80087e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80087e8:	d8f3      	bhi.n	80087d2 <__lshift+0x6e>
 80087ea:	ebac 0304 	sub.w	r3, ip, r4
 80087ee:	3b15      	subs	r3, #21
 80087f0:	f023 0303 	bic.w	r3, r3, #3
 80087f4:	3304      	adds	r3, #4
 80087f6:	f104 0015 	add.w	r0, r4, #21
 80087fa:	4584      	cmp	ip, r0
 80087fc:	bf38      	it	cc
 80087fe:	2304      	movcc	r3, #4
 8008800:	50ca      	str	r2, [r1, r3]
 8008802:	b10a      	cbz	r2, 8008808 <__lshift+0xa4>
 8008804:	f108 0602 	add.w	r6, r8, #2
 8008808:	3e01      	subs	r6, #1
 800880a:	4638      	mov	r0, r7
 800880c:	612e      	str	r6, [r5, #16]
 800880e:	4621      	mov	r1, r4
 8008810:	f7ff fdda 	bl	80083c8 <_Bfree>
 8008814:	4628      	mov	r0, r5
 8008816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881a:	f842 0f04 	str.w	r0, [r2, #4]!
 800881e:	3301      	adds	r3, #1
 8008820:	e7c5      	b.n	80087ae <__lshift+0x4a>
 8008822:	3904      	subs	r1, #4
 8008824:	f853 2b04 	ldr.w	r2, [r3], #4
 8008828:	f841 2f04 	str.w	r2, [r1, #4]!
 800882c:	459c      	cmp	ip, r3
 800882e:	d8f9      	bhi.n	8008824 <__lshift+0xc0>
 8008830:	e7ea      	b.n	8008808 <__lshift+0xa4>
 8008832:	bf00      	nop
 8008834:	08009854 	.word	0x08009854
 8008838:	08009865 	.word	0x08009865

0800883c <__mcmp>:
 800883c:	690a      	ldr	r2, [r1, #16]
 800883e:	4603      	mov	r3, r0
 8008840:	6900      	ldr	r0, [r0, #16]
 8008842:	1a80      	subs	r0, r0, r2
 8008844:	b530      	push	{r4, r5, lr}
 8008846:	d10e      	bne.n	8008866 <__mcmp+0x2a>
 8008848:	3314      	adds	r3, #20
 800884a:	3114      	adds	r1, #20
 800884c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008850:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008854:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008858:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800885c:	4295      	cmp	r5, r2
 800885e:	d003      	beq.n	8008868 <__mcmp+0x2c>
 8008860:	d205      	bcs.n	800886e <__mcmp+0x32>
 8008862:	f04f 30ff 	mov.w	r0, #4294967295
 8008866:	bd30      	pop	{r4, r5, pc}
 8008868:	42a3      	cmp	r3, r4
 800886a:	d3f3      	bcc.n	8008854 <__mcmp+0x18>
 800886c:	e7fb      	b.n	8008866 <__mcmp+0x2a>
 800886e:	2001      	movs	r0, #1
 8008870:	e7f9      	b.n	8008866 <__mcmp+0x2a>
	...

08008874 <__mdiff>:
 8008874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	4689      	mov	r9, r1
 800887a:	4606      	mov	r6, r0
 800887c:	4611      	mov	r1, r2
 800887e:	4648      	mov	r0, r9
 8008880:	4614      	mov	r4, r2
 8008882:	f7ff ffdb 	bl	800883c <__mcmp>
 8008886:	1e05      	subs	r5, r0, #0
 8008888:	d112      	bne.n	80088b0 <__mdiff+0x3c>
 800888a:	4629      	mov	r1, r5
 800888c:	4630      	mov	r0, r6
 800888e:	f7ff fd5b 	bl	8008348 <_Balloc>
 8008892:	4602      	mov	r2, r0
 8008894:	b928      	cbnz	r0, 80088a2 <__mdiff+0x2e>
 8008896:	4b3f      	ldr	r3, [pc, #252]	@ (8008994 <__mdiff+0x120>)
 8008898:	f240 2137 	movw	r1, #567	@ 0x237
 800889c:	483e      	ldr	r0, [pc, #248]	@ (8008998 <__mdiff+0x124>)
 800889e:	f000 fb11 	bl	8008ec4 <__assert_func>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088a8:	4610      	mov	r0, r2
 80088aa:	b003      	add	sp, #12
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	bfbc      	itt	lt
 80088b2:	464b      	movlt	r3, r9
 80088b4:	46a1      	movlt	r9, r4
 80088b6:	4630      	mov	r0, r6
 80088b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80088bc:	bfba      	itte	lt
 80088be:	461c      	movlt	r4, r3
 80088c0:	2501      	movlt	r5, #1
 80088c2:	2500      	movge	r5, #0
 80088c4:	f7ff fd40 	bl	8008348 <_Balloc>
 80088c8:	4602      	mov	r2, r0
 80088ca:	b918      	cbnz	r0, 80088d4 <__mdiff+0x60>
 80088cc:	4b31      	ldr	r3, [pc, #196]	@ (8008994 <__mdiff+0x120>)
 80088ce:	f240 2145 	movw	r1, #581	@ 0x245
 80088d2:	e7e3      	b.n	800889c <__mdiff+0x28>
 80088d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80088d8:	6926      	ldr	r6, [r4, #16]
 80088da:	60c5      	str	r5, [r0, #12]
 80088dc:	f109 0310 	add.w	r3, r9, #16
 80088e0:	f109 0514 	add.w	r5, r9, #20
 80088e4:	f104 0e14 	add.w	lr, r4, #20
 80088e8:	f100 0b14 	add.w	fp, r0, #20
 80088ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80088f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	46d9      	mov	r9, fp
 80088f8:	f04f 0c00 	mov.w	ip, #0
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008902:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	fa1f f38a 	uxth.w	r3, sl
 800890c:	4619      	mov	r1, r3
 800890e:	b283      	uxth	r3, r0
 8008910:	1acb      	subs	r3, r1, r3
 8008912:	0c00      	lsrs	r0, r0, #16
 8008914:	4463      	add	r3, ip
 8008916:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800891a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800891e:	b29b      	uxth	r3, r3
 8008920:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008924:	4576      	cmp	r6, lr
 8008926:	f849 3b04 	str.w	r3, [r9], #4
 800892a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800892e:	d8e5      	bhi.n	80088fc <__mdiff+0x88>
 8008930:	1b33      	subs	r3, r6, r4
 8008932:	3b15      	subs	r3, #21
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	3415      	adds	r4, #21
 800893a:	3304      	adds	r3, #4
 800893c:	42a6      	cmp	r6, r4
 800893e:	bf38      	it	cc
 8008940:	2304      	movcc	r3, #4
 8008942:	441d      	add	r5, r3
 8008944:	445b      	add	r3, fp
 8008946:	461e      	mov	r6, r3
 8008948:	462c      	mov	r4, r5
 800894a:	4544      	cmp	r4, r8
 800894c:	d30e      	bcc.n	800896c <__mdiff+0xf8>
 800894e:	f108 0103 	add.w	r1, r8, #3
 8008952:	1b49      	subs	r1, r1, r5
 8008954:	f021 0103 	bic.w	r1, r1, #3
 8008958:	3d03      	subs	r5, #3
 800895a:	45a8      	cmp	r8, r5
 800895c:	bf38      	it	cc
 800895e:	2100      	movcc	r1, #0
 8008960:	440b      	add	r3, r1
 8008962:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008966:	b191      	cbz	r1, 800898e <__mdiff+0x11a>
 8008968:	6117      	str	r7, [r2, #16]
 800896a:	e79d      	b.n	80088a8 <__mdiff+0x34>
 800896c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008970:	46e6      	mov	lr, ip
 8008972:	0c08      	lsrs	r0, r1, #16
 8008974:	fa1c fc81 	uxtah	ip, ip, r1
 8008978:	4471      	add	r1, lr
 800897a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800897e:	b289      	uxth	r1, r1
 8008980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008984:	f846 1b04 	str.w	r1, [r6], #4
 8008988:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800898c:	e7dd      	b.n	800894a <__mdiff+0xd6>
 800898e:	3f01      	subs	r7, #1
 8008990:	e7e7      	b.n	8008962 <__mdiff+0xee>
 8008992:	bf00      	nop
 8008994:	08009854 	.word	0x08009854
 8008998:	08009865 	.word	0x08009865

0800899c <__d2b>:
 800899c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089a0:	460f      	mov	r7, r1
 80089a2:	2101      	movs	r1, #1
 80089a4:	ec59 8b10 	vmov	r8, r9, d0
 80089a8:	4616      	mov	r6, r2
 80089aa:	f7ff fccd 	bl	8008348 <_Balloc>
 80089ae:	4604      	mov	r4, r0
 80089b0:	b930      	cbnz	r0, 80089c0 <__d2b+0x24>
 80089b2:	4602      	mov	r2, r0
 80089b4:	4b23      	ldr	r3, [pc, #140]	@ (8008a44 <__d2b+0xa8>)
 80089b6:	4824      	ldr	r0, [pc, #144]	@ (8008a48 <__d2b+0xac>)
 80089b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80089bc:	f000 fa82 	bl	8008ec4 <__assert_func>
 80089c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089c8:	b10d      	cbz	r5, 80089ce <__d2b+0x32>
 80089ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	f1b8 0300 	subs.w	r3, r8, #0
 80089d4:	d023      	beq.n	8008a1e <__d2b+0x82>
 80089d6:	4668      	mov	r0, sp
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	f7ff fd7c 	bl	80084d6 <__lo0bits>
 80089de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089e2:	b1d0      	cbz	r0, 8008a1a <__d2b+0x7e>
 80089e4:	f1c0 0320 	rsb	r3, r0, #32
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	430b      	orrs	r3, r1
 80089ee:	40c2      	lsrs	r2, r0
 80089f0:	6163      	str	r3, [r4, #20]
 80089f2:	9201      	str	r2, [sp, #4]
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	61a3      	str	r3, [r4, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	bf0c      	ite	eq
 80089fc:	2201      	moveq	r2, #1
 80089fe:	2202      	movne	r2, #2
 8008a00:	6122      	str	r2, [r4, #16]
 8008a02:	b1a5      	cbz	r5, 8008a2e <__d2b+0x92>
 8008a04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a08:	4405      	add	r5, r0
 8008a0a:	603d      	str	r5, [r7, #0]
 8008a0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a10:	6030      	str	r0, [r6, #0]
 8008a12:	4620      	mov	r0, r4
 8008a14:	b003      	add	sp, #12
 8008a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a1a:	6161      	str	r1, [r4, #20]
 8008a1c:	e7ea      	b.n	80089f4 <__d2b+0x58>
 8008a1e:	a801      	add	r0, sp, #4
 8008a20:	f7ff fd59 	bl	80084d6 <__lo0bits>
 8008a24:	9b01      	ldr	r3, [sp, #4]
 8008a26:	6163      	str	r3, [r4, #20]
 8008a28:	3020      	adds	r0, #32
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	e7e8      	b.n	8008a00 <__d2b+0x64>
 8008a2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a36:	6038      	str	r0, [r7, #0]
 8008a38:	6918      	ldr	r0, [r3, #16]
 8008a3a:	f7ff fd2d 	bl	8008498 <__hi0bits>
 8008a3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a42:	e7e5      	b.n	8008a10 <__d2b+0x74>
 8008a44:	08009854 	.word	0x08009854
 8008a48:	08009865 	.word	0x08009865

08008a4c <__ssputs_r>:
 8008a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a50:	688e      	ldr	r6, [r1, #8]
 8008a52:	461f      	mov	r7, r3
 8008a54:	42be      	cmp	r6, r7
 8008a56:	680b      	ldr	r3, [r1, #0]
 8008a58:	4682      	mov	sl, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	4690      	mov	r8, r2
 8008a5e:	d82d      	bhi.n	8008abc <__ssputs_r+0x70>
 8008a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a68:	d026      	beq.n	8008ab8 <__ssputs_r+0x6c>
 8008a6a:	6965      	ldr	r5, [r4, #20]
 8008a6c:	6909      	ldr	r1, [r1, #16]
 8008a6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a72:	eba3 0901 	sub.w	r9, r3, r1
 8008a76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a7a:	1c7b      	adds	r3, r7, #1
 8008a7c:	444b      	add	r3, r9
 8008a7e:	106d      	asrs	r5, r5, #1
 8008a80:	429d      	cmp	r5, r3
 8008a82:	bf38      	it	cc
 8008a84:	461d      	movcc	r5, r3
 8008a86:	0553      	lsls	r3, r2, #21
 8008a88:	d527      	bpl.n	8008ada <__ssputs_r+0x8e>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	f7ff fbd0 	bl	8008230 <_malloc_r>
 8008a90:	4606      	mov	r6, r0
 8008a92:	b360      	cbz	r0, 8008aee <__ssputs_r+0xa2>
 8008a94:	6921      	ldr	r1, [r4, #16]
 8008a96:	464a      	mov	r2, r9
 8008a98:	f000 fa06 	bl	8008ea8 <memcpy>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aa6:	81a3      	strh	r3, [r4, #12]
 8008aa8:	6126      	str	r6, [r4, #16]
 8008aaa:	6165      	str	r5, [r4, #20]
 8008aac:	444e      	add	r6, r9
 8008aae:	eba5 0509 	sub.w	r5, r5, r9
 8008ab2:	6026      	str	r6, [r4, #0]
 8008ab4:	60a5      	str	r5, [r4, #8]
 8008ab6:	463e      	mov	r6, r7
 8008ab8:	42be      	cmp	r6, r7
 8008aba:	d900      	bls.n	8008abe <__ssputs_r+0x72>
 8008abc:	463e      	mov	r6, r7
 8008abe:	6820      	ldr	r0, [r4, #0]
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	4641      	mov	r1, r8
 8008ac4:	f000 f9c6 	bl	8008e54 <memmove>
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	1b9b      	subs	r3, r3, r6
 8008acc:	60a3      	str	r3, [r4, #8]
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	4433      	add	r3, r6
 8008ad2:	6023      	str	r3, [r4, #0]
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ada:	462a      	mov	r2, r5
 8008adc:	f000 fa36 	bl	8008f4c <_realloc_r>
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d1e0      	bne.n	8008aa8 <__ssputs_r+0x5c>
 8008ae6:	6921      	ldr	r1, [r4, #16]
 8008ae8:	4650      	mov	r0, sl
 8008aea:	f7ff fb2d 	bl	8008148 <_free_r>
 8008aee:	230c      	movs	r3, #12
 8008af0:	f8ca 3000 	str.w	r3, [sl]
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	e7e9      	b.n	8008ad6 <__ssputs_r+0x8a>
	...

08008b04 <_svfiprintf_r>:
 8008b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b08:	4698      	mov	r8, r3
 8008b0a:	898b      	ldrh	r3, [r1, #12]
 8008b0c:	061b      	lsls	r3, r3, #24
 8008b0e:	b09d      	sub	sp, #116	@ 0x74
 8008b10:	4607      	mov	r7, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	4614      	mov	r4, r2
 8008b16:	d510      	bpl.n	8008b3a <_svfiprintf_r+0x36>
 8008b18:	690b      	ldr	r3, [r1, #16]
 8008b1a:	b973      	cbnz	r3, 8008b3a <_svfiprintf_r+0x36>
 8008b1c:	2140      	movs	r1, #64	@ 0x40
 8008b1e:	f7ff fb87 	bl	8008230 <_malloc_r>
 8008b22:	6028      	str	r0, [r5, #0]
 8008b24:	6128      	str	r0, [r5, #16]
 8008b26:	b930      	cbnz	r0, 8008b36 <_svfiprintf_r+0x32>
 8008b28:	230c      	movs	r3, #12
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b30:	b01d      	add	sp, #116	@ 0x74
 8008b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b36:	2340      	movs	r3, #64	@ 0x40
 8008b38:	616b      	str	r3, [r5, #20]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b3e:	2320      	movs	r3, #32
 8008b40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b48:	2330      	movs	r3, #48	@ 0x30
 8008b4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ce8 <_svfiprintf_r+0x1e4>
 8008b4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b52:	f04f 0901 	mov.w	r9, #1
 8008b56:	4623      	mov	r3, r4
 8008b58:	469a      	mov	sl, r3
 8008b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b5e:	b10a      	cbz	r2, 8008b64 <_svfiprintf_r+0x60>
 8008b60:	2a25      	cmp	r2, #37	@ 0x25
 8008b62:	d1f9      	bne.n	8008b58 <_svfiprintf_r+0x54>
 8008b64:	ebba 0b04 	subs.w	fp, sl, r4
 8008b68:	d00b      	beq.n	8008b82 <_svfiprintf_r+0x7e>
 8008b6a:	465b      	mov	r3, fp
 8008b6c:	4622      	mov	r2, r4
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4638      	mov	r0, r7
 8008b72:	f7ff ff6b 	bl	8008a4c <__ssputs_r>
 8008b76:	3001      	adds	r0, #1
 8008b78:	f000 80a7 	beq.w	8008cca <_svfiprintf_r+0x1c6>
 8008b7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b7e:	445a      	add	r2, fp
 8008b80:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b82:	f89a 3000 	ldrb.w	r3, [sl]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 809f 	beq.w	8008cca <_svfiprintf_r+0x1c6>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b96:	f10a 0a01 	add.w	sl, sl, #1
 8008b9a:	9304      	str	r3, [sp, #16]
 8008b9c:	9307      	str	r3, [sp, #28]
 8008b9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ba2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ba4:	4654      	mov	r4, sl
 8008ba6:	2205      	movs	r2, #5
 8008ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bac:	484e      	ldr	r0, [pc, #312]	@ (8008ce8 <_svfiprintf_r+0x1e4>)
 8008bae:	f7f7 fb2f 	bl	8000210 <memchr>
 8008bb2:	9a04      	ldr	r2, [sp, #16]
 8008bb4:	b9d8      	cbnz	r0, 8008bee <_svfiprintf_r+0xea>
 8008bb6:	06d0      	lsls	r0, r2, #27
 8008bb8:	bf44      	itt	mi
 8008bba:	2320      	movmi	r3, #32
 8008bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bc0:	0711      	lsls	r1, r2, #28
 8008bc2:	bf44      	itt	mi
 8008bc4:	232b      	movmi	r3, #43	@ 0x2b
 8008bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bca:	f89a 3000 	ldrb.w	r3, [sl]
 8008bce:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bd0:	d015      	beq.n	8008bfe <_svfiprintf_r+0xfa>
 8008bd2:	9a07      	ldr	r2, [sp, #28]
 8008bd4:	4654      	mov	r4, sl
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f04f 0c0a 	mov.w	ip, #10
 8008bdc:	4621      	mov	r1, r4
 8008bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008be2:	3b30      	subs	r3, #48	@ 0x30
 8008be4:	2b09      	cmp	r3, #9
 8008be6:	d94b      	bls.n	8008c80 <_svfiprintf_r+0x17c>
 8008be8:	b1b0      	cbz	r0, 8008c18 <_svfiprintf_r+0x114>
 8008bea:	9207      	str	r2, [sp, #28]
 8008bec:	e014      	b.n	8008c18 <_svfiprintf_r+0x114>
 8008bee:	eba0 0308 	sub.w	r3, r0, r8
 8008bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	46a2      	mov	sl, r4
 8008bfc:	e7d2      	b.n	8008ba4 <_svfiprintf_r+0xa0>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	1d19      	adds	r1, r3, #4
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	9103      	str	r1, [sp, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfbb      	ittet	lt
 8008c0a:	425b      	neglt	r3, r3
 8008c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c10:	9307      	strge	r3, [sp, #28]
 8008c12:	9307      	strlt	r3, [sp, #28]
 8008c14:	bfb8      	it	lt
 8008c16:	9204      	strlt	r2, [sp, #16]
 8008c18:	7823      	ldrb	r3, [r4, #0]
 8008c1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c1c:	d10a      	bne.n	8008c34 <_svfiprintf_r+0x130>
 8008c1e:	7863      	ldrb	r3, [r4, #1]
 8008c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c22:	d132      	bne.n	8008c8a <_svfiprintf_r+0x186>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	1d1a      	adds	r2, r3, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	9203      	str	r2, [sp, #12]
 8008c2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c30:	3402      	adds	r4, #2
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008cf8 <_svfiprintf_r+0x1f4>
 8008c38:	7821      	ldrb	r1, [r4, #0]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	4650      	mov	r0, sl
 8008c3e:	f7f7 fae7 	bl	8000210 <memchr>
 8008c42:	b138      	cbz	r0, 8008c54 <_svfiprintf_r+0x150>
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	eba0 000a 	sub.w	r0, r0, sl
 8008c4a:	2240      	movs	r2, #64	@ 0x40
 8008c4c:	4082      	lsls	r2, r0
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	3401      	adds	r4, #1
 8008c52:	9304      	str	r3, [sp, #16]
 8008c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c58:	4824      	ldr	r0, [pc, #144]	@ (8008cec <_svfiprintf_r+0x1e8>)
 8008c5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c5e:	2206      	movs	r2, #6
 8008c60:	f7f7 fad6 	bl	8000210 <memchr>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d036      	beq.n	8008cd6 <_svfiprintf_r+0x1d2>
 8008c68:	4b21      	ldr	r3, [pc, #132]	@ (8008cf0 <_svfiprintf_r+0x1ec>)
 8008c6a:	bb1b      	cbnz	r3, 8008cb4 <_svfiprintf_r+0x1b0>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	3307      	adds	r3, #7
 8008c70:	f023 0307 	bic.w	r3, r3, #7
 8008c74:	3308      	adds	r3, #8
 8008c76:	9303      	str	r3, [sp, #12]
 8008c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c7a:	4433      	add	r3, r6
 8008c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c7e:	e76a      	b.n	8008b56 <_svfiprintf_r+0x52>
 8008c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c84:	460c      	mov	r4, r1
 8008c86:	2001      	movs	r0, #1
 8008c88:	e7a8      	b.n	8008bdc <_svfiprintf_r+0xd8>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	3401      	adds	r4, #1
 8008c8e:	9305      	str	r3, [sp, #20]
 8008c90:	4619      	mov	r1, r3
 8008c92:	f04f 0c0a 	mov.w	ip, #10
 8008c96:	4620      	mov	r0, r4
 8008c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c9c:	3a30      	subs	r2, #48	@ 0x30
 8008c9e:	2a09      	cmp	r2, #9
 8008ca0:	d903      	bls.n	8008caa <_svfiprintf_r+0x1a6>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0c6      	beq.n	8008c34 <_svfiprintf_r+0x130>
 8008ca6:	9105      	str	r1, [sp, #20]
 8008ca8:	e7c4      	b.n	8008c34 <_svfiprintf_r+0x130>
 8008caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cae:	4604      	mov	r4, r0
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e7f0      	b.n	8008c96 <_svfiprintf_r+0x192>
 8008cb4:	ab03      	add	r3, sp, #12
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	462a      	mov	r2, r5
 8008cba:	4b0e      	ldr	r3, [pc, #56]	@ (8008cf4 <_svfiprintf_r+0x1f0>)
 8008cbc:	a904      	add	r1, sp, #16
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f7fd fe98 	bl	80069f4 <_printf_float>
 8008cc4:	1c42      	adds	r2, r0, #1
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	d1d6      	bne.n	8008c78 <_svfiprintf_r+0x174>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	065b      	lsls	r3, r3, #25
 8008cce:	f53f af2d 	bmi.w	8008b2c <_svfiprintf_r+0x28>
 8008cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cd4:	e72c      	b.n	8008b30 <_svfiprintf_r+0x2c>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4b05      	ldr	r3, [pc, #20]	@ (8008cf4 <_svfiprintf_r+0x1f0>)
 8008cde:	a904      	add	r1, sp, #16
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7fe f91f 	bl	8006f24 <_printf_i>
 8008ce6:	e7ed      	b.n	8008cc4 <_svfiprintf_r+0x1c0>
 8008ce8:	080099c0 	.word	0x080099c0
 8008cec:	080099ca 	.word	0x080099ca
 8008cf0:	080069f5 	.word	0x080069f5
 8008cf4:	08008a4d 	.word	0x08008a4d
 8008cf8:	080099c6 	.word	0x080099c6

08008cfc <__sflush_r>:
 8008cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d04:	0716      	lsls	r6, r2, #28
 8008d06:	4605      	mov	r5, r0
 8008d08:	460c      	mov	r4, r1
 8008d0a:	d454      	bmi.n	8008db6 <__sflush_r+0xba>
 8008d0c:	684b      	ldr	r3, [r1, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	dc02      	bgt.n	8008d18 <__sflush_r+0x1c>
 8008d12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dd48      	ble.n	8008daa <__sflush_r+0xae>
 8008d18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d1a:	2e00      	cmp	r6, #0
 8008d1c:	d045      	beq.n	8008daa <__sflush_r+0xae>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d24:	682f      	ldr	r7, [r5, #0]
 8008d26:	6a21      	ldr	r1, [r4, #32]
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	d030      	beq.n	8008d8e <__sflush_r+0x92>
 8008d2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	0759      	lsls	r1, r3, #29
 8008d32:	d505      	bpl.n	8008d40 <__sflush_r+0x44>
 8008d34:	6863      	ldr	r3, [r4, #4]
 8008d36:	1ad2      	subs	r2, r2, r3
 8008d38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d3a:	b10b      	cbz	r3, 8008d40 <__sflush_r+0x44>
 8008d3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	2300      	movs	r3, #0
 8008d42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d44:	6a21      	ldr	r1, [r4, #32]
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b0      	blx	r6
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	d106      	bne.n	8008d5e <__sflush_r+0x62>
 8008d50:	6829      	ldr	r1, [r5, #0]
 8008d52:	291d      	cmp	r1, #29
 8008d54:	d82b      	bhi.n	8008dae <__sflush_r+0xb2>
 8008d56:	4a2a      	ldr	r2, [pc, #168]	@ (8008e00 <__sflush_r+0x104>)
 8008d58:	410a      	asrs	r2, r1
 8008d5a:	07d6      	lsls	r6, r2, #31
 8008d5c:	d427      	bmi.n	8008dae <__sflush_r+0xb2>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	6062      	str	r2, [r4, #4]
 8008d62:	04d9      	lsls	r1, r3, #19
 8008d64:	6922      	ldr	r2, [r4, #16]
 8008d66:	6022      	str	r2, [r4, #0]
 8008d68:	d504      	bpl.n	8008d74 <__sflush_r+0x78>
 8008d6a:	1c42      	adds	r2, r0, #1
 8008d6c:	d101      	bne.n	8008d72 <__sflush_r+0x76>
 8008d6e:	682b      	ldr	r3, [r5, #0]
 8008d70:	b903      	cbnz	r3, 8008d74 <__sflush_r+0x78>
 8008d72:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d76:	602f      	str	r7, [r5, #0]
 8008d78:	b1b9      	cbz	r1, 8008daa <__sflush_r+0xae>
 8008d7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d7e:	4299      	cmp	r1, r3
 8008d80:	d002      	beq.n	8008d88 <__sflush_r+0x8c>
 8008d82:	4628      	mov	r0, r5
 8008d84:	f7ff f9e0 	bl	8008148 <_free_r>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d8c:	e00d      	b.n	8008daa <__sflush_r+0xae>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4628      	mov	r0, r5
 8008d92:	47b0      	blx	r6
 8008d94:	4602      	mov	r2, r0
 8008d96:	1c50      	adds	r0, r2, #1
 8008d98:	d1c9      	bne.n	8008d2e <__sflush_r+0x32>
 8008d9a:	682b      	ldr	r3, [r5, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0c6      	beq.n	8008d2e <__sflush_r+0x32>
 8008da0:	2b1d      	cmp	r3, #29
 8008da2:	d001      	beq.n	8008da8 <__sflush_r+0xac>
 8008da4:	2b16      	cmp	r3, #22
 8008da6:	d11e      	bne.n	8008de6 <__sflush_r+0xea>
 8008da8:	602f      	str	r7, [r5, #0]
 8008daa:	2000      	movs	r0, #0
 8008dac:	e022      	b.n	8008df4 <__sflush_r+0xf8>
 8008dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db2:	b21b      	sxth	r3, r3
 8008db4:	e01b      	b.n	8008dee <__sflush_r+0xf2>
 8008db6:	690f      	ldr	r7, [r1, #16]
 8008db8:	2f00      	cmp	r7, #0
 8008dba:	d0f6      	beq.n	8008daa <__sflush_r+0xae>
 8008dbc:	0793      	lsls	r3, r2, #30
 8008dbe:	680e      	ldr	r6, [r1, #0]
 8008dc0:	bf08      	it	eq
 8008dc2:	694b      	ldreq	r3, [r1, #20]
 8008dc4:	600f      	str	r7, [r1, #0]
 8008dc6:	bf18      	it	ne
 8008dc8:	2300      	movne	r3, #0
 8008dca:	eba6 0807 	sub.w	r8, r6, r7
 8008dce:	608b      	str	r3, [r1, #8]
 8008dd0:	f1b8 0f00 	cmp.w	r8, #0
 8008dd4:	dde9      	ble.n	8008daa <__sflush_r+0xae>
 8008dd6:	6a21      	ldr	r1, [r4, #32]
 8008dd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008dda:	4643      	mov	r3, r8
 8008ddc:	463a      	mov	r2, r7
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b0      	blx	r6
 8008de2:	2800      	cmp	r0, #0
 8008de4:	dc08      	bgt.n	8008df8 <__sflush_r+0xfc>
 8008de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df8:	4407      	add	r7, r0
 8008dfa:	eba8 0800 	sub.w	r8, r8, r0
 8008dfe:	e7e7      	b.n	8008dd0 <__sflush_r+0xd4>
 8008e00:	dfbffffe 	.word	0xdfbffffe

08008e04 <_fflush_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	690b      	ldr	r3, [r1, #16]
 8008e08:	4605      	mov	r5, r0
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	b913      	cbnz	r3, 8008e14 <_fflush_r+0x10>
 8008e0e:	2500      	movs	r5, #0
 8008e10:	4628      	mov	r0, r5
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	b118      	cbz	r0, 8008e1e <_fflush_r+0x1a>
 8008e16:	6a03      	ldr	r3, [r0, #32]
 8008e18:	b90b      	cbnz	r3, 8008e1e <_fflush_r+0x1a>
 8008e1a:	f7fe fa2f 	bl	800727c <__sinit>
 8008e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0f3      	beq.n	8008e0e <_fflush_r+0xa>
 8008e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e28:	07d0      	lsls	r0, r2, #31
 8008e2a:	d404      	bmi.n	8008e36 <_fflush_r+0x32>
 8008e2c:	0599      	lsls	r1, r3, #22
 8008e2e:	d402      	bmi.n	8008e36 <_fflush_r+0x32>
 8008e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e32:	f7fe fb3a 	bl	80074aa <__retarget_lock_acquire_recursive>
 8008e36:	4628      	mov	r0, r5
 8008e38:	4621      	mov	r1, r4
 8008e3a:	f7ff ff5f 	bl	8008cfc <__sflush_r>
 8008e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e40:	07da      	lsls	r2, r3, #31
 8008e42:	4605      	mov	r5, r0
 8008e44:	d4e4      	bmi.n	8008e10 <_fflush_r+0xc>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	059b      	lsls	r3, r3, #22
 8008e4a:	d4e1      	bmi.n	8008e10 <_fflush_r+0xc>
 8008e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e4e:	f7fe fb2d 	bl	80074ac <__retarget_lock_release_recursive>
 8008e52:	e7dd      	b.n	8008e10 <_fflush_r+0xc>

08008e54 <memmove>:
 8008e54:	4288      	cmp	r0, r1
 8008e56:	b510      	push	{r4, lr}
 8008e58:	eb01 0402 	add.w	r4, r1, r2
 8008e5c:	d902      	bls.n	8008e64 <memmove+0x10>
 8008e5e:	4284      	cmp	r4, r0
 8008e60:	4623      	mov	r3, r4
 8008e62:	d807      	bhi.n	8008e74 <memmove+0x20>
 8008e64:	1e43      	subs	r3, r0, #1
 8008e66:	42a1      	cmp	r1, r4
 8008e68:	d008      	beq.n	8008e7c <memmove+0x28>
 8008e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e72:	e7f8      	b.n	8008e66 <memmove+0x12>
 8008e74:	4402      	add	r2, r0
 8008e76:	4601      	mov	r1, r0
 8008e78:	428a      	cmp	r2, r1
 8008e7a:	d100      	bne.n	8008e7e <memmove+0x2a>
 8008e7c:	bd10      	pop	{r4, pc}
 8008e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e86:	e7f7      	b.n	8008e78 <memmove+0x24>

08008e88 <_sbrk_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d06      	ldr	r5, [pc, #24]	@ (8008ea4 <_sbrk_r+0x1c>)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	f7f9 fe4e 	bl	8002b34 <_sbrk>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_sbrk_r+0x1a>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_sbrk_r+0x1a>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	20000610 	.word	0x20000610

08008ea8 <memcpy>:
 8008ea8:	440a      	add	r2, r1
 8008eaa:	4291      	cmp	r1, r2
 8008eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eb0:	d100      	bne.n	8008eb4 <memcpy+0xc>
 8008eb2:	4770      	bx	lr
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	d1f9      	bne.n	8008eb6 <memcpy+0xe>
 8008ec2:	bd10      	pop	{r4, pc}

08008ec4 <__assert_func>:
 8008ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ec6:	4614      	mov	r4, r2
 8008ec8:	461a      	mov	r2, r3
 8008eca:	4b09      	ldr	r3, [pc, #36]	@ (8008ef0 <__assert_func+0x2c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4605      	mov	r5, r0
 8008ed0:	68d8      	ldr	r0, [r3, #12]
 8008ed2:	b954      	cbnz	r4, 8008eea <__assert_func+0x26>
 8008ed4:	4b07      	ldr	r3, [pc, #28]	@ (8008ef4 <__assert_func+0x30>)
 8008ed6:	461c      	mov	r4, r3
 8008ed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008edc:	9100      	str	r1, [sp, #0]
 8008ede:	462b      	mov	r3, r5
 8008ee0:	4905      	ldr	r1, [pc, #20]	@ (8008ef8 <__assert_func+0x34>)
 8008ee2:	f000 f86f 	bl	8008fc4 <fiprintf>
 8008ee6:	f000 f87f 	bl	8008fe8 <abort>
 8008eea:	4b04      	ldr	r3, [pc, #16]	@ (8008efc <__assert_func+0x38>)
 8008eec:	e7f4      	b.n	8008ed8 <__assert_func+0x14>
 8008eee:	bf00      	nop
 8008ef0:	20000028 	.word	0x20000028
 8008ef4:	08009a16 	.word	0x08009a16
 8008ef8:	080099e8 	.word	0x080099e8
 8008efc:	080099db 	.word	0x080099db

08008f00 <_calloc_r>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	fba1 5402 	umull	r5, r4, r1, r2
 8008f06:	b93c      	cbnz	r4, 8008f18 <_calloc_r+0x18>
 8008f08:	4629      	mov	r1, r5
 8008f0a:	f7ff f991 	bl	8008230 <_malloc_r>
 8008f0e:	4606      	mov	r6, r0
 8008f10:	b928      	cbnz	r0, 8008f1e <_calloc_r+0x1e>
 8008f12:	2600      	movs	r6, #0
 8008f14:	4630      	mov	r0, r6
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	220c      	movs	r2, #12
 8008f1a:	6002      	str	r2, [r0, #0]
 8008f1c:	e7f9      	b.n	8008f12 <_calloc_r+0x12>
 8008f1e:	462a      	mov	r2, r5
 8008f20:	4621      	mov	r1, r4
 8008f22:	f7fe fa44 	bl	80073ae <memset>
 8008f26:	e7f5      	b.n	8008f14 <_calloc_r+0x14>

08008f28 <__ascii_mbtowc>:
 8008f28:	b082      	sub	sp, #8
 8008f2a:	b901      	cbnz	r1, 8008f2e <__ascii_mbtowc+0x6>
 8008f2c:	a901      	add	r1, sp, #4
 8008f2e:	b142      	cbz	r2, 8008f42 <__ascii_mbtowc+0x1a>
 8008f30:	b14b      	cbz	r3, 8008f46 <__ascii_mbtowc+0x1e>
 8008f32:	7813      	ldrb	r3, [r2, #0]
 8008f34:	600b      	str	r3, [r1, #0]
 8008f36:	7812      	ldrb	r2, [r2, #0]
 8008f38:	1e10      	subs	r0, r2, #0
 8008f3a:	bf18      	it	ne
 8008f3c:	2001      	movne	r0, #1
 8008f3e:	b002      	add	sp, #8
 8008f40:	4770      	bx	lr
 8008f42:	4610      	mov	r0, r2
 8008f44:	e7fb      	b.n	8008f3e <__ascii_mbtowc+0x16>
 8008f46:	f06f 0001 	mvn.w	r0, #1
 8008f4a:	e7f8      	b.n	8008f3e <__ascii_mbtowc+0x16>

08008f4c <_realloc_r>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	4680      	mov	r8, r0
 8008f52:	4615      	mov	r5, r2
 8008f54:	460c      	mov	r4, r1
 8008f56:	b921      	cbnz	r1, 8008f62 <_realloc_r+0x16>
 8008f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	f7ff b967 	b.w	8008230 <_malloc_r>
 8008f62:	b92a      	cbnz	r2, 8008f70 <_realloc_r+0x24>
 8008f64:	f7ff f8f0 	bl	8008148 <_free_r>
 8008f68:	2400      	movs	r4, #0
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f70:	f000 f841 	bl	8008ff6 <_malloc_usable_size_r>
 8008f74:	4285      	cmp	r5, r0
 8008f76:	4606      	mov	r6, r0
 8008f78:	d802      	bhi.n	8008f80 <_realloc_r+0x34>
 8008f7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f7e:	d8f4      	bhi.n	8008f6a <_realloc_r+0x1e>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4640      	mov	r0, r8
 8008f84:	f7ff f954 	bl	8008230 <_malloc_r>
 8008f88:	4607      	mov	r7, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d0ec      	beq.n	8008f68 <_realloc_r+0x1c>
 8008f8e:	42b5      	cmp	r5, r6
 8008f90:	462a      	mov	r2, r5
 8008f92:	4621      	mov	r1, r4
 8008f94:	bf28      	it	cs
 8008f96:	4632      	movcs	r2, r6
 8008f98:	f7ff ff86 	bl	8008ea8 <memcpy>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	f7ff f8d2 	bl	8008148 <_free_r>
 8008fa4:	463c      	mov	r4, r7
 8008fa6:	e7e0      	b.n	8008f6a <_realloc_r+0x1e>

08008fa8 <__ascii_wctomb>:
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4608      	mov	r0, r1
 8008fac:	b141      	cbz	r1, 8008fc0 <__ascii_wctomb+0x18>
 8008fae:	2aff      	cmp	r2, #255	@ 0xff
 8008fb0:	d904      	bls.n	8008fbc <__ascii_wctomb+0x14>
 8008fb2:	228a      	movs	r2, #138	@ 0x8a
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fba:	4770      	bx	lr
 8008fbc:	700a      	strb	r2, [r1, #0]
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	4770      	bx	lr
	...

08008fc4 <fiprintf>:
 8008fc4:	b40e      	push	{r1, r2, r3}
 8008fc6:	b503      	push	{r0, r1, lr}
 8008fc8:	4601      	mov	r1, r0
 8008fca:	ab03      	add	r3, sp, #12
 8008fcc:	4805      	ldr	r0, [pc, #20]	@ (8008fe4 <fiprintf+0x20>)
 8008fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd2:	6800      	ldr	r0, [r0, #0]
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	f000 f83f 	bl	8009058 <_vfiprintf_r>
 8008fda:	b002      	add	sp, #8
 8008fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fe0:	b003      	add	sp, #12
 8008fe2:	4770      	bx	lr
 8008fe4:	20000028 	.word	0x20000028

08008fe8 <abort>:
 8008fe8:	b508      	push	{r3, lr}
 8008fea:	2006      	movs	r0, #6
 8008fec:	f000 fa08 	bl	8009400 <raise>
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	f7f9 fd26 	bl	8002a42 <_exit>

08008ff6 <_malloc_usable_size_r>:
 8008ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ffa:	1f18      	subs	r0, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bfbc      	itt	lt
 8009000:	580b      	ldrlt	r3, [r1, r0]
 8009002:	18c0      	addlt	r0, r0, r3
 8009004:	4770      	bx	lr

08009006 <__sfputc_r>:
 8009006:	6893      	ldr	r3, [r2, #8]
 8009008:	3b01      	subs	r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	b410      	push	{r4}
 800900e:	6093      	str	r3, [r2, #8]
 8009010:	da08      	bge.n	8009024 <__sfputc_r+0x1e>
 8009012:	6994      	ldr	r4, [r2, #24]
 8009014:	42a3      	cmp	r3, r4
 8009016:	db01      	blt.n	800901c <__sfputc_r+0x16>
 8009018:	290a      	cmp	r1, #10
 800901a:	d103      	bne.n	8009024 <__sfputc_r+0x1e>
 800901c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009020:	f000 b932 	b.w	8009288 <__swbuf_r>
 8009024:	6813      	ldr	r3, [r2, #0]
 8009026:	1c58      	adds	r0, r3, #1
 8009028:	6010      	str	r0, [r2, #0]
 800902a:	7019      	strb	r1, [r3, #0]
 800902c:	4608      	mov	r0, r1
 800902e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009032:	4770      	bx	lr

08009034 <__sfputs_r>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	4606      	mov	r6, r0
 8009038:	460f      	mov	r7, r1
 800903a:	4614      	mov	r4, r2
 800903c:	18d5      	adds	r5, r2, r3
 800903e:	42ac      	cmp	r4, r5
 8009040:	d101      	bne.n	8009046 <__sfputs_r+0x12>
 8009042:	2000      	movs	r0, #0
 8009044:	e007      	b.n	8009056 <__sfputs_r+0x22>
 8009046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904a:	463a      	mov	r2, r7
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff ffda 	bl	8009006 <__sfputc_r>
 8009052:	1c43      	adds	r3, r0, #1
 8009054:	d1f3      	bne.n	800903e <__sfputs_r+0xa>
 8009056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009058 <_vfiprintf_r>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	460d      	mov	r5, r1
 800905e:	b09d      	sub	sp, #116	@ 0x74
 8009060:	4614      	mov	r4, r2
 8009062:	4698      	mov	r8, r3
 8009064:	4606      	mov	r6, r0
 8009066:	b118      	cbz	r0, 8009070 <_vfiprintf_r+0x18>
 8009068:	6a03      	ldr	r3, [r0, #32]
 800906a:	b90b      	cbnz	r3, 8009070 <_vfiprintf_r+0x18>
 800906c:	f7fe f906 	bl	800727c <__sinit>
 8009070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009072:	07d9      	lsls	r1, r3, #31
 8009074:	d405      	bmi.n	8009082 <_vfiprintf_r+0x2a>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	059a      	lsls	r2, r3, #22
 800907a:	d402      	bmi.n	8009082 <_vfiprintf_r+0x2a>
 800907c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800907e:	f7fe fa14 	bl	80074aa <__retarget_lock_acquire_recursive>
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	071b      	lsls	r3, r3, #28
 8009086:	d501      	bpl.n	800908c <_vfiprintf_r+0x34>
 8009088:	692b      	ldr	r3, [r5, #16]
 800908a:	b99b      	cbnz	r3, 80090b4 <_vfiprintf_r+0x5c>
 800908c:	4629      	mov	r1, r5
 800908e:	4630      	mov	r0, r6
 8009090:	f000 f938 	bl	8009304 <__swsetup_r>
 8009094:	b170      	cbz	r0, 80090b4 <_vfiprintf_r+0x5c>
 8009096:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009098:	07dc      	lsls	r4, r3, #31
 800909a:	d504      	bpl.n	80090a6 <_vfiprintf_r+0x4e>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	b01d      	add	sp, #116	@ 0x74
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	89ab      	ldrh	r3, [r5, #12]
 80090a8:	0598      	lsls	r0, r3, #22
 80090aa:	d4f7      	bmi.n	800909c <_vfiprintf_r+0x44>
 80090ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ae:	f7fe f9fd 	bl	80074ac <__retarget_lock_release_recursive>
 80090b2:	e7f3      	b.n	800909c <_vfiprintf_r+0x44>
 80090b4:	2300      	movs	r3, #0
 80090b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090b8:	2320      	movs	r3, #32
 80090ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090be:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c2:	2330      	movs	r3, #48	@ 0x30
 80090c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009274 <_vfiprintf_r+0x21c>
 80090c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090cc:	f04f 0901 	mov.w	r9, #1
 80090d0:	4623      	mov	r3, r4
 80090d2:	469a      	mov	sl, r3
 80090d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d8:	b10a      	cbz	r2, 80090de <_vfiprintf_r+0x86>
 80090da:	2a25      	cmp	r2, #37	@ 0x25
 80090dc:	d1f9      	bne.n	80090d2 <_vfiprintf_r+0x7a>
 80090de:	ebba 0b04 	subs.w	fp, sl, r4
 80090e2:	d00b      	beq.n	80090fc <_vfiprintf_r+0xa4>
 80090e4:	465b      	mov	r3, fp
 80090e6:	4622      	mov	r2, r4
 80090e8:	4629      	mov	r1, r5
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7ff ffa2 	bl	8009034 <__sfputs_r>
 80090f0:	3001      	adds	r0, #1
 80090f2:	f000 80a7 	beq.w	8009244 <_vfiprintf_r+0x1ec>
 80090f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090f8:	445a      	add	r2, fp
 80090fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80090fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 809f 	beq.w	8009244 <_vfiprintf_r+0x1ec>
 8009106:	2300      	movs	r3, #0
 8009108:	f04f 32ff 	mov.w	r2, #4294967295
 800910c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009110:	f10a 0a01 	add.w	sl, sl, #1
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	9307      	str	r3, [sp, #28]
 8009118:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800911c:	931a      	str	r3, [sp, #104]	@ 0x68
 800911e:	4654      	mov	r4, sl
 8009120:	2205      	movs	r2, #5
 8009122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009126:	4853      	ldr	r0, [pc, #332]	@ (8009274 <_vfiprintf_r+0x21c>)
 8009128:	f7f7 f872 	bl	8000210 <memchr>
 800912c:	9a04      	ldr	r2, [sp, #16]
 800912e:	b9d8      	cbnz	r0, 8009168 <_vfiprintf_r+0x110>
 8009130:	06d1      	lsls	r1, r2, #27
 8009132:	bf44      	itt	mi
 8009134:	2320      	movmi	r3, #32
 8009136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800913a:	0713      	lsls	r3, r2, #28
 800913c:	bf44      	itt	mi
 800913e:	232b      	movmi	r3, #43	@ 0x2b
 8009140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009144:	f89a 3000 	ldrb.w	r3, [sl]
 8009148:	2b2a      	cmp	r3, #42	@ 0x2a
 800914a:	d015      	beq.n	8009178 <_vfiprintf_r+0x120>
 800914c:	9a07      	ldr	r2, [sp, #28]
 800914e:	4654      	mov	r4, sl
 8009150:	2000      	movs	r0, #0
 8009152:	f04f 0c0a 	mov.w	ip, #10
 8009156:	4621      	mov	r1, r4
 8009158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800915c:	3b30      	subs	r3, #48	@ 0x30
 800915e:	2b09      	cmp	r3, #9
 8009160:	d94b      	bls.n	80091fa <_vfiprintf_r+0x1a2>
 8009162:	b1b0      	cbz	r0, 8009192 <_vfiprintf_r+0x13a>
 8009164:	9207      	str	r2, [sp, #28]
 8009166:	e014      	b.n	8009192 <_vfiprintf_r+0x13a>
 8009168:	eba0 0308 	sub.w	r3, r0, r8
 800916c:	fa09 f303 	lsl.w	r3, r9, r3
 8009170:	4313      	orrs	r3, r2
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	46a2      	mov	sl, r4
 8009176:	e7d2      	b.n	800911e <_vfiprintf_r+0xc6>
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	1d19      	adds	r1, r3, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	9103      	str	r1, [sp, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	bfbb      	ittet	lt
 8009184:	425b      	neglt	r3, r3
 8009186:	f042 0202 	orrlt.w	r2, r2, #2
 800918a:	9307      	strge	r3, [sp, #28]
 800918c:	9307      	strlt	r3, [sp, #28]
 800918e:	bfb8      	it	lt
 8009190:	9204      	strlt	r2, [sp, #16]
 8009192:	7823      	ldrb	r3, [r4, #0]
 8009194:	2b2e      	cmp	r3, #46	@ 0x2e
 8009196:	d10a      	bne.n	80091ae <_vfiprintf_r+0x156>
 8009198:	7863      	ldrb	r3, [r4, #1]
 800919a:	2b2a      	cmp	r3, #42	@ 0x2a
 800919c:	d132      	bne.n	8009204 <_vfiprintf_r+0x1ac>
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	1d1a      	adds	r2, r3, #4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	9203      	str	r2, [sp, #12]
 80091a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091aa:	3402      	adds	r4, #2
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009284 <_vfiprintf_r+0x22c>
 80091b2:	7821      	ldrb	r1, [r4, #0]
 80091b4:	2203      	movs	r2, #3
 80091b6:	4650      	mov	r0, sl
 80091b8:	f7f7 f82a 	bl	8000210 <memchr>
 80091bc:	b138      	cbz	r0, 80091ce <_vfiprintf_r+0x176>
 80091be:	9b04      	ldr	r3, [sp, #16]
 80091c0:	eba0 000a 	sub.w	r0, r0, sl
 80091c4:	2240      	movs	r2, #64	@ 0x40
 80091c6:	4082      	lsls	r2, r0
 80091c8:	4313      	orrs	r3, r2
 80091ca:	3401      	adds	r4, #1
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d2:	4829      	ldr	r0, [pc, #164]	@ (8009278 <_vfiprintf_r+0x220>)
 80091d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091d8:	2206      	movs	r2, #6
 80091da:	f7f7 f819 	bl	8000210 <memchr>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d03f      	beq.n	8009262 <_vfiprintf_r+0x20a>
 80091e2:	4b26      	ldr	r3, [pc, #152]	@ (800927c <_vfiprintf_r+0x224>)
 80091e4:	bb1b      	cbnz	r3, 800922e <_vfiprintf_r+0x1d6>
 80091e6:	9b03      	ldr	r3, [sp, #12]
 80091e8:	3307      	adds	r3, #7
 80091ea:	f023 0307 	bic.w	r3, r3, #7
 80091ee:	3308      	adds	r3, #8
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f4:	443b      	add	r3, r7
 80091f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f8:	e76a      	b.n	80090d0 <_vfiprintf_r+0x78>
 80091fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80091fe:	460c      	mov	r4, r1
 8009200:	2001      	movs	r0, #1
 8009202:	e7a8      	b.n	8009156 <_vfiprintf_r+0xfe>
 8009204:	2300      	movs	r3, #0
 8009206:	3401      	adds	r4, #1
 8009208:	9305      	str	r3, [sp, #20]
 800920a:	4619      	mov	r1, r3
 800920c:	f04f 0c0a 	mov.w	ip, #10
 8009210:	4620      	mov	r0, r4
 8009212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009216:	3a30      	subs	r2, #48	@ 0x30
 8009218:	2a09      	cmp	r2, #9
 800921a:	d903      	bls.n	8009224 <_vfiprintf_r+0x1cc>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0c6      	beq.n	80091ae <_vfiprintf_r+0x156>
 8009220:	9105      	str	r1, [sp, #20]
 8009222:	e7c4      	b.n	80091ae <_vfiprintf_r+0x156>
 8009224:	fb0c 2101 	mla	r1, ip, r1, r2
 8009228:	4604      	mov	r4, r0
 800922a:	2301      	movs	r3, #1
 800922c:	e7f0      	b.n	8009210 <_vfiprintf_r+0x1b8>
 800922e:	ab03      	add	r3, sp, #12
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	462a      	mov	r2, r5
 8009234:	4b12      	ldr	r3, [pc, #72]	@ (8009280 <_vfiprintf_r+0x228>)
 8009236:	a904      	add	r1, sp, #16
 8009238:	4630      	mov	r0, r6
 800923a:	f7fd fbdb 	bl	80069f4 <_printf_float>
 800923e:	4607      	mov	r7, r0
 8009240:	1c78      	adds	r0, r7, #1
 8009242:	d1d6      	bne.n	80091f2 <_vfiprintf_r+0x19a>
 8009244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009246:	07d9      	lsls	r1, r3, #31
 8009248:	d405      	bmi.n	8009256 <_vfiprintf_r+0x1fe>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	059a      	lsls	r2, r3, #22
 800924e:	d402      	bmi.n	8009256 <_vfiprintf_r+0x1fe>
 8009250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009252:	f7fe f92b 	bl	80074ac <__retarget_lock_release_recursive>
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	065b      	lsls	r3, r3, #25
 800925a:	f53f af1f 	bmi.w	800909c <_vfiprintf_r+0x44>
 800925e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009260:	e71e      	b.n	80090a0 <_vfiprintf_r+0x48>
 8009262:	ab03      	add	r3, sp, #12
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	462a      	mov	r2, r5
 8009268:	4b05      	ldr	r3, [pc, #20]	@ (8009280 <_vfiprintf_r+0x228>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	4630      	mov	r0, r6
 800926e:	f7fd fe59 	bl	8006f24 <_printf_i>
 8009272:	e7e4      	b.n	800923e <_vfiprintf_r+0x1e6>
 8009274:	080099c0 	.word	0x080099c0
 8009278:	080099ca 	.word	0x080099ca
 800927c:	080069f5 	.word	0x080069f5
 8009280:	08009035 	.word	0x08009035
 8009284:	080099c6 	.word	0x080099c6

08009288 <__swbuf_r>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	460e      	mov	r6, r1
 800928c:	4614      	mov	r4, r2
 800928e:	4605      	mov	r5, r0
 8009290:	b118      	cbz	r0, 800929a <__swbuf_r+0x12>
 8009292:	6a03      	ldr	r3, [r0, #32]
 8009294:	b90b      	cbnz	r3, 800929a <__swbuf_r+0x12>
 8009296:	f7fd fff1 	bl	800727c <__sinit>
 800929a:	69a3      	ldr	r3, [r4, #24]
 800929c:	60a3      	str	r3, [r4, #8]
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	071a      	lsls	r2, r3, #28
 80092a2:	d501      	bpl.n	80092a8 <__swbuf_r+0x20>
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	b943      	cbnz	r3, 80092ba <__swbuf_r+0x32>
 80092a8:	4621      	mov	r1, r4
 80092aa:	4628      	mov	r0, r5
 80092ac:	f000 f82a 	bl	8009304 <__swsetup_r>
 80092b0:	b118      	cbz	r0, 80092ba <__swbuf_r+0x32>
 80092b2:	f04f 37ff 	mov.w	r7, #4294967295
 80092b6:	4638      	mov	r0, r7
 80092b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	6922      	ldr	r2, [r4, #16]
 80092be:	1a98      	subs	r0, r3, r2
 80092c0:	6963      	ldr	r3, [r4, #20]
 80092c2:	b2f6      	uxtb	r6, r6
 80092c4:	4283      	cmp	r3, r0
 80092c6:	4637      	mov	r7, r6
 80092c8:	dc05      	bgt.n	80092d6 <__swbuf_r+0x4e>
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f7ff fd99 	bl	8008e04 <_fflush_r>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d1ed      	bne.n	80092b2 <__swbuf_r+0x2a>
 80092d6:	68a3      	ldr	r3, [r4, #8]
 80092d8:	3b01      	subs	r3, #1
 80092da:	60a3      	str	r3, [r4, #8]
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	6022      	str	r2, [r4, #0]
 80092e2:	701e      	strb	r6, [r3, #0]
 80092e4:	6962      	ldr	r2, [r4, #20]
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d004      	beq.n	80092f6 <__swbuf_r+0x6e>
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	07db      	lsls	r3, r3, #31
 80092f0:	d5e1      	bpl.n	80092b6 <__swbuf_r+0x2e>
 80092f2:	2e0a      	cmp	r6, #10
 80092f4:	d1df      	bne.n	80092b6 <__swbuf_r+0x2e>
 80092f6:	4621      	mov	r1, r4
 80092f8:	4628      	mov	r0, r5
 80092fa:	f7ff fd83 	bl	8008e04 <_fflush_r>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d0d9      	beq.n	80092b6 <__swbuf_r+0x2e>
 8009302:	e7d6      	b.n	80092b2 <__swbuf_r+0x2a>

08009304 <__swsetup_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4b29      	ldr	r3, [pc, #164]	@ (80093ac <__swsetup_r+0xa8>)
 8009308:	4605      	mov	r5, r0
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	460c      	mov	r4, r1
 800930e:	b118      	cbz	r0, 8009318 <__swsetup_r+0x14>
 8009310:	6a03      	ldr	r3, [r0, #32]
 8009312:	b90b      	cbnz	r3, 8009318 <__swsetup_r+0x14>
 8009314:	f7fd ffb2 	bl	800727c <__sinit>
 8009318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800931c:	0719      	lsls	r1, r3, #28
 800931e:	d422      	bmi.n	8009366 <__swsetup_r+0x62>
 8009320:	06da      	lsls	r2, r3, #27
 8009322:	d407      	bmi.n	8009334 <__swsetup_r+0x30>
 8009324:	2209      	movs	r2, #9
 8009326:	602a      	str	r2, [r5, #0]
 8009328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	f04f 30ff 	mov.w	r0, #4294967295
 8009332:	e033      	b.n	800939c <__swsetup_r+0x98>
 8009334:	0758      	lsls	r0, r3, #29
 8009336:	d512      	bpl.n	800935e <__swsetup_r+0x5a>
 8009338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800933a:	b141      	cbz	r1, 800934e <__swsetup_r+0x4a>
 800933c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009340:	4299      	cmp	r1, r3
 8009342:	d002      	beq.n	800934a <__swsetup_r+0x46>
 8009344:	4628      	mov	r0, r5
 8009346:	f7fe feff 	bl	8008148 <_free_r>
 800934a:	2300      	movs	r3, #0
 800934c:	6363      	str	r3, [r4, #52]	@ 0x34
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009354:	81a3      	strh	r3, [r4, #12]
 8009356:	2300      	movs	r3, #0
 8009358:	6063      	str	r3, [r4, #4]
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	f043 0308 	orr.w	r3, r3, #8
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	6923      	ldr	r3, [r4, #16]
 8009368:	b94b      	cbnz	r3, 800937e <__swsetup_r+0x7a>
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009374:	d003      	beq.n	800937e <__swsetup_r+0x7a>
 8009376:	4621      	mov	r1, r4
 8009378:	4628      	mov	r0, r5
 800937a:	f000 f883 	bl	8009484 <__smakebuf_r>
 800937e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009382:	f013 0201 	ands.w	r2, r3, #1
 8009386:	d00a      	beq.n	800939e <__swsetup_r+0x9a>
 8009388:	2200      	movs	r2, #0
 800938a:	60a2      	str	r2, [r4, #8]
 800938c:	6962      	ldr	r2, [r4, #20]
 800938e:	4252      	negs	r2, r2
 8009390:	61a2      	str	r2, [r4, #24]
 8009392:	6922      	ldr	r2, [r4, #16]
 8009394:	b942      	cbnz	r2, 80093a8 <__swsetup_r+0xa4>
 8009396:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800939a:	d1c5      	bne.n	8009328 <__swsetup_r+0x24>
 800939c:	bd38      	pop	{r3, r4, r5, pc}
 800939e:	0799      	lsls	r1, r3, #30
 80093a0:	bf58      	it	pl
 80093a2:	6962      	ldrpl	r2, [r4, #20]
 80093a4:	60a2      	str	r2, [r4, #8]
 80093a6:	e7f4      	b.n	8009392 <__swsetup_r+0x8e>
 80093a8:	2000      	movs	r0, #0
 80093aa:	e7f7      	b.n	800939c <__swsetup_r+0x98>
 80093ac:	20000028 	.word	0x20000028

080093b0 <_raise_r>:
 80093b0:	291f      	cmp	r1, #31
 80093b2:	b538      	push	{r3, r4, r5, lr}
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	d904      	bls.n	80093c4 <_raise_r+0x14>
 80093ba:	2316      	movs	r3, #22
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	f04f 30ff 	mov.w	r0, #4294967295
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093c6:	b112      	cbz	r2, 80093ce <_raise_r+0x1e>
 80093c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093cc:	b94b      	cbnz	r3, 80093e2 <_raise_r+0x32>
 80093ce:	4628      	mov	r0, r5
 80093d0:	f000 f830 	bl	8009434 <_getpid_r>
 80093d4:	4622      	mov	r2, r4
 80093d6:	4601      	mov	r1, r0
 80093d8:	4628      	mov	r0, r5
 80093da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093de:	f000 b817 	b.w	8009410 <_kill_r>
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d00a      	beq.n	80093fc <_raise_r+0x4c>
 80093e6:	1c59      	adds	r1, r3, #1
 80093e8:	d103      	bne.n	80093f2 <_raise_r+0x42>
 80093ea:	2316      	movs	r3, #22
 80093ec:	6003      	str	r3, [r0, #0]
 80093ee:	2001      	movs	r0, #1
 80093f0:	e7e7      	b.n	80093c2 <_raise_r+0x12>
 80093f2:	2100      	movs	r1, #0
 80093f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093f8:	4620      	mov	r0, r4
 80093fa:	4798      	blx	r3
 80093fc:	2000      	movs	r0, #0
 80093fe:	e7e0      	b.n	80093c2 <_raise_r+0x12>

08009400 <raise>:
 8009400:	4b02      	ldr	r3, [pc, #8]	@ (800940c <raise+0xc>)
 8009402:	4601      	mov	r1, r0
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	f7ff bfd3 	b.w	80093b0 <_raise_r>
 800940a:	bf00      	nop
 800940c:	20000028 	.word	0x20000028

08009410 <_kill_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d07      	ldr	r5, [pc, #28]	@ (8009430 <_kill_r+0x20>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	f7f9 fb00 	bl	8002a22 <_kill>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d102      	bne.n	800942c <_kill_r+0x1c>
 8009426:	682b      	ldr	r3, [r5, #0]
 8009428:	b103      	cbz	r3, 800942c <_kill_r+0x1c>
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	bd38      	pop	{r3, r4, r5, pc}
 800942e:	bf00      	nop
 8009430:	20000610 	.word	0x20000610

08009434 <_getpid_r>:
 8009434:	f7f9 baed 	b.w	8002a12 <_getpid>

08009438 <__swhatbuf_r>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	2900      	cmp	r1, #0
 8009442:	b096      	sub	sp, #88	@ 0x58
 8009444:	4615      	mov	r5, r2
 8009446:	461e      	mov	r6, r3
 8009448:	da0d      	bge.n	8009466 <__swhatbuf_r+0x2e>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009450:	f04f 0100 	mov.w	r1, #0
 8009454:	bf14      	ite	ne
 8009456:	2340      	movne	r3, #64	@ 0x40
 8009458:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800945c:	2000      	movs	r0, #0
 800945e:	6031      	str	r1, [r6, #0]
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	b016      	add	sp, #88	@ 0x58
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	466a      	mov	r2, sp
 8009468:	f000 f848 	bl	80094fc <_fstat_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	dbec      	blt.n	800944a <__swhatbuf_r+0x12>
 8009470:	9901      	ldr	r1, [sp, #4]
 8009472:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009476:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800947a:	4259      	negs	r1, r3
 800947c:	4159      	adcs	r1, r3
 800947e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009482:	e7eb      	b.n	800945c <__swhatbuf_r+0x24>

08009484 <__smakebuf_r>:
 8009484:	898b      	ldrh	r3, [r1, #12]
 8009486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009488:	079d      	lsls	r5, r3, #30
 800948a:	4606      	mov	r6, r0
 800948c:	460c      	mov	r4, r1
 800948e:	d507      	bpl.n	80094a0 <__smakebuf_r+0x1c>
 8009490:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	6123      	str	r3, [r4, #16]
 8009498:	2301      	movs	r3, #1
 800949a:	6163      	str	r3, [r4, #20]
 800949c:	b003      	add	sp, #12
 800949e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a0:	ab01      	add	r3, sp, #4
 80094a2:	466a      	mov	r2, sp
 80094a4:	f7ff ffc8 	bl	8009438 <__swhatbuf_r>
 80094a8:	9f00      	ldr	r7, [sp, #0]
 80094aa:	4605      	mov	r5, r0
 80094ac:	4639      	mov	r1, r7
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7fe febe 	bl	8008230 <_malloc_r>
 80094b4:	b948      	cbnz	r0, 80094ca <__smakebuf_r+0x46>
 80094b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ba:	059a      	lsls	r2, r3, #22
 80094bc:	d4ee      	bmi.n	800949c <__smakebuf_r+0x18>
 80094be:	f023 0303 	bic.w	r3, r3, #3
 80094c2:	f043 0302 	orr.w	r3, r3, #2
 80094c6:	81a3      	strh	r3, [r4, #12]
 80094c8:	e7e2      	b.n	8009490 <__smakebuf_r+0xc>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	6020      	str	r0, [r4, #0]
 80094ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	9b01      	ldr	r3, [sp, #4]
 80094d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094da:	b15b      	cbz	r3, 80094f4 <__smakebuf_r+0x70>
 80094dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 f81d 	bl	8009520 <_isatty_r>
 80094e6:	b128      	cbz	r0, 80094f4 <__smakebuf_r+0x70>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f023 0303 	bic.w	r3, r3, #3
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	431d      	orrs	r5, r3
 80094f8:	81a5      	strh	r5, [r4, #12]
 80094fa:	e7cf      	b.n	800949c <__smakebuf_r+0x18>

080094fc <_fstat_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	@ (800951c <_fstat_r+0x20>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	f7f9 faea 	bl	8002ae2 <_fstat>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d102      	bne.n	8009518 <_fstat_r+0x1c>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b103      	cbz	r3, 8009518 <_fstat_r+0x1c>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	20000610 	.word	0x20000610

08009520 <_isatty_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d06      	ldr	r5, [pc, #24]	@ (800953c <_isatty_r+0x1c>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f9 fae9 	bl	8002b02 <_isatty>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_isatty_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_isatty_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20000610 	.word	0x20000610

08009540 <_init>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr

0800954c <_fini>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	bf00      	nop
 8009550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009552:	bc08      	pop	{r3}
 8009554:	469e      	mov	lr, r3
 8009556:	4770      	bx	lr
