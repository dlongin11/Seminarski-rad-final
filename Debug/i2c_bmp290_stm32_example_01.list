
i2c_bmp290_stm32_example_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08008b78  08008b78  00009b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009150  08009150  0000a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009158  08009158  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009158  08009158  0000a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800915c  0800915c  0000a15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009160  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001e4  08009344  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08009344  0000b5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012898  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afb  00000000  00000000  0001daac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  000205a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da2  00000000  00000000  00021718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fc0  00000000  00000000  000224ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168cb  00000000  00000000  0004647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5d64  00000000  00000000  0005cd45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132aa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a58  00000000  00000000  00132aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00138544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b60 	.word	0x08008b60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08008b60 	.word	0x08008b60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <bmp280_init_default_params>:
#define BMP280_REG_HUM_CALIB   0x88

#define BMP280_RESET_VALUE     0xB6


void bmp280_init_default_params(bmp280_params_t *params) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	715a      	strb	r2, [r3, #5]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	8af9      	ldrh	r1, [r7, #22]
 8000fd0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f002 fd39 	bl	8003a58 <HAL_I2C_Mem_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10b      	bne.n	8001004 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fec:	7d7b      	ldrb	r3, [r7, #21]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7d3b      	ldrb	r3, [r7, #20]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	801a      	strh	r2, [r3, #0]
		return true;
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <read_register16+0x56>
	} else
		return false;
 8001004:	2300      	movs	r3, #0

}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b08b      	sub	sp, #44	@ 0x2c
 8001012:	af04      	add	r7, sp, #16
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	72fb      	strb	r3, [r7, #11]
 800101e:	4613      	mov	r3, r2
 8001020:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	b29a      	uxth	r2, r3
 8001032:	7abb      	ldrb	r3, [r7, #10]
 8001034:	b29b      	uxth	r3, r3
 8001036:	8af9      	ldrh	r1, [r7, #22]
 8001038:	f241 3488 	movw	r4, #5000	@ 0x1388
 800103c:	9402      	str	r4, [sp, #8]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	f002 fd07 	bl	8003a58 <HAL_I2C_Mem_Read>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <read_data+0x46>
		return 0;
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <read_data+0x48>
	else
		return 1;
 8001054:	2301      	movs	r3, #1

}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	461a      	mov	r2, r3
 800106a:	2188      	movs	r1, #136	@ 0x88
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff9f 	bl	8000fb0 <read_register16>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d06f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3302      	adds	r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	218a      	movs	r1, #138	@ 0x8a
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff95 	bl	8000fb0 <read_register16>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d065      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	461a      	mov	r2, r3
 8001092:	218c      	movs	r1, #140	@ 0x8c
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff8b 	bl	8000fb0 <read_register16>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3306      	adds	r3, #6
 80010a4:	461a      	mov	r2, r3
 80010a6:	218e      	movs	r1, #142	@ 0x8e
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff81 	bl	8000fb0 <read_register16>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d051      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3308      	adds	r3, #8
 80010b8:	461a      	mov	r2, r3
 80010ba:	2190      	movs	r1, #144	@ 0x90
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff77 	bl	8000fb0 <read_register16>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d047      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	330a      	adds	r3, #10
 80010cc:	461a      	mov	r2, r3
 80010ce:	2192      	movs	r1, #146	@ 0x92
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff6d 	bl	8000fb0 <read_register16>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d03d      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	330c      	adds	r3, #12
 80010e0:	461a      	mov	r2, r3
 80010e2:	2194      	movs	r1, #148	@ 0x94
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff63 	bl	8000fb0 <read_register16>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d033      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	330e      	adds	r3, #14
 80010f4:	461a      	mov	r2, r3
 80010f6:	2196      	movs	r1, #150	@ 0x96
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff59 	bl	8000fb0 <read_register16>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d029      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3310      	adds	r3, #16
 8001108:	461a      	mov	r2, r3
 800110a:	2198      	movs	r1, #152	@ 0x98
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff4f 	bl	8000fb0 <read_register16>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3312      	adds	r3, #18
 800111c:	461a      	mov	r2, r3
 800111e:	219a      	movs	r1, #154	@ 0x9a
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff45 	bl	8000fb0 <read_register16>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d015      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3314      	adds	r3, #20
 8001130:	461a      	mov	r2, r3
 8001132:	219c      	movs	r1, #156	@ 0x9c
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff3b 	bl	8000fb0 <read_register16>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001144:	461a      	mov	r2, r3
 8001146:	219e      	movs	r1, #158	@ 0x9e
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff31 	bl	8000fb0 <read_register16>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <read_calibration_data+0xfa>

		return true;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <read_calibration_data+0xfc>
	}

	return false;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f103 0218 	add.w	r2, r3, #24
 8001170:	2301      	movs	r3, #1
 8001172:	21a1      	movs	r1, #161	@ 0xa1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff4a 	bl	800100e <read_data>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14b      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	331a      	adds	r3, #26
 8001184:	461a      	mov	r2, r3
 8001186:	21e1      	movs	r1, #225	@ 0xe1
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff11 	bl	8000fb0 <read_register16>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d041      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 021c 	add.w	r2, r3, #28
 800119a:	2301      	movs	r3, #1
 800119c:	21e3      	movs	r1, #227	@ 0xe3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff35 	bl	800100e <read_data>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d136      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011aa:	f107 030e 	add.w	r3, r7, #14
 80011ae:	461a      	mov	r2, r3
 80011b0:	21e4      	movs	r1, #228	@ 0xe4
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fefc 	bl	8000fb0 <read_register16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d02c      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	461a      	mov	r2, r3
 80011c4:	21e5      	movs	r1, #229	@ 0xe5
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fef2 	bl	8000fb0 <read_register16>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80011d8:	2301      	movs	r3, #1
 80011da:	21e7      	movs	r1, #231	@ 0xe7
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff16 	bl	800100e <read_data>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d117      	bne.n	8001218 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	b29b      	uxth	r3, r3
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	841a      	strh	r2, [r3, #32]

		return true;
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b088      	sub	sp, #32
 8001226:	af04      	add	r7, sp, #16
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
 800122e:	4613      	mov	r3, r2
 8001230:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	b29a      	uxth	r2, r3
 8001242:	89f9      	ldrh	r1, [r7, #14]
 8001244:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1cbb      	adds	r3, r7, #2
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	f002 fb06 	bl	8003864 <HAL_I2C_Mem_Write>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <write_register8+0x40>
		return false;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <write_register8+0x42>
	else
		return true;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b092      	sub	sp, #72	@ 0x48
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    char buffer[50];  // Buffer to hold the formatted string

    sprintf(buffer, "Beginning of init\n");
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	49b5      	ldr	r1, [pc, #724]	@ (8001550 <bmp280_init+0x2e4>)
 800127c:	4618      	mov	r0, r3
 800127e:	f005 fb41 	bl	8006904 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f812 	bl	80002b0 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	f107 0110 	add.w	r1, r7, #16
 8001294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001298:	48ae      	ldr	r0, [pc, #696]	@ (8001554 <bmp280_init+0x2e8>)
 800129a:	f004 fa5d 	bl	8005758 <HAL_UART_Transmit>


	if (dev->addr != BMP280_I2C_ADDRESS_0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012a2:	2b76      	cmp	r3, #118	@ 0x76
 80012a4:	d01c      	beq.n	80012e0 <bmp280_init+0x74>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012aa:	2b77      	cmp	r3, #119	@ 0x77
 80012ac:	d018      	beq.n	80012e0 <bmp280_init+0x74>
        sprintf(buffer, "Invalid address: 0x%x\n", dev->addr);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012b2:	461a      	mov	r2, r3
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	49a7      	ldr	r1, [pc, #668]	@ (8001558 <bmp280_init+0x2ec>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 fb22 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe fff3 	bl	80002b0 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f107 0110 	add.w	r1, r7, #16
 80012d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d6:	489f      	ldr	r0, [pc, #636]	@ (8001554 <bmp280_init+0x2e8>)
 80012d8:	f004 fa3e 	bl	8005758 <HAL_UART_Transmit>

		return false;
 80012dc:	2300      	movs	r3, #0
 80012de:	e182      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80012e6:	2301      	movs	r3, #1
 80012e8:	21d0      	movs	r1, #208	@ 0xd0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fe8f 	bl	800100e <read_data>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d015      	beq.n	8001322 <bmp280_init+0xb6>
        sprintf(buffer, "Failed to read device ID\n");
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4998      	ldr	r1, [pc, #608]	@ (800155c <bmp280_init+0x2f0>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f005 fb01 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ffd2 	bl	80002b0 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f107 0110 	add.w	r1, r7, #16
 8001314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001318:	488e      	ldr	r0, [pc, #568]	@ (8001554 <bmp280_init+0x2e8>)
 800131a:	f004 fa1d 	bl	8005758 <HAL_UART_Transmit>


		return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e161      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001328:	2b58      	cmp	r3, #88	@ 0x58
 800132a:	d01e      	beq.n	800136a <bmp280_init+0xfe>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001332:	2b60      	cmp	r3, #96	@ 0x60
 8001334:	d019      	beq.n	800136a <bmp280_init+0xfe>
        sprintf(buffer, "Unknown device ID: 0x%x\n", dev->id);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800133c:	461a      	mov	r2, r3
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4987      	ldr	r1, [pc, #540]	@ (8001560 <bmp280_init+0x2f4>)
 8001344:	4618      	mov	r0, r3
 8001346:	f005 fadd 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ffae 	bl	80002b0 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f107 0110 	add.w	r1, r7, #16
 800135c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001360:	487c      	ldr	r0, [pc, #496]	@ (8001554 <bmp280_init+0x2e8>)
 8001362:	f004 f9f9 	bl	8005758 <HAL_UART_Transmit>


		return false;
 8001366:	2300      	movs	r3, #0
 8001368:	e13d      	b.n	80015e6 <bmp280_init+0x37a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800136a:	22b6      	movs	r2, #182	@ 0xb6
 800136c:	21e0      	movs	r1, #224	@ 0xe0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff57 	bl	8001222 <write_register8>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <bmp280_init+0x13a>
        sprintf(buffer, "Failed to reset device\n");
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4979      	ldr	r1, [pc, #484]	@ (8001564 <bmp280_init+0x2f8>)
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fabf 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff90 	bl	80002b0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0110 	add.w	r1, r7, #16
 8001398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139c:	486d      	ldr	r0, [pc, #436]	@ (8001554 <bmp280_init+0x2e8>)
 800139e:	f004 f9db 	bl	8005758 <HAL_UART_Transmit>


		return false;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e11f      	b.n	80015e6 <bmp280_init+0x37a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80013a6:	f107 020f 	add.w	r2, r7, #15
 80013aa:	2301      	movs	r3, #1
 80013ac:	21f3      	movs	r1, #243	@ 0xf3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fe2d 	bl	800100e <read_data>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f5      	bne.n	80013a6 <bmp280_init+0x13a>
				&& (status & 1) == 0)
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <bmp280_init+0x13a>
			break;
	}

	if (!read_calibration_data(dev)) {
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fe4a 	bl	800105e <read_calibration_data>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <bmp280_init+0x16c>
 80013d6:	e015      	b.n	8001404 <bmp280_init+0x198>
        sprintf(buffer, "Failed to read calibration data\n");
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4962      	ldr	r1, [pc, #392]	@ (8001568 <bmp280_init+0x2fc>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fa90 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff61 	bl	80002b0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f107 0110 	add.w	r1, r7, #16
 80013f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fa:	4856      	ldr	r0, [pc, #344]	@ (8001554 <bmp280_init+0x2e8>)
 80013fc:	f004 f9ac 	bl	8005758 <HAL_UART_Transmit>


		return false;
 8001400:	2300      	movs	r3, #0
 8001402:	e0f0      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800140a:	2b60      	cmp	r3, #96	@ 0x60
 800140c:	d11e      	bne.n	800144c <bmp280_init+0x1e0>
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fea7 	bl	8001162 <read_hum_calibration_data>
 8001414:	4603      	mov	r3, r0
 8001416:	f083 0301 	eor.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <bmp280_init+0x1e0>
        sprintf(buffer, "Failed to read humidity calibration data\n");
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4951      	ldr	r1, [pc, #324]	@ (800156c <bmp280_init+0x300>)
 8001426:	4618      	mov	r0, r3
 8001428:	f005 fa6c 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe ff3d 	bl	80002b0 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	f107 0110 	add.w	r1, r7, #16
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	4844      	ldr	r0, [pc, #272]	@ (8001554 <bmp280_init+0x2e8>)
 8001444:	f004 f988 	bl	8005758 <HAL_UART_Transmit>


		return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e0cc      	b.n	80015e6 <bmp280_init+0x37a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	795b      	ldrb	r3, [r3, #5]
 8001450:	015b      	lsls	r3, r3, #5
 8001452:	b25a      	sxtb	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	b25b      	sxtb	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b25b      	sxtb	r3, r3
 8001460:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001464:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001468:	461a      	mov	r2, r3
 800146a:	21f5      	movs	r1, #245	@ 0xf5
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fed8 	bl	8001222 <write_register8>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <bmp280_init+0x238>
        sprintf(buffer, "Failed to write config register\n");
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	493c      	ldr	r1, [pc, #240]	@ (8001570 <bmp280_init+0x304>)
 800147e:	4618      	mov	r0, r3
 8001480:	f005 fa40 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ff11 	bl	80002b0 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	f107 0110 	add.w	r1, r7, #16
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	482e      	ldr	r0, [pc, #184]	@ (8001554 <bmp280_init+0x2e8>)
 800149c:	f004 f95c 	bl	8005758 <HAL_UART_Transmit>


		return false;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e0a0      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d116      	bne.n	80014da <bmp280_init+0x26e>
        sprintf(buffer, "Setting forced mode\n");
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4930      	ldr	r1, [pc, #192]	@ (8001574 <bmp280_init+0x308>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fa26 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fef7 	bl	80002b0 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f107 0110 	add.w	r1, r7, #16
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	4821      	ldr	r0, [pc, #132]	@ (8001554 <bmp280_init+0x2e8>)
 80014d0:	f004 f942 	bl	8005758 <HAL_UART_Transmit>


		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	if (dev->id == BME280_CHIP_ID) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001502:	2b60      	cmp	r3, #96	@ 0x60
 8001504:	d13a      	bne.n	800157c <bmp280_init+0x310>
        sprintf(buffer, "Configuring humidity oversampling\n");
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	491b      	ldr	r1, [pc, #108]	@ (8001578 <bmp280_init+0x30c>)
 800150c:	4618      	mov	r0, r3
 800150e:	f005 f9f9 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe feca 	bl	80002b0 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f107 0110 	add.w	r1, r7, #16
 8001524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001528:	480a      	ldr	r0, [pc, #40]	@ (8001554 <bmp280_init+0x2e8>)
 800152a:	f004 f915 	bl	8005758 <HAL_UART_Transmit>


		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001536:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800153a:	461a      	mov	r2, r3
 800153c:	21f2      	movs	r1, #242	@ 0xf2
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fe6f 	bl	8001222 <write_register8>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d018      	beq.n	800157c <bmp280_init+0x310>
			return false;
 800154a:	2300      	movs	r3, #0
 800154c:	e04b      	b.n	80015e6 <bmp280_init+0x37a>
 800154e:	bf00      	nop
 8001550:	08008b78 	.word	0x08008b78
 8001554:	20000440 	.word	0x20000440
 8001558:	08008b8c 	.word	0x08008b8c
 800155c:	08008ba4 	.word	0x08008ba4
 8001560:	08008bc0 	.word	0x08008bc0
 8001564:	08008bdc 	.word	0x08008bdc
 8001568:	08008bf4 	.word	0x08008bf4
 800156c:	08008c18 	.word	0x08008c18
 8001570:	08008c44 	.word	0x08008c44
 8001574:	08008c68 	.word	0x08008c68
 8001578:	08008c80 	.word	0x08008c80
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800157c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001580:	461a      	mov	r2, r3
 8001582:	21f4      	movs	r1, #244	@ 0xf4
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fe4c 	bl	8001222 <write_register8>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d015      	beq.n	80015bc <bmp280_init+0x350>
        sprintf(buffer, "BMP280_REG_CTRL something something\n");
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4916      	ldr	r1, [pc, #88]	@ (80015f0 <bmp280_init+0x384>)
 8001596:	4618      	mov	r0, r3
 8001598:	f005 f9b4 	bl	8006904 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fe85 	bl	80002b0 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f107 0110 	add.w	r1, r7, #16
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	4810      	ldr	r0, [pc, #64]	@ (80015f4 <bmp280_init+0x388>)
 80015b4:	f004 f8d0 	bl	8005758 <HAL_UART_Transmit>


		return false;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e014      	b.n	80015e6 <bmp280_init+0x37a>
	}
    sprintf(buffer, "before returning true\n");
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <bmp280_init+0x38c>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 f99e 	bl	8006904 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fe6f 	bl	80002b0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f107 0110 	add.w	r1, r7, #16
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <bmp280_init+0x388>)
 80015e0:	f004 f8ba 	bl	8005758 <HAL_UART_Transmit>

	return true;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3748      	adds	r7, #72	@ 0x48
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	08008ca4 	.word	0x08008ca4
 80015f4:	20000440 	.word	0x20000440
 80015f8:	08008ccc 	.word	0x08008ccc

080015fc <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	10da      	asrs	r2, r3, #3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800161e:	12db      	asrs	r3, r3, #11
 8001620:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	111b      	asrs	r3, r3, #4
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	8812      	ldrh	r2, [r2, #0]
 800162a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	1112      	asrs	r2, r2, #4
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	8809      	ldrh	r1, [r1, #0]
 8001634:	1a52      	subs	r2, r2, r1
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001642:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001646:	139b      	asrs	r3, r3, #14
 8001648:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	441a      	add	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3380      	adds	r3, #128	@ 0x80
 8001660:	121b      	asrs	r3, r3, #8
}
 8001662:	4618      	mov	r0, r3
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800166e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001672:	b0cc      	sub	sp, #304	@ 0x130
 8001674:	af00      	add	r7, sp, #0
 8001676:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800167a:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800167e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001686:	17da      	asrs	r2, r3, #31
 8001688:	461c      	mov	r4, r3
 800168a:	4615      	mov	r5, r2
 800168c:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001690:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001694:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001698:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800169c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016a0:	fb03 f102 	mul.w	r1, r3, r2
 80016a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	18ca      	adds	r2, r1, r3
 80016b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016b6:	fba3 8903 	umull	r8, r9, r3, r3
 80016ba:	eb02 0309 	add.w	r3, r2, r9
 80016be:	4699      	mov	r9, r3
 80016c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	17da      	asrs	r2, r3, #31
 80016cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80016d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80016d4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016d8:	4603      	mov	r3, r0
 80016da:	fb03 f209 	mul.w	r2, r3, r9
 80016de:	460b      	mov	r3, r1
 80016e0:	fb08 f303 	mul.w	r3, r8, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	4602      	mov	r2, r0
 80016e8:	fba8 1202 	umull	r1, r2, r8, r2
 80016ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80016f0:	460a      	mov	r2, r1
 80016f2:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80016f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80016fa:	4413      	add	r3, r2
 80016fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001700:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001704:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001708:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800170c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001710:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001714:	b21b      	sxth	r3, r3
 8001716:	17da      	asrs	r2, r3, #31
 8001718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800171c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001720:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001724:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001728:	462a      	mov	r2, r5
 800172a:	fb02 f203 	mul.w	r2, r2, r3
 800172e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001732:	4621      	mov	r1, r4
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	441a      	add	r2, r3
 800173a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800173e:	4621      	mov	r1, r4
 8001740:	fba3 1301 	umull	r1, r3, r3, r1
 8001744:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001748:	460b      	mov	r3, r1
 800174a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800174e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001752:	18d3      	adds	r3, r2, r3
 8001754:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001764:	462b      	mov	r3, r5
 8001766:	0459      	lsls	r1, r3, #17
 8001768:	4623      	mov	r3, r4
 800176a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800176e:	4623      	mov	r3, r4
 8001770:	0458      	lsls	r0, r3, #17
 8001772:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001776:	1814      	adds	r4, r2, r0
 8001778:	643c      	str	r4, [r7, #64]	@ 0x40
 800177a:	414b      	adcs	r3, r1
 800177c:	647b      	str	r3, [r7, #68]	@ 0x44
 800177e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001782:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800178a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800178e:	b21b      	sxth	r3, r3
 8001790:	17da      	asrs	r2, r3, #31
 8001792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001796:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017a6:	00d9      	lsls	r1, r3, #3
 80017a8:	2000      	movs	r0, #0
 80017aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017ae:	1814      	adds	r4, r2, r0
 80017b0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80017b2:	414b      	adcs	r3, r1
 80017b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017b6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80017ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017be:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017c6:	fb03 f102 	mul.w	r1, r3, r2
 80017ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	18ca      	adds	r2, r1, r3
 80017d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017dc:	fba3 1303 	umull	r1, r3, r3, r3
 80017e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017e4:	460b      	mov	r3, r1
 80017e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80017ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017ee:	18d3      	adds	r3, r2, r3
 80017f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	17da      	asrs	r2, r3, #31
 8001800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001804:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001808:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800180c:	462b      	mov	r3, r5
 800180e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001812:	4642      	mov	r2, r8
 8001814:	fb02 f203 	mul.w	r2, r2, r3
 8001818:	464b      	mov	r3, r9
 800181a:	4621      	mov	r1, r4
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	4622      	mov	r2, r4
 8001824:	4641      	mov	r1, r8
 8001826:	fba2 1201 	umull	r1, r2, r2, r1
 800182a:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800182e:	460a      	mov	r2, r1
 8001830:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001834:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001838:	4413      	add	r3, r2
 800183a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800184a:	4623      	mov	r3, r4
 800184c:	0a18      	lsrs	r0, r3, #8
 800184e:	462b      	mov	r3, r5
 8001850:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001854:	462b      	mov	r3, r5
 8001856:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800185c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001860:	b21b      	sxth	r3, r3
 8001862:	17da      	asrs	r2, r3, #31
 8001864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001868:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800186c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001870:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001874:	464a      	mov	r2, r9
 8001876:	fb02 f203 	mul.w	r2, r2, r3
 800187a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800187e:	4644      	mov	r4, r8
 8001880:	fb04 f303 	mul.w	r3, r4, r3
 8001884:	441a      	add	r2, r3
 8001886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800188a:	4644      	mov	r4, r8
 800188c:	fba3 4304 	umull	r4, r3, r3, r4
 8001890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001894:	4623      	mov	r3, r4
 8001896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800189a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800189e:	18d3      	adds	r3, r2, r3
 80018a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80018b0:	464c      	mov	r4, r9
 80018b2:	0323      	lsls	r3, r4, #12
 80018b4:	4644      	mov	r4, r8
 80018b6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018ba:	4644      	mov	r4, r8
 80018bc:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80018be:	1884      	adds	r4, r0, r2
 80018c0:	633c      	str	r4, [r7, #48]	@ 0x30
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80018cc:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80018d0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018d4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80018d8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80018dc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80018e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018e4:	88db      	ldrh	r3, [r3, #6]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2200      	movs	r2, #0
 80018ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018ee:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018f6:	462b      	mov	r3, r5
 80018f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80018fc:	4642      	mov	r2, r8
 80018fe:	fb02 f203 	mul.w	r2, r2, r3
 8001902:	464b      	mov	r3, r9
 8001904:	4621      	mov	r1, r4
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	4622      	mov	r2, r4
 800190e:	4641      	mov	r1, r8
 8001910:	fba2 1201 	umull	r1, r2, r2, r1
 8001914:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001918:	460a      	mov	r2, r1
 800191a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800191e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001922:	4413      	add	r3, r2
 8001924:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001934:	4629      	mov	r1, r5
 8001936:	104a      	asrs	r2, r1, #1
 8001938:	4629      	mov	r1, r5
 800193a:	17cb      	asrs	r3, r1, #31
 800193c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001940:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001944:	4313      	orrs	r3, r2
 8001946:	d101      	bne.n	800194c <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001948:	2300      	movs	r3, #0
 800194a:	e148      	b.n	8001bde <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800194c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001950:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001954:	17da      	asrs	r2, r3, #31
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800195a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800195e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001962:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800196c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001970:	07db      	lsls	r3, r3, #31
 8001972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001976:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800197a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800197e:	4621      	mov	r1, r4
 8001980:	1a89      	subs	r1, r1, r2
 8001982:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001984:	4629      	mov	r1, r5
 8001986:	eb61 0303 	sbc.w	r3, r1, r3
 800198a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800198c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001990:	4622      	mov	r2, r4
 8001992:	462b      	mov	r3, r5
 8001994:	1891      	adds	r1, r2, r2
 8001996:	6239      	str	r1, [r7, #32]
 8001998:	415b      	adcs	r3, r3
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
 800199c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a0:	4621      	mov	r1, r4
 80019a2:	1851      	adds	r1, r2, r1
 80019a4:	61b9      	str	r1, [r7, #24]
 80019a6:	4629      	mov	r1, r5
 80019a8:	414b      	adcs	r3, r1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019b8:	4649      	mov	r1, r9
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	4641      	mov	r1, r8
 80019be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c2:	4641      	mov	r1, r8
 80019c4:	018a      	lsls	r2, r1, #6
 80019c6:	4641      	mov	r1, r8
 80019c8:	1889      	adds	r1, r1, r2
 80019ca:	6139      	str	r1, [r7, #16]
 80019cc:	4649      	mov	r1, r9
 80019ce:	eb43 0101 	adc.w	r1, r3, r1
 80019d2:	6179      	str	r1, [r7, #20]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019e0:	4649      	mov	r1, r9
 80019e2:	008b      	lsls	r3, r1, #2
 80019e4:	4641      	mov	r1, r8
 80019e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019ea:	4641      	mov	r1, r8
 80019ec:	008a      	lsls	r2, r1, #2
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	4622      	mov	r2, r4
 80019f6:	189b      	adds	r3, r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	460b      	mov	r3, r1
 80019fc:	462a      	mov	r2, r5
 80019fe:	eb42 0303 	adc.w	r3, r2, r3
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a10:	4649      	mov	r1, r9
 8001a12:	008b      	lsls	r3, r1, #2
 8001a14:	4641      	mov	r1, r8
 8001a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	008a      	lsls	r2, r1, #2
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	4622      	mov	r2, r4
 8001a26:	189b      	adds	r3, r3, r2
 8001a28:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	eb42 0303 	adc.w	r3, r2, r3
 8001a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a34:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a38:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a3c:	f7ff f8d4 	bl	8000be8 <__aeabi_ldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a4c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	17da      	asrs	r2, r3, #31
 8001a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a58:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0b50      	lsrs	r0, r2, #13
 8001a66:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a6a:	1359      	asrs	r1, r3, #13
 8001a6c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a70:	462b      	mov	r3, r5
 8001a72:	fb00 f203 	mul.w	r2, r0, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	fb03 f301 	mul.w	r3, r3, r1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4622      	mov	r2, r4
 8001a80:	fba2 1200 	umull	r1, r2, r2, r0
 8001a84:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a88:	460a      	mov	r2, r1
 8001a8a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a92:	4413      	add	r3, r2
 8001a94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0b50      	lsrs	r0, r2, #13
 8001aa6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001aaa:	1359      	asrs	r1, r3, #13
 8001aac:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	fb00 f203 	mul.w	r2, r0, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	fb03 f301 	mul.w	r3, r3, r1
 8001abc:	4413      	add	r3, r2
 8001abe:	4622      	mov	r2, r4
 8001ac0:	fba2 1200 	umull	r1, r2, r2, r0
 8001ac4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ac8:	460a      	mov	r2, r1
 8001aca:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001ace:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	0e4a      	lsrs	r2, r1, #25
 8001ae8:	4629      	mov	r1, r5
 8001aea:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001aee:	4629      	mov	r1, r5
 8001af0:	164b      	asrs	r3, r1, #25
 8001af2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001afa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	17da      	asrs	r2, r3, #31
 8001b02:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b04:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b06:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b0a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b0e:	462a      	mov	r2, r5
 8001b10:	fb02 f203 	mul.w	r2, r2, r3
 8001b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b18:	4621      	mov	r1, r4
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b24:	4621      	mov	r1, r4
 8001b26:	fba2 1201 	umull	r1, r2, r2, r1
 8001b2a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b2e:	460a      	mov	r2, r1
 8001b30:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b34:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b38:	4413      	add	r3, r2
 8001b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	0cca      	lsrs	r2, r1, #19
 8001b4e:	4629      	mov	r1, r5
 8001b50:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b54:	4629      	mov	r1, r5
 8001b56:	14cb      	asrs	r3, r1, #19
 8001b58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001b5c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b60:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b64:	1884      	adds	r4, r0, r2
 8001b66:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001b68:	eb41 0303 	adc.w	r3, r1, r3
 8001b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b6e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b72:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b76:	4621      	mov	r1, r4
 8001b78:	1889      	adds	r1, r1, r2
 8001b7a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb43 0101 	adc.w	r1, r3, r1
 8001b82:	6579      	str	r1, [r7, #84]	@ 0x54
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b90:	4623      	mov	r3, r4
 8001b92:	0a18      	lsrs	r0, r3, #8
 8001b94:	462b      	mov	r3, r5
 8001b96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	1219      	asrs	r1, r3, #8
 8001b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ba2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	17da      	asrs	r2, r3, #31
 8001baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001bba:	464c      	mov	r4, r9
 8001bbc:	0123      	lsls	r3, r4, #4
 8001bbe:	4644      	mov	r4, r8
 8001bc0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bc4:	4644      	mov	r4, r8
 8001bc6:	0122      	lsls	r2, r4, #4
 8001bc8:	1884      	adds	r4, r0, r2
 8001bca:	603c      	str	r4, [r7, #0]
 8001bcc:	eb41 0303 	adc.w	r3, r1, r3
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001bd6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001bda:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001bea <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001bfc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	039a      	lsls	r2, r3, #14
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c08:	051b      	lsls	r3, r3, #20
 8001c0a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c12:	4619      	mov	r1, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c20:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001c28:	4611      	mov	r1, r2
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	fb01 f202 	mul.w	r2, r1, r2
 8001c30:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	7f09      	ldrb	r1, [r1, #28]
 8001c36:	4608      	mov	r0, r1
 8001c38:	6979      	ldr	r1, [r7, #20]
 8001c3a:	fb00 f101 	mul.w	r1, r0, r1
 8001c3e:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c40:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c44:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c48:	1292      	asrs	r2, r2, #10
 8001c4a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c54:	fb01 f202 	mul.w	r2, r1, r2
 8001c58:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c5c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	13db      	asrs	r3, r3, #15
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	13d2      	asrs	r2, r2, #15
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	7e12      	ldrb	r2, [r2, #24]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c88:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001c90:	bfa8      	it	ge
 8001c92:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001c96:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	131b      	asrs	r3, r3, #12
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	@ 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cbc:	2b60      	cmp	r3, #96	@ 0x60
 8001cbe:	d007      	beq.n	8001cd0 <bmp280_read_fixed+0x28>
		if (humidity)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <bmp280_read_fixed+0x32>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	e000      	b.n	8001cdc <bmp280_read_fixed+0x34>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f107 0218 	add.w	r2, r7, #24
 8001ce6:	21f7      	movs	r1, #247	@ 0xf7
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff f990 	bl	800100e <read_data>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <bmp280_read_fixed+0x50>
		return false;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e038      	b.n	8001d6a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001cf8:	7e3b      	ldrb	r3, [r7, #24]
 8001cfa:	031a      	lsls	r2, r3, #12
 8001cfc:	7e7b      	ldrb	r3, [r7, #25]
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4313      	orrs	r3, r2
 8001d02:	7eba      	ldrb	r2, [r7, #26]
 8001d04:	0912      	lsrs	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001d0c:	7efb      	ldrb	r3, [r7, #27]
 8001d0e:	031a      	lsls	r2, r3, #12
 8001d10:	7f3b      	ldrb	r3, [r7, #28]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4313      	orrs	r3, r2
 8001d16:	7f7a      	ldrb	r2, [r7, #29]
 8001d18:	0912      	lsrs	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	461a      	mov	r2, r3
 8001d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff fc67 	bl	80015fc <compensate_temperature>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	461a      	mov	r2, r3
 8001d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff fc97 	bl	800166e <compensate_pressure>
 8001d40:	4602      	mov	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00d      	beq.n	8001d68 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001d4c:	7fbb      	ldrb	r3, [r7, #30]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	7ffa      	ldrb	r2, [r7, #31]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6a39      	ldr	r1, [r7, #32]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff ff44 	bl	8001bea <compensate_humidity>
 8001d62:	4602      	mov	r2, r0
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3730      	adds	r7, #48	@ 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <bmp280_read_float+0x1a>
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	e000      	b.n	8001d90 <bmp280_read_float+0x1c>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f107 0218 	add.w	r2, r7, #24
 8001d94:	f107 011c 	add.w	r1, r7, #28
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff ff85 	bl	8001ca8 <bmp280_read_fixed>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d028      	beq.n	8001df6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dae:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e00 <bmp280_read_float+0x8c>
 8001db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dc6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001e04 <bmp280_read_float+0x90>
 8001dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001e08 <bmp280_read_float+0x94>
 8001de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <bmp280_read_float+0x84>
	}

	return false;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	42c80000 	.word	0x42c80000
 8001e04:	43800000 	.word	0x43800000
 8001e08:	44800000 	.word	0x44800000

08001e0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001e98:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <MX_GPIO_Init+0xd8>)
 8001e9a:	f001 fa87 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ea4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <MX_GPIO_Init+0xdc>)
 8001eb6:	f001 f8e5 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001eba:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <MX_GPIO_Init+0xd8>)
 8001ed4:	f001 f8d6 	bl	8003084 <HAL_GPIO_Init>

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020800 	.word	0x40020800

08001eec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001ef2:	4a13      	ldr	r2, [pc, #76]	@ (8001f40 <MX_I2C1_Init+0x54>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <MX_I2C1_Init+0x58>)
 8001efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f2a:	f001 fa59 	bl	80033e0 <HAL_I2C_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f34:	f000 fd00 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000200 	.word	0x20000200
 8001f40:	40005400 	.word	0x40005400
 8001f44:	000186a0 	.word	0x000186a0

08001f48 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f4e:	4a13      	ldr	r2, [pc, #76]	@ (8001f9c <MX_I2C2_Init+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f54:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <MX_I2C2_Init+0x58>)
 8001f56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f86:	f001 fa2b 	bl	80033e0 <HAL_I2C_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f90:	f000 fcd2 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000254 	.word	0x20000254
 8001f9c:	40005800 	.word	0x40005800
 8001fa0:	000186a0 	.word	0x000186a0

08001fa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	@ (80020cc <HAL_I2C_MspInit+0x128>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12d      	bne.n	8002022 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a40      	ldr	r2, [pc, #256]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4835      	ldr	r0, [pc, #212]	@ (80020d4 <HAL_I2C_MspInit+0x130>)
 8002000:	f001 f840 	bl	8003084 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	4b31      	ldr	r3, [pc, #196]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a30      	ldr	r2, [pc, #192]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800200e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002020:	e050      	b.n	80020c4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2c      	ldr	r2, [pc, #176]	@ (80020d8 <HAL_I2C_MspInit+0x134>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d14b      	bne.n	80020c4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	6313      	str	r3, [r2, #48]	@ 0x30
 800203c:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a1f      	ldr	r2, [pc, #124]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002064:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206a:	2312      	movs	r3, #18
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002076:	2304      	movs	r3, #4
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4814      	ldr	r0, [pc, #80]	@ (80020d4 <HAL_I2C_MspInit+0x130>)
 8002082:	f000 ffff 	bl	8003084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208c:	2312      	movs	r3, #18
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002098:	2304      	movs	r3, #4
 800209a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	480e      	ldr	r0, [pc, #56]	@ (80020dc <HAL_I2C_MspInit+0x138>)
 80020a4:	f000 ffee 	bl	8003084 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40005400 	.word	0x40005400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40005800 	.word	0x40005800
 80020dc:	40020800 	.word	0x40020800

080020e0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80020ea:	4a38      	ldr	r2, [pc, #224]	@ (80021cc <HD44780_Init+0xec>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80020f0:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <HD44780_Init+0xf0>)
 80020f2:	2208      	movs	r2, #8
 80020f4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80020f6:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HD44780_Init+0xf4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80020fc:	4b33      	ldr	r3, [pc, #204]	@ (80021cc <HD44780_Init+0xec>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d907      	bls.n	8002114 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002104:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HD44780_Init+0xf4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HD44780_Init+0xf4>)
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e006      	b.n	8002122 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002114:	4b2f      	ldr	r3, [pc, #188]	@ (80021d4 <HD44780_Init+0xf4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HD44780_Init+0xf4>)
 8002120:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8002122:	f000 f985 	bl	8002430 <DelayInit>
  HAL_Delay(50);
 8002126:	2032      	movs	r0, #50	@ 0x32
 8002128:	f000 fea2 	bl	8002e70 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800212c:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HD44780_Init+0xf0>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f943 	bl	80023bc <ExpanderWrite>
  HAL_Delay(1000);
 8002136:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800213a:	f000 fe99 	bl	8002e70 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800213e:	2030      	movs	r0, #48	@ 0x30
 8002140:	f000 f92b 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002144:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002148:	f000 f99c 	bl	8002484 <DelayUS>

  Write4Bits(0x03 << 4);
 800214c:	2030      	movs	r0, #48	@ 0x30
 800214e:	f000 f924 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002152:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002156:	f000 f995 	bl	8002484 <DelayUS>

  Write4Bits(0x03 << 4);
 800215a:	2030      	movs	r0, #48	@ 0x30
 800215c:	f000 f91d 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002160:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002164:	f000 f98e 	bl	8002484 <DelayUS>

  Write4Bits(0x02 << 4);
 8002168:	2020      	movs	r0, #32
 800216a:	f000 f916 	bl	800239a <Write4Bits>
  DelayUS(100);
 800216e:	2064      	movs	r0, #100	@ 0x64
 8002170:	f000 f988 	bl	8002484 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002174:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <HD44780_Init+0xf4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f8ce 	bl	8002320 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HD44780_Init+0xf8>)
 8002186:	2204      	movs	r2, #4
 8002188:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800218a:	f000 f875 	bl	8002278 <HD44780_Display>
  HD44780_Clear();
 800218e:	f000 f82b 	bl	80021e8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HD44780_Init+0xfc>)
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <HD44780_Init+0xfc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f8bc 	bl	8002320 <SendCommand>
  DelayUS(4500);
 80021a8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80021ac:	f000 f96a 	bl	8002484 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80021b0:	490b      	ldr	r1, [pc, #44]	@ (80021e0 <HD44780_Init+0x100>)
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f876 	bl	80022a4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80021b8:	490a      	ldr	r1, [pc, #40]	@ (80021e4 <HD44780_Init+0x104>)
 80021ba:	2001      	movs	r0, #1
 80021bc:	f000 f872 	bl	80022a4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80021c0:	f000 f81d 	bl	80021fe <HD44780_Home>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200002ab 	.word	0x200002ab
 80021d0:	200002ac 	.word	0x200002ac
 80021d4:	200002a8 	.word	0x200002a8
 80021d8:	200002a9 	.word	0x200002a9
 80021dc:	200002aa 	.word	0x200002aa
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000008 	.word	0x20000008

080021e8 <HD44780_Clear>:

void HD44780_Clear()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 f897 	bl	8002320 <SendCommand>
  DelayUS(2000);
 80021f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80021f6:	f000 f945 	bl	8002484 <DelayUS>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HD44780_Home>:

void HD44780_Home()
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8002202:	2002      	movs	r0, #2
 8002204:	f000 f88c 	bl	8002320 <SendCommand>
  DelayUS(2000);
 8002208:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800220c:	f000 f93a 	bl	8002484 <DelayUS>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	460a      	mov	r2, r1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HD44780_SetCursor+0x5c>)
 8002226:	f107 0408 	add.w	r4, r7, #8
 800222a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HD44780_SetCursor+0x60>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	79ba      	ldrb	r2, [r7, #6]
 8002236:	429a      	cmp	r2, r3
 8002238:	d303      	bcc.n	8002242 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HD44780_SetCursor+0x60>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	3b01      	subs	r3, #1
 8002240:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3318      	adds	r3, #24
 8002248:	443b      	add	r3, r7
 800224a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	4413      	add	r3, r2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	b25b      	sxtb	r3, r3
 8002258:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800225c:	b25b      	sxtb	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f85d 	bl	8002320 <SendCommand>
}
 8002266:	bf00      	nop
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	bf00      	nop
 8002270:	08008ce4 	.word	0x08008ce4
 8002274:	200002ab 	.word	0x200002ab

08002278 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HD44780_Display+0x28>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HD44780_Display+0x28>)
 8002288:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HD44780_Display+0x28>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f843 	bl	8002320 <SendCommand>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200002a9 	.word	0x200002a9

080022a4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f82a 	bl	8002320 <SendCommand>
  for (int i=0; i<8; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e009      	b.n	80022e6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f82e 	bl	800233c <SendChar>
  for (int i=0; i<8; i++)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b07      	cmp	r3, #7
 80022ea:	ddf2      	ble.n	80022d2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80022fe:	e006      	b.n	800230e <HD44780_PrintStr+0x18>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f817 	bl	800233c <SendChar>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f4      	bne.n	8002300 <HD44780_PrintStr+0xa>
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f812 	bl	8002358 <Send>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <SendChar>:

static void SendChar(uint8_t ch)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2101      	movs	r1, #1
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f804 	bl	8002358 <Send>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f023 030f 	bic.w	r3, r3, #15
 800236e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	79bb      	ldrb	r3, [r7, #6]
 800237a:	4313      	orrs	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f80b 	bl	800239a <Write4Bits>
  Write4Bits((lownib)|mode);
 8002384:	7bba      	ldrb	r2, [r7, #14]
 8002386:	79bb      	ldrb	r3, [r7, #6]
 8002388:	4313      	orrs	r3, r2
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f804 	bl	800239a <Write4Bits>
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f808 	bl	80023bc <ExpanderWrite>
  PulseEnable(value);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f820 	bl	80023f4 <PulseEnable>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <ExpanderWrite+0x30>)
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80023d2:	f107 020f 	add.w	r2, r7, #15
 80023d6:	230a      	movs	r3, #10
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	214e      	movs	r1, #78	@ 0x4e
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <ExpanderWrite+0x34>)
 80023e0:	f001 f942 	bl	8003668 <HAL_I2C_Master_Transmit>
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200002ac 	.word	0x200002ac
 80023f0:	20000254 	.word	0x20000254

080023f4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffd8 	bl	80023bc <ExpanderWrite>
  DelayUS(20);
 800240c:	2014      	movs	r0, #20
 800240e:	f000 f839 	bl	8002484 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ffce 	bl	80023bc <ExpanderWrite>
  DelayUS(20);
 8002420:	2014      	movs	r0, #20
 8002422:	f000 f82f 	bl	8002484 <DelayUS>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <DelayInit>:

static void DelayInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <DelayInit+0x4c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a10      	ldr	r2, [pc, #64]	@ (800247c <DelayInit+0x4c>)
 800243a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800243e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002440:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <DelayInit+0x4c>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <DelayInit+0x4c>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800244a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <DelayInit+0x50>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <DelayInit+0x50>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <DelayInit+0x50>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a08      	ldr	r2, [pc, #32]	@ (8002480 <DelayInit+0x50>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <DelayInit+0x50>)
 8002466:	2200      	movs	r2, #0
 8002468:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800246a:	bf00      	nop
  __ASM volatile ("NOP");
 800246c:	bf00      	nop
  __ASM volatile ("NOP");
 800246e:	bf00      	nop
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000edf0 	.word	0xe000edf0
 8002480:	e0001000 	.word	0xe0001000

08002484 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <DelayUS+0x44>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0e      	ldr	r2, [pc, #56]	@ (80024cc <DelayUS+0x48>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9a      	lsrs	r2, r3, #18
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <DelayUS+0x4c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <DelayUS+0x4c>)
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f6      	bhi.n	80024a6 <DelayUS+0x22>
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000010 	.word	0x20000010
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	e0001000 	.word	0xe0001000

080024d4 <TIM7_Delay.0>:
  bmp280.i2c = &hi2c1;

  HAL_TIM_Base_Start(&htim7);

  void TIM7_Delay(uint32_t ms)
  {
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	f8c7 c000 	str.w	ip, [r7]
      for (uint32_t i = 0; i < ms; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e00c      	b.n	8002500 <TIM7_Delay.0+0x2c>
      {
          __HAL_TIM_SET_COUNTER(&htim7, 0);  // Reset the counter to 0
 80024e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <TIM7_Delay.0+0x44>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24
          while (__HAL_TIM_GET_COUNTER(&htim7) < 6)  // Wait for 1 ms
 80024ee:	bf00      	nop
 80024f0:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <TIM7_Delay.0+0x44>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d9fa      	bls.n	80024f0 <TIM7_Delay.0+0x1c>
      for (uint32_t i = 0; i < ms; i++)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d3ee      	bcc.n	80024e6 <TIM7_Delay.0+0x12>
          {
              // Busy wait
          }
      }
  }
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200003f8 	.word	0x200003f8

0800251c <main>:
{
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	b08a      	sub	sp, #40	@ 0x28
 8002520:	af02      	add	r7, sp, #8
int main(void)
 8002522:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002526:	61bb      	str	r3, [r7, #24]
  HAL_Init();
 8002528:	f000 fc30 	bl	8002d8c <HAL_Init>
  SystemClock_Config();
 800252c:	f000 f996 	bl	800285c <SystemClock_Config>
  MX_GPIO_Init();
 8002530:	f7ff fc6c 	bl	8001e0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002534:	f7ff fcda 	bl	8001eec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002538:	f000 fb8c 	bl	8002c54 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800253c:	f7ff fd04 	bl	8001f48 <MX_I2C2_Init>
  MX_TIM7_Init();
 8002540:	f000 fb30 	bl	8002ba4 <MX_TIM7_Init>
  HD44780_Init(2);
 8002544:	2002      	movs	r0, #2
 8002546:	f7ff fdcb 	bl	80020e0 <HD44780_Init>
  HD44780_Clear();
 800254a:	f7ff fe4d 	bl	80021e8 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 800254e:	2100      	movs	r1, #0
 8002550:	2000      	movs	r0, #0
 8002552:	f7ff fe5f 	bl	8002214 <HD44780_SetCursor>
  bmp280_init_default_params(&bmp280.params);
 8002556:	48a9      	ldr	r0, [pc, #676]	@ (80027fc <main+0x2e0>)
 8002558:	f7fe fd0e 	bl	8000f78 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800255c:	4ba8      	ldr	r3, [pc, #672]	@ (8002800 <main+0x2e4>)
 800255e:	2276      	movs	r2, #118	@ 0x76
 8002560:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8002562:	4ba7      	ldr	r3, [pc, #668]	@ (8002800 <main+0x2e4>)
 8002564:	4aa7      	ldr	r2, [pc, #668]	@ (8002804 <main+0x2e8>)
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_TIM_Base_Start(&htim7);
 8002568:	48a7      	ldr	r0, [pc, #668]	@ (8002808 <main+0x2ec>)
 800256a:	f002 ff15 	bl	8005398 <HAL_TIM_Base_Start>


  while (!bmp280_init(&bmp280, &bmp280.params))
 800256e:	e013      	b.n	8002598 <main+0x7c>
  {
      size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8002570:	49a6      	ldr	r1, [pc, #664]	@ (800280c <main+0x2f0>)
 8002572:	48a7      	ldr	r0, [pc, #668]	@ (8002810 <main+0x2f4>)
 8002574:	f004 f9c6 	bl	8006904 <siprintf>
 8002578:	4603      	mov	r3, r0
 800257a:	b29a      	uxth	r2, r3
 800257c:	4ba5      	ldr	r3, [pc, #660]	@ (8002814 <main+0x2f8>)
 800257e:	801a      	strh	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002580:	4ba4      	ldr	r3, [pc, #656]	@ (8002814 <main+0x2f8>)
 8002582:	881a      	ldrh	r2, [r3, #0]
 8002584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002588:	49a1      	ldr	r1, [pc, #644]	@ (8002810 <main+0x2f4>)
 800258a:	48a3      	ldr	r0, [pc, #652]	@ (8002818 <main+0x2fc>)
 800258c:	f003 f8e4 	bl	8005758 <HAL_UART_Transmit>
      HAL_Delay(2000);
 8002590:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002594:	f000 fc6c 	bl	8002e70 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params))
 8002598:	4998      	ldr	r1, [pc, #608]	@ (80027fc <main+0x2e0>)
 800259a:	4899      	ldr	r0, [pc, #612]	@ (8002800 <main+0x2e4>)
 800259c:	f7fe fe66 	bl	800126c <bmp280_init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f083 0301 	eor.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e1      	bne.n	8002570 <main+0x54>
  }

  bool bme280p = bmp280.id == BME280_CHIP_ID;
 80025ac:	4b94      	ldr	r3, [pc, #592]	@ (8002800 <main+0x2e4>)
 80025ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80025b2:	2b60      	cmp	r3, #96	@ 0x60
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	77fb      	strb	r3, [r7, #31]
  size = sprintf((char *)Data, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <main+0xaa>
 80025c2:	4b96      	ldr	r3, [pc, #600]	@ (800281c <main+0x300>)
 80025c4:	e000      	b.n	80025c8 <main+0xac>
 80025c6:	4b96      	ldr	r3, [pc, #600]	@ (8002820 <main+0x304>)
 80025c8:	461a      	mov	r2, r3
 80025ca:	4996      	ldr	r1, [pc, #600]	@ (8002824 <main+0x308>)
 80025cc:	4890      	ldr	r0, [pc, #576]	@ (8002810 <main+0x2f4>)
 80025ce:	f004 f999 	bl	8006904 <siprintf>
 80025d2:	4603      	mov	r3, r0
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002814 <main+0x2f8>)
 80025d8:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 80025da:	4b8e      	ldr	r3, [pc, #568]	@ (8002814 <main+0x2f8>)
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025e2:	498b      	ldr	r1, [pc, #556]	@ (8002810 <main+0x2f4>)
 80025e4:	488c      	ldr	r0, [pc, #560]	@ (8002818 <main+0x2fc>)
 80025e6:	f003 f8b7 	bl	8005758 <HAL_UART_Transmit>

  // Initialize the GPIO pin (PA8)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable GPIOA clock
 80025f8:	2300      	movs	r3, #0
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002828 <main+0x30c>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	4a89      	ldr	r2, [pc, #548]	@ (8002828 <main+0x30c>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6313      	str	r3, [r2, #48]	@ 0x30
 8002608:	4b87      	ldr	r3, [pc, #540]	@ (8002828 <main+0x30c>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	683b      	ldr	r3, [r7, #0]

  // PA8 configuration
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002618:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261a:	2301      	movs	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	4619      	mov	r1, r3
 800262a:	4880      	ldr	r0, [pc, #512]	@ (800282c <main+0x310>)
 800262c:	f000 fd2a 	bl	8003084 <HAL_GPIO_Init>

  // PA9 configuration
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002630:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	2301      	movs	r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4879      	ldr	r0, [pc, #484]	@ (800282c <main+0x310>)
 8002648:	f000 fd1c 	bl	8003084 <HAL_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {HAL_Delay(100);
 800264c:	2064      	movs	r0, #100	@ 0x64
 800264e:	f000 fc0f 	bl	8002e70 <HAL_Delay>
  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8002652:	e013      	b.n	800267c <main+0x160>
      size = sprintf((char *)Data,
 8002654:	4976      	ldr	r1, [pc, #472]	@ (8002830 <main+0x314>)
 8002656:	486e      	ldr	r0, [pc, #440]	@ (8002810 <main+0x2f4>)
 8002658:	f004 f954 	bl	8006904 <siprintf>
 800265c:	4603      	mov	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b6c      	ldr	r3, [pc, #432]	@ (8002814 <main+0x2f8>)
 8002662:	801a      	strh	r2, [r3, #0]
              "Temperature/pressure reading failed\r\n");
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002664:	4b6b      	ldr	r3, [pc, #428]	@ (8002814 <main+0x2f8>)
 8002666:	881a      	ldrh	r2, [r3, #0]
 8002668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800266c:	4968      	ldr	r1, [pc, #416]	@ (8002810 <main+0x2f4>)
 800266e:	486a      	ldr	r0, [pc, #424]	@ (8002818 <main+0x2fc>)
 8002670:	f003 f872 	bl	8005758 <HAL_UART_Transmit>
      HAL_Delay(2000);
 8002674:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002678:	f000 fbfa 	bl	8002e70 <HAL_Delay>
  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800267c:	4b6d      	ldr	r3, [pc, #436]	@ (8002834 <main+0x318>)
 800267e:	4a6e      	ldr	r2, [pc, #440]	@ (8002838 <main+0x31c>)
 8002680:	496e      	ldr	r1, [pc, #440]	@ (800283c <main+0x320>)
 8002682:	485f      	ldr	r0, [pc, #380]	@ (8002800 <main+0x2e4>)
 8002684:	f7ff fb76 	bl	8001d74 <bmp280_read_float>
 8002688:	4603      	mov	r3, r0
 800268a:	f083 0301 	eor.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1df      	bne.n	8002654 <main+0x138>
  }

  size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C",
 8002694:	4b68      	ldr	r3, [pc, #416]	@ (8002838 <main+0x31c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff75 	bl	8000588 <__aeabi_f2d>
 800269e:	4604      	mov	r4, r0
 80026a0:	460d      	mov	r5, r1
 80026a2:	4b66      	ldr	r3, [pc, #408]	@ (800283c <main+0x320>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff6e 	bl	8000588 <__aeabi_f2d>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	e9cd 2300 	strd	r2, r3, [sp]
 80026b4:	4622      	mov	r2, r4
 80026b6:	462b      	mov	r3, r5
 80026b8:	4961      	ldr	r1, [pc, #388]	@ (8002840 <main+0x324>)
 80026ba:	4855      	ldr	r0, [pc, #340]	@ (8002810 <main+0x2f4>)
 80026bc:	f004 f922 	bl	8006904 <siprintf>
 80026c0:	4603      	mov	r3, r0
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <main+0x2f8>)
 80026c6:	801a      	strh	r2, [r3, #0]
          pressure, temperature);
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 80026c8:	4b52      	ldr	r3, [pc, #328]	@ (8002814 <main+0x2f8>)
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d0:	494f      	ldr	r1, [pc, #316]	@ (8002810 <main+0x2f4>)
 80026d2:	4851      	ldr	r0, [pc, #324]	@ (8002818 <main+0x2fc>)
 80026d4:	f003 f840 	bl	8005758 <HAL_UART_Transmit>

  HD44780_Clear();
 80026d8:	f7ff fd86 	bl	80021e8 <HD44780_Clear>

  HD44780_SetCursor(0, 0);
 80026dc:	2100      	movs	r1, #0
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff fd98 	bl	8002214 <HD44780_SetCursor>
  HD44780_PrintStr("Temp:");
 80026e4:	4857      	ldr	r0, [pc, #348]	@ (8002844 <main+0x328>)
 80026e6:	f7ff fe06 	bl	80022f6 <HD44780_PrintStr>

  HD44780_SetCursor(6, 0);
 80026ea:	2100      	movs	r1, #0
 80026ec:	2006      	movs	r0, #6
 80026ee:	f7ff fd91 	bl	8002214 <HD44780_SetCursor>
  size = sprintf((char *)Data, "%.2f C", temperature);
 80026f2:	4b52      	ldr	r3, [pc, #328]	@ (800283c <main+0x320>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd ff46 	bl	8000588 <__aeabi_f2d>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4951      	ldr	r1, [pc, #324]	@ (8002848 <main+0x32c>)
 8002702:	4843      	ldr	r0, [pc, #268]	@ (8002810 <main+0x2f4>)
 8002704:	f004 f8fe 	bl	8006904 <siprintf>
 8002708:	4603      	mov	r3, r0
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b41      	ldr	r3, [pc, #260]	@ (8002814 <main+0x2f8>)
 800270e:	801a      	strh	r2, [r3, #0]
  HD44780_PrintStr((char *)Data);
 8002710:	483f      	ldr	r0, [pc, #252]	@ (8002810 <main+0x2f4>)
 8002712:	f7ff fdf0 	bl	80022f6 <HD44780_PrintStr>

  HD44780_SetCursor(0, 1);
 8002716:	2101      	movs	r1, #1
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff fd7b 	bl	8002214 <HD44780_SetCursor>
  HD44780_PrintStr("Humidity:");
 800271e:	484b      	ldr	r0, [pc, #300]	@ (800284c <main+0x330>)
 8002720:	f7ff fde9 	bl	80022f6 <HD44780_PrintStr>

  HD44780_SetCursor(10, 1);
 8002724:	2101      	movs	r1, #1
 8002726:	200a      	movs	r0, #10
 8002728:	f7ff fd74 	bl	8002214 <HD44780_SetCursor>
  size = sprintf((char *)Data, "%.2f%%", humidity);
 800272c:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <main+0x318>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff29 	bl	8000588 <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4945      	ldr	r1, [pc, #276]	@ (8002850 <main+0x334>)
 800273c:	4834      	ldr	r0, [pc, #208]	@ (8002810 <main+0x2f4>)
 800273e:	f004 f8e1 	bl	8006904 <siprintf>
 8002742:	4603      	mov	r3, r0
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <main+0x2f8>)
 8002748:	801a      	strh	r2, [r3, #0]
  HD44780_PrintStr((char *)Data);
 800274a:	4831      	ldr	r0, [pc, #196]	@ (8002810 <main+0x2f4>)
 800274c:	f7ff fdd3 	bl	80022f6 <HD44780_PrintStr>

  if (temperature > 30.0f) {
 8002750:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <main+0x320>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800275a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	dd0c      	ble.n	800277e <main+0x262>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002764:	2201      	movs	r2, #1
 8002766:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800276a:	4830      	ldr	r0, [pc, #192]	@ (800282c <main+0x310>)
 800276c:	f000 fe1e 	bl	80033ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002776:	482d      	ldr	r0, [pc, #180]	@ (800282c <main+0x310>)
 8002778:	f000 fe18 	bl	80033ac <HAL_GPIO_WritePin>
 800277c:	e00b      	b.n	8002796 <main+0x27a>
  } else {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002784:	4829      	ldr	r0, [pc, #164]	@ (800282c <main+0x310>)
 8002786:	f000 fe11 	bl	80033ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800278a:	2201      	movs	r2, #1
 800278c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002790:	4826      	ldr	r0, [pc, #152]	@ (800282c <main+0x310>)
 8002792:	f000 fe0b 	bl	80033ac <HAL_GPIO_WritePin>

  }

  if (bme280p) {
 8002796:	7ffb      	ldrb	r3, [r7, #31]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d017      	beq.n	80027cc <main+0x2b0>
      size = sprintf((char *)Data,", Humidity: %.2f\r\n", humidity);
 800279c:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <main+0x318>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fef1 	bl	8000588 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	492a      	ldr	r1, [pc, #168]	@ (8002854 <main+0x338>)
 80027ac:	4818      	ldr	r0, [pc, #96]	@ (8002810 <main+0x2f4>)
 80027ae:	f004 f8a9 	bl	8006904 <siprintf>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b17      	ldr	r3, [pc, #92]	@ (8002814 <main+0x2f8>)
 80027b8:	801a      	strh	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 80027ba:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <main+0x2f8>)
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c2:	4913      	ldr	r1, [pc, #76]	@ (8002810 <main+0x2f4>)
 80027c4:	4814      	ldr	r0, [pc, #80]	@ (8002818 <main+0x2fc>)
 80027c6:	f002 ffc7 	bl	8005758 <HAL_UART_Transmit>
 80027ca:	e00f      	b.n	80027ec <main+0x2d0>
  } else {
      size = sprintf((char *)Data, "\r\n");
 80027cc:	4922      	ldr	r1, [pc, #136]	@ (8002858 <main+0x33c>)
 80027ce:	4810      	ldr	r0, [pc, #64]	@ (8002810 <main+0x2f4>)
 80027d0:	f004 f898 	bl	8006904 <siprintf>
 80027d4:	4603      	mov	r3, r0
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <main+0x2f8>)
 80027da:	801a      	strh	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 80027dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <main+0x2f8>)
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027e4:	490a      	ldr	r1, [pc, #40]	@ (8002810 <main+0x2f4>)
 80027e6:	480c      	ldr	r0, [pc, #48]	@ (8002818 <main+0x2fc>)
 80027e8:	f002 ffb6 	bl	8005758 <HAL_UART_Transmit>
  }

  TIM7_Delay(5000);
 80027ec:	f107 0318 	add.w	r3, r7, #24
 80027f0:	469c      	mov	ip, r3
 80027f2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80027f6:	f7ff fe6d 	bl	80024d4 <TIM7_Delay.0>
  {HAL_Delay(100);
 80027fa:	e727      	b.n	800264c <main+0x130>
 80027fc:	200002dc 	.word	0x200002dc
 8002800:	200002b0 	.word	0x200002b0
 8002804:	20000200 	.word	0x20000200
 8002808:	200003f8 	.word	0x200003f8
 800280c:	08008cf4 	.word	0x08008cf4
 8002810:	200002f4 	.word	0x200002f4
 8002814:	200002f0 	.word	0x200002f0
 8002818:	20000440 	.word	0x20000440
 800281c:	08008d14 	.word	0x08008d14
 8002820:	08008d1c 	.word	0x08008d1c
 8002824:	08008d24 	.word	0x08008d24
 8002828:	40023800 	.word	0x40023800
 800282c:	40020000 	.word	0x40020000
 8002830:	08008d38 	.word	0x08008d38
 8002834:	200002ec 	.word	0x200002ec
 8002838:	200002e4 	.word	0x200002e4
 800283c:	200002e8 	.word	0x200002e8
 8002840:	08008d60 	.word	0x08008d60
 8002844:	08008d88 	.word	0x08008d88
 8002848:	08008d90 	.word	0x08008d90
 800284c:	08008d98 	.word	0x08008d98
 8002850:	08008da4 	.word	0x08008da4
 8002854:	08008dac 	.word	0x08008dac
 8002858:	08008dc0 	.word	0x08008dc0

0800285c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b094      	sub	sp, #80	@ 0x50
 8002860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	2234      	movs	r2, #52	@ 0x34
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f004 f8ad 	bl	80069ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002870:	f107 0308 	add.w	r3, r7, #8
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <SystemClock_Config+0xd4>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	4a29      	ldr	r2, [pc, #164]	@ (8002930 <SystemClock_Config+0xd4>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002890:	4b27      	ldr	r3, [pc, #156]	@ (8002930 <SystemClock_Config+0xd4>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800289c:	2300      	movs	r3, #0
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <SystemClock_Config+0xd8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80028a8:	4a22      	ldr	r2, [pc, #136]	@ (8002934 <SystemClock_Config+0xd8>)
 80028aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <SystemClock_Config+0xd8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028bc:	2302      	movs	r3, #2
 80028be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c0:	2301      	movs	r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028c4:	2310      	movs	r3, #16
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c8:	2302      	movs	r3, #2
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80028d0:	2310      	movs	r3, #16
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80028d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80028d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028da:	2304      	movs	r3, #4
 80028dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028de:	2302      	movs	r3, #2
 80028e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028e2:	2302      	movs	r3, #2
 80028e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e6:	f107 031c 	add.w	r3, r7, #28
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 fa66 	bl	8004dbc <HAL_RCC_OscConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80028f6:	f000 f81f 	bl	8002938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fa:	230f      	movs	r3, #15
 80028fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028fe:	2302      	movs	r3, #2
 8002900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800290a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	2102      	movs	r1, #2
 8002916:	4618      	mov	r0, r3
 8002918:	f001 ff06 	bl	8004728 <HAL_RCC_ClockConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002922:	f000 f809 	bl	8002938 <Error_Handler>
  }
}
 8002926:	bf00      	nop
 8002928:	3750      	adds	r7, #80	@ 0x50
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40007000 	.word	0x40007000

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800293c:	b672      	cpsid	i
}
 800293e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <Error_Handler+0x8>

08002944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_MspInit+0x4c>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	4a0f      	ldr	r2, [pc, #60]	@ (8002990 <HAL_MspInit+0x4c>)
 8002954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002958:	6453      	str	r3, [r2, #68]	@ 0x44
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_MspInit+0x4c>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_MspInit+0x4c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a08      	ldr	r2, [pc, #32]	@ (8002990 <HAL_MspInit+0x4c>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_MspInit+0x4c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002982:	2007      	movs	r0, #7
 8002984:	f000 fb4a 	bl	800301c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800

08002994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <NMI_Handler+0x4>

0800299c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <HardFault_Handler+0x4>

080029a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <MemManage_Handler+0x4>

080029ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <UsageFault_Handler+0x4>

080029bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ea:	f000 fa21 	bl	8002e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  return 1;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <_kill>:

int _kill(int pid, int sig)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a0c:	f004 f830 	bl	8006a70 <__errno>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2216      	movs	r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
  return -1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_exit>:

void _exit (int status)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ffe7 	bl	8002a02 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <_exit+0x12>

08002a38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e00a      	b.n	8002a60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a4a:	f3af 8000 	nop.w
 8002a4e:	4601      	mov	r1, r0
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	60ba      	str	r2, [r7, #8]
 8002a56:	b2ca      	uxtb	r2, r1
 8002a58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	dbf0      	blt.n	8002a4a <_read+0x12>
  }

  return len;
 8002a68:	687b      	ldr	r3, [r7, #4]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e009      	b.n	8002a98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	60ba      	str	r2, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	dbf1      	blt.n	8002a84 <_write+0x12>
  }
  return len;
 8002aa0:	687b      	ldr	r3, [r7, #4]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_close>:

int _close(int file)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_isatty>:

int _isatty(int file)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b1c:	4a14      	ldr	r2, [pc, #80]	@ (8002b70 <_sbrk+0x5c>)
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <_sbrk+0x60>)
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b28:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b30:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <_sbrk+0x64>)
 8002b32:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <_sbrk+0x68>)
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b36:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d207      	bcs.n	8002b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b44:	f003 ff94 	bl	8006a70 <__errno>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	e009      	b.n	8002b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b54:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <_sbrk+0x64>)
 8002b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20020000 	.word	0x20020000
 8002b74:	00000400 	.word	0x00000400
 8002b78:	200003f4 	.word	0x200003f4
 8002b7c:	200005d8 	.word	0x200005d8

08002b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <SystemInit+0x20>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ba0 <SystemInit+0x20>)
 8002b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <MX_TIM7_Init>:



/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002baa:	463b      	mov	r3, r7
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <MX_TIM7_Init+0x64>)
 8002bb4:	4a15      	ldr	r2, [pc, #84]	@ (8002c0c <MX_TIM7_Init+0x68>)
 8002bb6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9995;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <MX_TIM7_Init+0x64>)
 8002bba:	f242 720b 	movw	r2, #9995	@ 0x270b
 8002bbe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <MX_TIM7_Init+0x64>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 6;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <MX_TIM7_Init+0x64>)
 8002bc8:	2206      	movs	r2, #6
 8002bca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <MX_TIM7_Init+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bd2:	480d      	ldr	r0, [pc, #52]	@ (8002c08 <MX_TIM7_Init+0x64>)
 8002bd4:	f002 fb90 	bl	80052f8 <HAL_TIM_Base_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002bde:	f7ff feab 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002bea:	463b      	mov	r3, r7
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	@ (8002c08 <MX_TIM7_Init+0x64>)
 8002bf0:	f002 fce6 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002bfa:	f7ff fe9d 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200003f8 	.word	0x200003f8
 8002c0c:	40001400 	.word	0x40001400

08002c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <HAL_TIM_Base_MspInit+0x3c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10d      	bne.n	8002c3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_TIM_Base_MspInit+0x40>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <HAL_TIM_Base_MspInit+0x40>)
 8002c2c:	f043 0320 	orr.w	r3, r3, #32
 8002c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <HAL_TIM_Base_MspInit+0x40>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40001400 	.word	0x40001400
 8002c50:	40023800 	.word	0x40023800

08002c54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <MX_USART2_UART_Init+0x50>)
 8002c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c78:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <MX_USART2_UART_Init+0x4c>)
 8002c8c:	f002 fd14 	bl	80056b8 <HAL_UART_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c96:	f7ff fe4f 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000440 	.word	0x20000440
 8002ca4:	40004400 	.word	0x40004400

08002ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	@ 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a19      	ldr	r2, [pc, #100]	@ (8002d2c <HAL_UART_MspInit+0x84>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d12b      	bne.n	8002d22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	4b18      	ldr	r3, [pc, #96]	@ (8002d30 <HAL_UART_MspInit+0x88>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <HAL_UART_MspInit+0x88>)
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_UART_MspInit+0x88>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <HAL_UART_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <HAL_UART_MspInit+0x88>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <HAL_UART_MspInit+0x88>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d02:	230c      	movs	r3, #12
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d12:	2307      	movs	r3, #7
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	@ (8002d34 <HAL_UART_MspInit+0x8c>)
 8002d1e:	f000 f9b1 	bl	8003084 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	@ 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40004400 	.word	0x40004400
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020000 	.word	0x40020000

08002d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8002d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d3c:	f7ff ff20 	bl	8002b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d40:	480c      	ldr	r0, [pc, #48]	@ (8002d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d42:	490d      	ldr	r1, [pc, #52]	@ (8002d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d44:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d48:	e002      	b.n	8002d50 <LoopCopyDataInit>

08002d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4e:	3304      	adds	r3, #4

08002d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d54:	d3f9      	bcc.n	8002d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d56:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d58:	4c0a      	ldr	r4, [pc, #40]	@ (8002d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d5c:	e001      	b.n	8002d62 <LoopFillZerobss>

08002d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d60:	3204      	adds	r2, #4

08002d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d64:	d3fb      	bcc.n	8002d5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d66:	f003 fe89 	bl	8006a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d6a:	f7ff fbd7 	bl	800251c <main>
  bx  lr    
 8002d6e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8002d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002d7c:	08009160 	.word	0x08009160
  ldr r2, =_sbss
 8002d80:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002d84:	200005d8 	.word	0x200005d8

08002d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC_IRQHandler>
	...

08002d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d90:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	@ (8002dcc <HAL_Init+0x40>)
 8002d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <HAL_Init+0x40>)
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da8:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a07      	ldr	r2, [pc, #28]	@ (8002dcc <HAL_Init+0x40>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db4:	2003      	movs	r0, #3
 8002db6:	f000 f931 	bl	800301c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f000 f808 	bl	8002dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc0:	f7ff fdc0 	bl	8002944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023c00 	.word	0x40023c00

08002dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd8:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_InitTick+0x54>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <HAL_InitTick+0x58>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f93b 	bl	800306a <HAL_SYSTICK_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00e      	b.n	8002e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b0f      	cmp	r3, #15
 8002e02:	d80a      	bhi.n	8002e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e04:	2200      	movs	r2, #0
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f000 f911 	bl	8003032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e10:	4a06      	ldr	r2, [pc, #24]	@ (8002e2c <HAL_InitTick+0x5c>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000010 	.word	0x20000010
 8002e28:	20000018 	.word	0x20000018
 8002e2c:	20000014 	.word	0x20000014

08002e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e34:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_IncTick+0x20>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_IncTick+0x24>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <HAL_IncTick+0x24>)
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000018 	.word	0x20000018
 8002e54:	20000488 	.word	0x20000488

08002e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	@ (8002e6c <HAL_GetTick+0x14>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000488 	.word	0x20000488

08002e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff ffee 	bl	8002e58 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d005      	beq.n	8002e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_Delay+0x44>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e96:	bf00      	nop
 8002e98:	f7ff ffde 	bl	8002e58 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d8f7      	bhi.n	8002e98 <HAL_Delay+0x28>
  {
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000018 	.word	0x20000018

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eea:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	60d3      	str	r3, [r2, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	db0a      	blt.n	8002f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	490c      	ldr	r1, [pc, #48]	@ (8002f68 <__NVIC_SetPriority+0x4c>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f44:	e00a      	b.n	8002f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4908      	ldr	r1, [pc, #32]	@ (8002f6c <__NVIC_SetPriority+0x50>)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	3b04      	subs	r3, #4
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	440b      	add	r3, r1
 8002f5a:	761a      	strb	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000e100 	.word	0xe000e100
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f1c3 0307 	rsb	r3, r3, #7
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	bf28      	it	cs
 8002f8e:	2304      	movcs	r3, #4
 8002f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <NVIC_EncodePriority+0x30>
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3b03      	subs	r3, #3
 8002f9e:	e000      	b.n	8002fa2 <NVIC_EncodePriority+0x32>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43d9      	mvns	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	4313      	orrs	r3, r2
         );
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	@ 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fe8:	d301      	bcc.n	8002fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00f      	b.n	800300e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fee:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <SysTick_Config+0x40>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff6:	210f      	movs	r1, #15
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f7ff ff8e 	bl	8002f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003000:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <SysTick_Config+0x40>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003006:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <SysTick_Config+0x40>)
 8003008:	2207      	movs	r2, #7
 800300a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000e010 	.word	0xe000e010

0800301c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff47 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003044:	f7ff ff5c 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 8003048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	6978      	ldr	r0, [r7, #20]
 8003050:	f7ff ff8e 	bl	8002f70 <NVIC_EncodePriority>
 8003054:	4602      	mov	r2, r0
 8003056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff5d 	bl	8002f1c <__NVIC_SetPriority>
}
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ffb0 	bl	8002fd8 <SysTick_Config>
 8003078:	4603      	mov	r3, r0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	e165      	b.n	800336c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030a0:	2201      	movs	r2, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	f040 8154 	bne.w	8003366 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d005      	beq.n	80030d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d130      	bne.n	8003138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	2203      	movs	r2, #3
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800310c:	2201      	movs	r2, #1
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 0201 	and.w	r2, r3, #1
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b03      	cmp	r3, #3
 8003142:	d017      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d123      	bne.n	80031c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	08da      	lsrs	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3208      	adds	r2, #8
 8003188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	220f      	movs	r2, #15
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	08da      	lsrs	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3208      	adds	r2, #8
 80031c2:	69b9      	ldr	r1, [r7, #24]
 80031c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0203 	and.w	r2, r3, #3
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80ae 	beq.w	8003366 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	4b5d      	ldr	r3, [pc, #372]	@ (8003384 <HAL_GPIO_Init+0x300>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	4a5c      	ldr	r2, [pc, #368]	@ (8003384 <HAL_GPIO_Init+0x300>)
 8003214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003218:	6453      	str	r3, [r2, #68]	@ 0x44
 800321a:	4b5a      	ldr	r3, [pc, #360]	@ (8003384 <HAL_GPIO_Init+0x300>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003226:	4a58      	ldr	r2, [pc, #352]	@ (8003388 <HAL_GPIO_Init+0x304>)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	3302      	adds	r3, #2
 800322e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4f      	ldr	r2, [pc, #316]	@ (800338c <HAL_GPIO_Init+0x308>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d025      	beq.n	800329e <HAL_GPIO_Init+0x21a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4e      	ldr	r2, [pc, #312]	@ (8003390 <HAL_GPIO_Init+0x30c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01f      	beq.n	800329a <HAL_GPIO_Init+0x216>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4d      	ldr	r2, [pc, #308]	@ (8003394 <HAL_GPIO_Init+0x310>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d019      	beq.n	8003296 <HAL_GPIO_Init+0x212>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4c      	ldr	r2, [pc, #304]	@ (8003398 <HAL_GPIO_Init+0x314>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_GPIO_Init+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4b      	ldr	r2, [pc, #300]	@ (800339c <HAL_GPIO_Init+0x318>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00d      	beq.n	800328e <HAL_GPIO_Init+0x20a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4a      	ldr	r2, [pc, #296]	@ (80033a0 <HAL_GPIO_Init+0x31c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x206>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a49      	ldr	r2, [pc, #292]	@ (80033a4 <HAL_GPIO_Init+0x320>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_GPIO_Init+0x202>
 8003282:	2306      	movs	r3, #6
 8003284:	e00c      	b.n	80032a0 <HAL_GPIO_Init+0x21c>
 8003286:	2307      	movs	r3, #7
 8003288:	e00a      	b.n	80032a0 <HAL_GPIO_Init+0x21c>
 800328a:	2305      	movs	r3, #5
 800328c:	e008      	b.n	80032a0 <HAL_GPIO_Init+0x21c>
 800328e:	2304      	movs	r3, #4
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x21c>
 8003292:	2303      	movs	r3, #3
 8003294:	e004      	b.n	80032a0 <HAL_GPIO_Init+0x21c>
 8003296:	2302      	movs	r3, #2
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_Init+0x21c>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x21c>
 800329e:	2300      	movs	r3, #0
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	f002 0203 	and.w	r2, r2, #3
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	4093      	lsls	r3, r2
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032b0:	4935      	ldr	r1, [pc, #212]	@ (8003388 <HAL_GPIO_Init+0x304>)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032be:	4b3a      	ldr	r3, [pc, #232]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032e2:	4a31      	ldr	r2, [pc, #196]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e8:	4b2f      	ldr	r3, [pc, #188]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800330c:	4a26      	ldr	r2, [pc, #152]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003312:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003336:	4a1c      	ldr	r2, [pc, #112]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800333c:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003360:	4a11      	ldr	r2, [pc, #68]	@ (80033a8 <HAL_GPIO_Init+0x324>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3301      	adds	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	f67f ae96 	bls.w	80030a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3724      	adds	r7, #36	@ 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	40013800 	.word	0x40013800
 800338c:	40020000 	.word	0x40020000
 8003390:	40020400 	.word	0x40020400
 8003394:	40020800 	.word	0x40020800
 8003398:	40020c00 	.word	0x40020c00
 800339c:	40021000 	.word	0x40021000
 80033a0:	40021400 	.word	0x40021400
 80033a4:	40021800 	.word	0x40021800
 80033a8:	40013c00 	.word	0x40013c00

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033bc:	787b      	ldrb	r3, [r7, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033c8:	e003      	b.n	80033d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ca:	887b      	ldrh	r3, [r7, #2]
 80033cc:	041a      	lsls	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	619a      	str	r2, [r3, #24]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e12b      	b.n	800364a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe fdcc 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	@ 0x24
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003444:	f001 fa62 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8003448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4a81      	ldr	r2, [pc, #516]	@ (8003654 <HAL_I2C_Init+0x274>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d807      	bhi.n	8003464 <HAL_I2C_Init+0x84>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a80      	ldr	r2, [pc, #512]	@ (8003658 <HAL_I2C_Init+0x278>)
 8003458:	4293      	cmp	r3, r2
 800345a:	bf94      	ite	ls
 800345c:	2301      	movls	r3, #1
 800345e:	2300      	movhi	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e006      	b.n	8003472 <HAL_I2C_Init+0x92>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a7d      	ldr	r2, [pc, #500]	@ (800365c <HAL_I2C_Init+0x27c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	bf94      	ite	ls
 800346c:	2301      	movls	r3, #1
 800346e:	2300      	movhi	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0e7      	b.n	800364a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a78      	ldr	r2, [pc, #480]	@ (8003660 <HAL_I2C_Init+0x280>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0c9b      	lsrs	r3, r3, #18
 8003484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003654 <HAL_I2C_Init+0x274>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d802      	bhi.n	80034b4 <HAL_I2C_Init+0xd4>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3301      	adds	r3, #1
 80034b2:	e009      	b.n	80034c8 <HAL_I2C_Init+0xe8>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	4a69      	ldr	r2, [pc, #420]	@ (8003664 <HAL_I2C_Init+0x284>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	3301      	adds	r3, #1
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	495c      	ldr	r1, [pc, #368]	@ (8003654 <HAL_I2C_Init+0x274>)
 80034e4:	428b      	cmp	r3, r1
 80034e6:	d819      	bhi.n	800351c <HAL_I2C_Init+0x13c>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1e59      	subs	r1, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034fc:	400b      	ands	r3, r1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_I2C_Init+0x138>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e59      	subs	r1, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003510:	3301      	adds	r3, #1
 8003512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003516:	e051      	b.n	80035bc <HAL_I2C_Init+0x1dc>
 8003518:	2304      	movs	r3, #4
 800351a:	e04f      	b.n	80035bc <HAL_I2C_Init+0x1dc>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d111      	bne.n	8003548 <HAL_I2C_Init+0x168>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1e58      	subs	r0, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e012      	b.n	800356e <HAL_I2C_Init+0x18e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1e58      	subs	r0, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	0099      	lsls	r1, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	fbb0 f3f3 	udiv	r3, r0, r3
 800355e:	3301      	adds	r3, #1
 8003560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Init+0x196>
 8003572:	2301      	movs	r3, #1
 8003574:	e022      	b.n	80035bc <HAL_I2C_Init+0x1dc>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10e      	bne.n	800359c <HAL_I2C_Init+0x1bc>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1e58      	subs	r0, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	440b      	add	r3, r1
 800358c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003590:	3301      	adds	r3, #1
 8003592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800359a:	e00f      	b.n	80035bc <HAL_I2C_Init+0x1dc>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e58      	subs	r0, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	0099      	lsls	r1, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	6809      	ldr	r1, [r1, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6911      	ldr	r1, [r2, #16]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	4311      	orrs	r1, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	000186a0 	.word	0x000186a0
 8003658:	001e847f 	.word	0x001e847f
 800365c:	003d08ff 	.word	0x003d08ff
 8003660:	431bde83 	.word	0x431bde83
 8003664:	10624dd3 	.word	0x10624dd3

08003668 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	461a      	mov	r2, r3
 8003674:	460b      	mov	r3, r1
 8003676:	817b      	strh	r3, [r7, #10]
 8003678:	4613      	mov	r3, r2
 800367a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800367c:	f7ff fbec 	bl	8002e58 <HAL_GetTick>
 8003680:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	f040 80e0 	bne.w	8003850 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2319      	movs	r3, #25
 8003696:	2201      	movs	r2, #1
 8003698:	4970      	ldr	r1, [pc, #448]	@ (800385c <HAL_I2C_Master_Transmit+0x1f4>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fe0e 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	e0d3      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_I2C_Master_Transmit+0x50>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e0cc      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d007      	beq.n	80036de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2221      	movs	r2, #33	@ 0x21
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2210      	movs	r2, #16
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	893a      	ldrh	r2, [r7, #8]
 800370e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a50      	ldr	r2, [pc, #320]	@ (8003860 <HAL_I2C_Master_Transmit+0x1f8>)
 800371e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003720:	8979      	ldrh	r1, [r7, #10]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fbc8 	bl	8003ebc <I2C_MasterRequestWrite>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e08d      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800374c:	e066      	b.n	800381c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fecc 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06b      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11b      	bne.n	80037f0 <HAL_I2C_Master_Transmit+0x188>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d017      	beq.n	80037f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	6a39      	ldr	r1, [r7, #32]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fec3 	bl	8004580 <I2C_WaitOnBTFFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00d      	beq.n	800381c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	2b04      	cmp	r3, #4
 8003806:	d107      	bne.n	8003818 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003816:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e01a      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	d194      	bne.n	800374e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	00100002 	.word	0x00100002
 8003860:	ffff0000 	.word	0xffff0000

08003864 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7ff faeb 	bl	8002e58 <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	f040 80d9 	bne.w	8003a44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2319      	movs	r3, #25
 8003898:	2201      	movs	r2, #1
 800389a:	496d      	ldr	r1, [pc, #436]	@ (8003a50 <HAL_I2C_Mem_Write+0x1ec>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fd0d 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0cc      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Mem_Write+0x56>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e0c5      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d007      	beq.n	80038e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2221      	movs	r2, #33	@ 0x21
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	@ 0x40
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003910:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a4d      	ldr	r2, [pc, #308]	@ (8003a54 <HAL_I2C_Mem_Write+0x1f0>)
 8003920:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003922:	88f8      	ldrh	r0, [r7, #6]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fb44 	bl	8003fc0 <I2C_RequestMemoryWrite>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d052      	beq.n	80039e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e081      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fdd2 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2b04      	cmp	r3, #4
 8003958:	d107      	bne.n	800396a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e06b      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d11b      	bne.n	80039e4 <HAL_I2C_Mem_Write+0x180>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1aa      	bne.n	8003942 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fdc5 	bl	8004580 <I2C_WaitOnBTFFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d107      	bne.n	8003a14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e016      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	00100002 	.word	0x00100002
 8003a54:	ffff0000 	.word	0xffff0000

08003a58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	@ 0x30
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	4608      	mov	r0, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	461a      	mov	r2, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	817b      	strh	r3, [r7, #10]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	813b      	strh	r3, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a72:	f7ff f9f1 	bl	8002e58 <HAL_GetTick>
 8003a76:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	f040 8214 	bne.w	8003eae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2319      	movs	r3, #25
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	497b      	ldr	r1, [pc, #492]	@ (8003c7c <HAL_I2C_Mem_Read+0x224>)
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fc13 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e207      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_Mem_Read+0x56>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e200      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d007      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2222      	movs	r2, #34	@ 0x22
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2240      	movs	r2, #64	@ 0x40
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a5b      	ldr	r2, [pc, #364]	@ (8003c80 <HAL_I2C_Mem_Read+0x228>)
 8003b14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b16:	88f8      	ldrh	r0, [r7, #6]
 8003b18:	893a      	ldrh	r2, [r7, #8]
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	4603      	mov	r3, r0
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fae0 	bl	80040ec <I2C_RequestMemoryRead>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1bc      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d113      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e190      	b.n	8003e88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d11b      	bne.n	8003ba6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e170      	b.n	8003e88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d11b      	bne.n	8003be6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	e150      	b.n	8003e88 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bfc:	e144      	b.n	8003e88 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	f200 80f1 	bhi.w	8003dea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d123      	bne.n	8003c58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fcfb 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e145      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c56:	e117      	b.n	8003e88 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d14e      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c66:	2200      	movs	r2, #0
 8003c68:	4906      	ldr	r1, [pc, #24]	@ (8003c84 <HAL_I2C_Mem_Read+0x22c>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fb26 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e11a      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
 8003c7a:	bf00      	nop
 8003c7c:	00100002 	.word	0x00100002
 8003c80:	ffff0000 	.word	0xffff0000
 8003c84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cfc:	e0c4      	b.n	8003e88 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d04:	2200      	movs	r2, #0
 8003d06:	496c      	ldr	r1, [pc, #432]	@ (8003eb8 <HAL_I2C_Mem_Read+0x460>)
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fad7 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0cb      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d60:	2200      	movs	r2, #0
 8003d62:	4955      	ldr	r1, [pc, #340]	@ (8003eb8 <HAL_I2C_Mem_Read+0x460>)
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 faa9 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e09d      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de8:	e04e      	b.n	8003e88 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fc0e 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e058      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d124      	bne.n	8003e88 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d107      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e54:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f47f aeb6 	bne.w	8003bfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3728      	adds	r7, #40	@ 0x28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	00010004 	.word	0x00010004

08003ebc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d006      	beq.n	8003ee6 <I2C_MasterRequestWrite+0x2a>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d003      	beq.n	8003ee6 <I2C_MasterRequestWrite+0x2a>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ee4:	d108      	bne.n	8003ef8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e00b      	b.n	8003f10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	2b12      	cmp	r3, #18
 8003efe:	d107      	bne.n	8003f10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f9cd 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f36:	d103      	bne.n	8003f40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e035      	b.n	8003fb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f4c:	d108      	bne.n	8003f60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f4e:	897b      	ldrh	r3, [r7, #10]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f5c:	611a      	str	r2, [r3, #16]
 8003f5e:	e01b      	b.n	8003f98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f60:	897b      	ldrh	r3, [r7, #10]
 8003f62:	11db      	asrs	r3, r3, #7
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 0306 	and.w	r3, r3, #6
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f063 030f 	orn	r3, r3, #15
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	490e      	ldr	r1, [pc, #56]	@ (8003fb8 <I2C_MasterRequestWrite+0xfc>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fa16 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e010      	b.n	8003fb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4907      	ldr	r1, [pc, #28]	@ (8003fbc <I2C_MasterRequestWrite+0x100>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa06 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	00010008 	.word	0x00010008
 8003fbc:	00010002 	.word	0x00010002

08003fc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	813b      	strh	r3, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f960 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004010:	d103      	bne.n	800401a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004018:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e05f      	b.n	80040de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800402c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	492d      	ldr	r1, [pc, #180]	@ (80040e8 <I2C_RequestMemoryWrite+0x128>)
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f9bb 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e04c      	b.n	80040de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405c:	6a39      	ldr	r1, [r7, #32]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fa46 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	2b04      	cmp	r3, #4
 8004070:	d107      	bne.n	8004082 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e02b      	b.n	80040de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800408c:	893b      	ldrh	r3, [r7, #8]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	611a      	str	r2, [r3, #16]
 8004096:	e021      	b.n	80040dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004098:	893b      	ldrh	r3, [r7, #8]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	b29b      	uxth	r3, r3
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a8:	6a39      	ldr	r1, [r7, #32]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fa20 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d107      	bne.n	80040ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e005      	b.n	80040de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d2:	893b      	ldrh	r3, [r7, #8]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	00010002 	.word	0x00010002

080040ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	460b      	mov	r3, r1
 8004100:	813b      	strh	r3, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004114:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	2200      	movs	r2, #0
 800412e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f8c2 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800414c:	d103      	bne.n	8004156 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004154:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0aa      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800415a:	897b      	ldrh	r3, [r7, #10]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004168:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	4952      	ldr	r1, [pc, #328]	@ (80042b8 <I2C_RequestMemoryRead+0x1cc>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f91d 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e097      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004198:	6a39      	ldr	r1, [r7, #32]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f9a8 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d107      	bne.n	80041be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e076      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]
 80041d2:	e021      	b.n	8004218 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	b29b      	uxth	r3, r3
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f982 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004208:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e050      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800420e:	893b      	ldrh	r3, [r7, #8]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421a:	6a39      	ldr	r1, [r7, #32]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f967 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	2b04      	cmp	r3, #4
 800422e:	d107      	bne.n	8004240 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e035      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004252:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	2200      	movs	r2, #0
 800425c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f82b 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427a:	d103      	bne.n	8004284 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004282:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e013      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004288:	897b      	ldrh	r3, [r7, #10]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	6a3a      	ldr	r2, [r7, #32]
 800429c:	4906      	ldr	r1, [pc, #24]	@ (80042b8 <I2C_RequestMemoryRead+0x1cc>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f886 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	00010002 	.word	0x00010002

080042bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042cc:	e048      	b.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d044      	beq.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fe fdbf 	bl	8002e58 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d139      	bne.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d10d      	bne.n	8004312 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	43da      	mvns	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	e00c      	b.n	800432c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	43da      	mvns	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	429a      	cmp	r2, r3
 8004330:	d116      	bne.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e023      	b.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10d      	bne.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xca>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	43da      	mvns	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4013      	ands	r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	e00c      	b.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	43da      	mvns	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d093      	beq.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043be:	e071      	b.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ce:	d123      	bne.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	f043 0204 	orr.w	r2, r3, #4
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e067      	b.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d041      	beq.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004420:	f7fe fd1a 	bl	8002e58 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d136      	bne.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10c      	bne.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	43da      	mvns	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e00b      	b.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e021      	b.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d10c      	bne.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	43da      	mvns	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e00b      	b.n	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f af6d 	bne.w	80043c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044fc:	e034      	b.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f8e3 	bl	80046ca <I2C_IsAcknowledgeFailed>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e034      	b.n	8004578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d028      	beq.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004516:	f7fe fc9f 	bl	8002e58 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d11d      	bne.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004536:	2b80      	cmp	r3, #128	@ 0x80
 8004538:	d016      	beq.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e007      	b.n	8004578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b80      	cmp	r3, #128	@ 0x80
 8004574:	d1c3      	bne.n	80044fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800458c:	e034      	b.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f89b 	bl	80046ca <I2C_IsAcknowledgeFailed>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e034      	b.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d028      	beq.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7fe fc57 	bl	8002e58 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11d      	bne.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d016      	beq.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e007      	b.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b04      	cmp	r3, #4
 8004604:	d1c3      	bne.n	800458e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800461c:	e049      	b.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b10      	cmp	r3, #16
 800462a:	d119      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e030      	b.n	80046c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004660:	f7fe fbfa 	bl	8002e58 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d11d      	bne.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004680:	2b40      	cmp	r3, #64	@ 0x40
 8004682:	d016      	beq.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e007      	b.n	80046c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046bc:	2b40      	cmp	r3, #64	@ 0x40
 80046be:	d1ae      	bne.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e0:	d11b      	bne.n	800471a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0cc      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800473c:	4b68      	ldr	r3, [pc, #416]	@ (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d90c      	bls.n	8004764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474a:	4b65      	ldr	r3, [pc, #404]	@ (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b63      	ldr	r3, [pc, #396]	@ (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0b8      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800477c:	4b59      	ldr	r3, [pc, #356]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a58      	ldr	r2, [pc, #352]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004794:	4b53      	ldr	r3, [pc, #332]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a52      	ldr	r2, [pc, #328]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800479e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a0:	4b50      	ldr	r3, [pc, #320]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	494d      	ldr	r1, [pc, #308]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d044      	beq.n	8004848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b47      	ldr	r3, [pc, #284]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d119      	bne.n	8004806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d003      	beq.n	80047e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	4b3f      	ldr	r3, [pc, #252]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e06f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f6:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e067      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004806:	4b37      	ldr	r3, [pc, #220]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 0203 	bic.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4934      	ldr	r1, [pc, #208]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004818:	f7fe fb1e 	bl	8002e58 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	e00a      	b.n	8004836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004820:	f7fe fb1a 	bl	8002e58 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e04f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	4b2b      	ldr	r3, [pc, #172]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 020c 	and.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	429a      	cmp	r2, r3
 8004846:	d1eb      	bne.n	8004820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004848:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d20c      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b22      	ldr	r3, [pc, #136]	@ (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e032      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b19      	ldr	r3, [pc, #100]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4916      	ldr	r1, [pc, #88]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800489a:	4b12      	ldr	r3, [pc, #72]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	490e      	ldr	r1, [pc, #56]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ae:	f000 f855 	bl	800495c <HAL_RCC_GetSysClockFreq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	490a      	ldr	r1, [pc, #40]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c0>)
 80048c0:	5ccb      	ldrb	r3, [r1, r3]
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a09      	ldr	r2, [pc, #36]	@ (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fa7e 	bl	8002dd0 <HAL_InitTick>

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00
 80048e4:	40023800 	.word	0x40023800
 80048e8:	08008dc4 	.word	0x08008dc4
 80048ec:	20000010 	.word	0x20000010
 80048f0:	20000014 	.word	0x20000014

080048f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f8:	4b03      	ldr	r3, [pc, #12]	@ (8004908 <HAL_RCC_GetHCLKFreq+0x14>)
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000010 	.word	0x20000010

0800490c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004910:	f7ff fff0 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0a9b      	lsrs	r3, r3, #10
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4903      	ldr	r1, [pc, #12]	@ (8004930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	08008dd4 	.word	0x08008dd4

08004934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004938:	f7ff ffdc 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	0b5b      	lsrs	r3, r3, #13
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	4903      	ldr	r1, [pc, #12]	@ (8004958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004950:	4618      	mov	r0, r3
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40023800 	.word	0x40023800
 8004958:	08008dd4 	.word	0x08008dd4

0800495c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b0ae      	sub	sp, #184	@ 0xb8
 8004962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004982:	4bcb      	ldr	r3, [pc, #812]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b0c      	cmp	r3, #12
 800498c:	f200 8206 	bhi.w	8004d9c <HAL_RCC_GetSysClockFreq+0x440>
 8004990:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049cd 	.word	0x080049cd
 800499c:	08004d9d 	.word	0x08004d9d
 80049a0:	08004d9d 	.word	0x08004d9d
 80049a4:	08004d9d 	.word	0x08004d9d
 80049a8:	080049d5 	.word	0x080049d5
 80049ac:	08004d9d 	.word	0x08004d9d
 80049b0:	08004d9d 	.word	0x08004d9d
 80049b4:	08004d9d 	.word	0x08004d9d
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	08004d9d 	.word	0x08004d9d
 80049c0:	08004d9d 	.word	0x08004d9d
 80049c4:	08004d9d 	.word	0x08004d9d
 80049c8:	08004bcd 	.word	0x08004bcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049cc:	4bb9      	ldr	r3, [pc, #740]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x358>)
 80049ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80049d2:	e1e7      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049d4:	4bb8      	ldr	r3, [pc, #736]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80049d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049da:	e1e3      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049dc:	4bb4      	ldr	r3, [pc, #720]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049e8:	4bb1      	ldr	r3, [pc, #708]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d071      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f4:	4bae      	ldr	r3, [pc, #696]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a00:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	f04f 0000 	mov.w	r0, #0
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	0159      	lsls	r1, r3, #5
 8004a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a2c:	0150      	lsls	r0, r2, #5
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4621      	mov	r1, r4
 8004a34:	1a51      	subs	r1, r2, r1
 8004a36:	6439      	str	r1, [r7, #64]	@ 0x40
 8004a38:	4629      	mov	r1, r5
 8004a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	018b      	lsls	r3, r1, #6
 8004a50:	4641      	mov	r1, r8
 8004a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a56:	4641      	mov	r1, r8
 8004a58:	018a      	lsls	r2, r1, #6
 8004a5a:	4641      	mov	r1, r8
 8004a5c:	1a51      	subs	r1, r2, r1
 8004a5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a60:	4649      	mov	r1, r9
 8004a62:	eb63 0301 	sbc.w	r3, r3, r1
 8004a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004a74:	4649      	mov	r1, r9
 8004a76:	00cb      	lsls	r3, r1, #3
 8004a78:	4641      	mov	r1, r8
 8004a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7e:	4641      	mov	r1, r8
 8004a80:	00ca      	lsls	r2, r1, #3
 8004a82:	4610      	mov	r0, r2
 8004a84:	4619      	mov	r1, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	4622      	mov	r2, r4
 8004a8a:	189b      	adds	r3, r3, r2
 8004a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a8e:	462b      	mov	r3, r5
 8004a90:	460a      	mov	r2, r1
 8004a92:	eb42 0303 	adc.w	r3, r2, r3
 8004a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	024b      	lsls	r3, r1, #9
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aae:	4621      	mov	r1, r4
 8004ab0:	024a      	lsls	r2, r1, #9
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ac0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ac4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004ac8:	f7fc f8de 	bl	8000c88 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ad6:	e067      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad8:	4b75      	ldr	r3, [pc, #468]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ae4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004af2:	2300      	movs	r3, #0
 8004af4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004af6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	f04f 0000 	mov.w	r0, #0
 8004b02:	f04f 0100 	mov.w	r1, #0
 8004b06:	0159      	lsls	r1, r3, #5
 8004b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0c:	0150      	lsls	r0, r2, #5
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4621      	mov	r1, r4
 8004b14:	1a51      	subs	r1, r2, r1
 8004b16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b18:	4629      	mov	r1, r5
 8004b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	018b      	lsls	r3, r1, #6
 8004b30:	4641      	mov	r1, r8
 8004b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b36:	4641      	mov	r1, r8
 8004b38:	018a      	lsls	r2, r1, #6
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b40:	4649      	mov	r1, r9
 8004b42:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5a:	4692      	mov	sl, r2
 8004b5c:	469b      	mov	fp, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	eb1a 0303 	adds.w	r3, sl, r3
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	462b      	mov	r3, r5
 8004b68:	eb4b 0303 	adc.w	r3, fp, r3
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	028b      	lsls	r3, r1, #10
 8004b7e:	4621      	mov	r1, r4
 8004b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b84:	4621      	mov	r1, r4
 8004b86:	028a      	lsls	r2, r1, #10
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b90:	2200      	movs	r2, #0
 8004b92:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b94:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004b9a:	f7fc f875 	bl	8000c88 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ba8:	4b41      	ldr	r3, [pc, #260]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bca:	e0eb      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bcc:	4b38      	ldr	r3, [pc, #224]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bd8:	4b35      	ldr	r3, [pc, #212]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d06b      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be4:	4b32      	ldr	r3, [pc, #200]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	099b      	lsrs	r3, r3, #6
 8004bea:	2200      	movs	r2, #0
 8004bec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bfc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004c00:	4622      	mov	r2, r4
 8004c02:	462b      	mov	r3, r5
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	0159      	lsls	r1, r3, #5
 8004c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c12:	0150      	lsls	r0, r2, #5
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4621      	mov	r1, r4
 8004c1a:	1a51      	subs	r1, r2, r1
 8004c1c:	61b9      	str	r1, [r7, #24]
 8004c1e:	4629      	mov	r1, r5
 8004c20:	eb63 0301 	sbc.w	r3, r3, r1
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c32:	4659      	mov	r1, fp
 8004c34:	018b      	lsls	r3, r1, #6
 8004c36:	4651      	mov	r1, sl
 8004c38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	018a      	lsls	r2, r1, #6
 8004c40:	4651      	mov	r1, sl
 8004c42:	ebb2 0801 	subs.w	r8, r2, r1
 8004c46:	4659      	mov	r1, fp
 8004c48:	eb63 0901 	sbc.w	r9, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c60:	4690      	mov	r8, r2
 8004c62:	4699      	mov	r9, r3
 8004c64:	4623      	mov	r3, r4
 8004c66:	eb18 0303 	adds.w	r3, r8, r3
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	eb49 0303 	adc.w	r3, r9, r3
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c80:	4629      	mov	r1, r5
 8004c82:	024b      	lsls	r3, r1, #9
 8004c84:	4621      	mov	r1, r4
 8004c86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	024a      	lsls	r2, r1, #9
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c96:	2200      	movs	r2, #0
 8004c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004c9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ca0:	f7fb fff2 	bl	8000c88 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cae:	e065      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x420>
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	099b      	lsrs	r3, r3, #6
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ccc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cce:	2300      	movs	r3, #0
 8004cd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cd2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	464b      	mov	r3, r9
 8004cda:	f04f 0000 	mov.w	r0, #0
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	0159      	lsls	r1, r3, #5
 8004ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce8:	0150      	lsls	r0, r2, #5
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4641      	mov	r1, r8
 8004cf0:	1a51      	subs	r1, r2, r1
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d08:	4659      	mov	r1, fp
 8004d0a:	018b      	lsls	r3, r1, #6
 8004d0c:	4651      	mov	r1, sl
 8004d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d12:	4651      	mov	r1, sl
 8004d14:	018a      	lsls	r2, r1, #6
 8004d16:	4651      	mov	r1, sl
 8004d18:	1a54      	subs	r4, r2, r1
 8004d1a:	4659      	mov	r1, fp
 8004d1c:	eb63 0501 	sbc.w	r5, r3, r1
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	00eb      	lsls	r3, r5, #3
 8004d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d2e:	00e2      	lsls	r2, r4, #3
 8004d30:	4614      	mov	r4, r2
 8004d32:	461d      	mov	r5, r3
 8004d34:	4643      	mov	r3, r8
 8004d36:	18e3      	adds	r3, r4, r3
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	eb45 0303 	adc.w	r3, r5, r3
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d4e:	4629      	mov	r1, r5
 8004d50:	028b      	lsls	r3, r1, #10
 8004d52:	4621      	mov	r1, r4
 8004d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d58:	4621      	mov	r1, r4
 8004d5a:	028a      	lsls	r2, r1, #10
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d64:	2200      	movs	r2, #0
 8004d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d68:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004d6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d6e:	f7fb ff8b 	bl	8000c88 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4613      	mov	r3, r2
 8004d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0f1b      	lsrs	r3, r3, #28
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d9a:	e003      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004da2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	37b8      	adds	r7, #184	@ 0xb8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800
 8004db8:	00f42400 	.word	0x00f42400

08004dbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e28d      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8083 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ddc:	4b94      	ldr	r3, [pc, #592]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 030c 	and.w	r3, r3, #12
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d019      	beq.n	8004e1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004de8:	4b91      	ldr	r3, [pc, #580]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004df4:	4b8e      	ldr	r3, [pc, #568]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e00:	d00c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e02:	4b8b      	ldr	r3, [pc, #556]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d112      	bne.n	8004e34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4b88      	ldr	r3, [pc, #544]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	4b84      	ldr	r3, [pc, #528]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05b      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x124>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d157      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e25a      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCC_OscConfig+0x90>
 8004e3e:	4b7c      	ldr	r3, [pc, #496]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a7b      	ldr	r2, [pc, #492]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e01d      	b.n	8004e88 <HAL_RCC_OscConfig+0xcc>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0xb4>
 8004e56:	4b76      	ldr	r3, [pc, #472]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a75      	ldr	r2, [pc, #468]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	4b73      	ldr	r3, [pc, #460]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a72      	ldr	r2, [pc, #456]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0xcc>
 8004e70:	4b6f      	ldr	r3, [pc, #444]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6e      	ldr	r2, [pc, #440]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a6b      	ldr	r2, [pc, #428]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fd ffe2 	bl	8002e58 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e98:	f7fd ffde 	bl	8002e58 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	@ 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e21f      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	4b61      	ldr	r3, [pc, #388]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0xdc>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fd ffce 	bl	8002e58 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec0:	f7fd ffca 	bl	8002e58 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	@ 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e20b      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	4b57      	ldr	r3, [pc, #348]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x104>
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d06f      	beq.n	8004fce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004eee:	4b50      	ldr	r3, [pc, #320]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d017      	beq.n	8004f2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004efa:	4b4d      	ldr	r3, [pc, #308]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d105      	bne.n	8004f12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f06:	4b4a      	ldr	r3, [pc, #296]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f12:	4b47      	ldr	r3, [pc, #284]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d11c      	bne.n	8004f58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1e:	4b44      	ldr	r3, [pc, #272]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2a:	4b41      	ldr	r3, [pc, #260]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_RCC_OscConfig+0x186>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e1d3      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b3b      	ldr	r3, [pc, #236]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4937      	ldr	r1, [pc, #220]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f56:	e03a      	b.n	8004fce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d020      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f60:	4b34      	ldr	r3, [pc, #208]	@ (8005034 <HAL_RCC_OscConfig+0x278>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fd ff77 	bl	8002e58 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7fd ff73 	bl	8002e58 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1b4      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f80:	4b2b      	ldr	r3, [pc, #172]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8c:	4b28      	ldr	r3, [pc, #160]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4925      	ldr	r1, [pc, #148]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	e015      	b.n	8004fce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa2:	4b24      	ldr	r3, [pc, #144]	@ (8005034 <HAL_RCC_OscConfig+0x278>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd ff56 	bl	8002e58 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb0:	f7fd ff52 	bl	8002e58 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e193      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d036      	beq.n	8005048 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d016      	beq.n	8005010 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe2:	4b15      	ldr	r3, [pc, #84]	@ (8005038 <HAL_RCC_OscConfig+0x27c>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fd ff36 	bl	8002e58 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fd ff32 	bl	8002e58 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e173      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <HAL_RCC_OscConfig+0x274>)
 8005004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x234>
 800500e:	e01b      	b.n	8005048 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005010:	4b09      	ldr	r3, [pc, #36]	@ (8005038 <HAL_RCC_OscConfig+0x27c>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005016:	f7fd ff1f 	bl	8002e58 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800501c:	e00e      	b.n	800503c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501e:	f7fd ff1b 	bl	8002e58 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d907      	bls.n	800503c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e15c      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
 8005030:	40023800 	.word	0x40023800
 8005034:	42470000 	.word	0x42470000
 8005038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	4b8a      	ldr	r3, [pc, #552]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800503e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ea      	bne.n	800501e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8097 	beq.w	8005184 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505a:	4b83      	ldr	r3, [pc, #524]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	4a7e      	ldr	r2, [pc, #504]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005074:	6413      	str	r3, [r2, #64]	@ 0x40
 8005076:	4b7c      	ldr	r3, [pc, #496]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005086:	4b79      	ldr	r3, [pc, #484]	@ (800526c <HAL_RCC_OscConfig+0x4b0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d118      	bne.n	80050c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005092:	4b76      	ldr	r3, [pc, #472]	@ (800526c <HAL_RCC_OscConfig+0x4b0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a75      	ldr	r2, [pc, #468]	@ (800526c <HAL_RCC_OscConfig+0x4b0>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509e:	f7fd fedb 	bl	8002e58 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a6:	f7fd fed7 	bl	8002e58 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e118      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	4b6c      	ldr	r3, [pc, #432]	@ (800526c <HAL_RCC_OscConfig+0x4b0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d106      	bne.n	80050da <HAL_RCC_OscConfig+0x31e>
 80050cc:	4b66      	ldr	r3, [pc, #408]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d0:	4a65      	ldr	r2, [pc, #404]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d8:	e01c      	b.n	8005114 <HAL_RCC_OscConfig+0x358>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d10c      	bne.n	80050fc <HAL_RCC_OscConfig+0x340>
 80050e2:	4b61      	ldr	r3, [pc, #388]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	4a60      	ldr	r2, [pc, #384]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f2:	4a5d      	ldr	r2, [pc, #372]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050fa:	e00b      	b.n	8005114 <HAL_RCC_OscConfig+0x358>
 80050fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005100:	4a59      	ldr	r2, [pc, #356]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	@ 0x70
 8005108:	4b57      	ldr	r3, [pc, #348]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510c:	4a56      	ldr	r2, [pc, #344]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800510e:	f023 0304 	bic.w	r3, r3, #4
 8005112:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fd fe9c 	bl	8002e58 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005122:	e00a      	b.n	800513a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005124:	f7fd fe98 	bl	8002e58 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e0d7      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	4b4b      	ldr	r3, [pc, #300]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ee      	beq.n	8005124 <HAL_RCC_OscConfig+0x368>
 8005146:	e014      	b.n	8005172 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7fd fe86 	bl	8002e58 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514e:	e00a      	b.n	8005166 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fd fe82 	bl	8002e58 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0c1      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005166:	4b40      	ldr	r3, [pc, #256]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1ee      	bne.n	8005150 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d105      	bne.n	8005184 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005178:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	4a3a      	ldr	r2, [pc, #232]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 800517e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005182:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80ad 	beq.w	80052e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800518e:	4b36      	ldr	r3, [pc, #216]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b08      	cmp	r3, #8
 8005198:	d060      	beq.n	800525c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d145      	bne.n	800522e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a2:	4b33      	ldr	r3, [pc, #204]	@ (8005270 <HAL_RCC_OscConfig+0x4b4>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd fe56 	bl	8002e58 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fd fe52 	bl	8002e58 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e093      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c2:	4b29      	ldr	r3, [pc, #164]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	019b      	lsls	r3, r3, #6
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	3b01      	subs	r3, #1
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	061b      	lsls	r3, r3, #24
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	071b      	lsls	r3, r3, #28
 80051fa:	491b      	ldr	r1, [pc, #108]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005200:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <HAL_RCC_OscConfig+0x4b4>)
 8005202:	2201      	movs	r2, #1
 8005204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7fd fe27 	bl	8002e58 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520e:	f7fd fe23 	bl	8002e58 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e064      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005220:	4b11      	ldr	r3, [pc, #68]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x452>
 800522c:	e05c      	b.n	80052e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522e:	4b10      	ldr	r3, [pc, #64]	@ (8005270 <HAL_RCC_OscConfig+0x4b4>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fd fe10 	bl	8002e58 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523c:	f7fd fe0c 	bl	8002e58 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e04d      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_OscConfig+0x4ac>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x480>
 800525a:	e045      	b.n	80052e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e040      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
 8005268:	40023800 	.word	0x40023800
 800526c:	40007000 	.word	0x40007000
 8005270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005274:	4b1f      	ldr	r3, [pc, #124]	@ (80052f4 <HAL_RCC_OscConfig+0x538>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d030      	beq.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d129      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d122      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052a4:	4013      	ands	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d119      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	3b01      	subs	r3, #1
 80052be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d10f      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d001      	beq.n	80052e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40023800 	.word	0x40023800

080052f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e041      	b.n	800538e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fd fc76 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f000 f896 	bl	8005468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e046      	b.n	800543e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a23      	ldr	r2, [pc, #140]	@ (800544c <HAL_TIM_Base_Start+0xb4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d022      	beq.n	8005408 <HAL_TIM_Base_Start+0x70>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ca:	d01d      	beq.n	8005408 <HAL_TIM_Base_Start+0x70>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005450 <HAL_TIM_Base_Start+0xb8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d018      	beq.n	8005408 <HAL_TIM_Base_Start+0x70>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1e      	ldr	r2, [pc, #120]	@ (8005454 <HAL_TIM_Base_Start+0xbc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <HAL_TIM_Base_Start+0x70>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <HAL_TIM_Base_Start+0xc0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00e      	beq.n	8005408 <HAL_TIM_Base_Start+0x70>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1b      	ldr	r2, [pc, #108]	@ (800545c <HAL_TIM_Base_Start+0xc4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d009      	beq.n	8005408 <HAL_TIM_Base_Start+0x70>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a19      	ldr	r2, [pc, #100]	@ (8005460 <HAL_TIM_Base_Start+0xc8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_TIM_Base_Start+0x70>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a18      	ldr	r2, [pc, #96]	@ (8005464 <HAL_TIM_Base_Start+0xcc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d111      	bne.n	800542c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b06      	cmp	r3, #6
 8005418:	d010      	beq.n	800543c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0201 	orr.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542a:	e007      	b.n	800543c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40010400 	.word	0x40010400
 8005460:	40014000 	.word	0x40014000
 8005464:	40001800 	.word	0x40001800

08005468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a46      	ldr	r2, [pc, #280]	@ (8005594 <TIM_Base_SetConfig+0x12c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005486:	d00f      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a43      	ldr	r2, [pc, #268]	@ (8005598 <TIM_Base_SetConfig+0x130>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a42      	ldr	r2, [pc, #264]	@ (800559c <TIM_Base_SetConfig+0x134>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a41      	ldr	r2, [pc, #260]	@ (80055a0 <TIM_Base_SetConfig+0x138>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a40      	ldr	r2, [pc, #256]	@ (80055a4 <TIM_Base_SetConfig+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a35      	ldr	r2, [pc, #212]	@ (8005594 <TIM_Base_SetConfig+0x12c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c8:	d027      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a32      	ldr	r2, [pc, #200]	@ (8005598 <TIM_Base_SetConfig+0x130>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d023      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a31      	ldr	r2, [pc, #196]	@ (800559c <TIM_Base_SetConfig+0x134>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01f      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a30      	ldr	r2, [pc, #192]	@ (80055a0 <TIM_Base_SetConfig+0x138>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2f      	ldr	r2, [pc, #188]	@ (80055a4 <TIM_Base_SetConfig+0x13c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d017      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2e      	ldr	r2, [pc, #184]	@ (80055a8 <TIM_Base_SetConfig+0x140>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2d      	ldr	r2, [pc, #180]	@ (80055ac <TIM_Base_SetConfig+0x144>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2c      	ldr	r2, [pc, #176]	@ (80055b0 <TIM_Base_SetConfig+0x148>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2b      	ldr	r2, [pc, #172]	@ (80055b4 <TIM_Base_SetConfig+0x14c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2a      	ldr	r2, [pc, #168]	@ (80055b8 <TIM_Base_SetConfig+0x150>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a29      	ldr	r2, [pc, #164]	@ (80055bc <TIM_Base_SetConfig+0x154>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a10      	ldr	r2, [pc, #64]	@ (8005594 <TIM_Base_SetConfig+0x12c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0xf8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <TIM_Base_SetConfig+0x13c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b01      	cmp	r3, #1
 8005578:	d105      	bne.n	8005586 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f023 0201 	bic.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	611a      	str	r2, [r3, #16]
  }
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40010400 	.word	0x40010400
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40014400 	.word	0x40014400
 80055b0:	40014800 	.word	0x40014800
 80055b4:	40001800 	.word	0x40001800
 80055b8:	40001c00 	.word	0x40001c00
 80055bc:	40002000 	.word	0x40002000

080055c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e05a      	b.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a21      	ldr	r2, [pc, #132]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d022      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005624:	d01d      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d018      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1b      	ldr	r2, [pc, #108]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1a      	ldr	r2, [pc, #104]	@ (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a18      	ldr	r2, [pc, #96]	@ (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a17      	ldr	r2, [pc, #92]	@ (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a15      	ldr	r2, [pc, #84]	@ (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10c      	bne.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4313      	orrs	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40010400 	.word	0x40010400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40001800 	.word	0x40001800

080056b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e042      	b.n	8005750 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fd fae2 	bl	8002ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2224      	movs	r2, #36	@ 0x24
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f973 	bl	80059e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	@ 0x28
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b20      	cmp	r3, #32
 8005776:	d175      	bne.n	8005864 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Transmit+0x2c>
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e06e      	b.n	8005866 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2221      	movs	r2, #33	@ 0x21
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005796:	f7fd fb5f 	bl	8002e58 <HAL_GetTick>
 800579a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b0:	d108      	bne.n	80057c4 <HAL_UART_Transmit+0x6c>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	e003      	b.n	80057cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057cc:	e02e      	b.n	800582c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	2180      	movs	r1, #128	@ 0x80
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f848 	bl	800586e <UART_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e03a      	b.n	8005866 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005804:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	3302      	adds	r3, #2
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	e007      	b.n	800581e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	781a      	ldrb	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3301      	adds	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1cb      	bne.n	80057ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	2140      	movs	r1, #64	@ 0x40
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f814 	bl	800586e <UART_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e006      	b.n	8005866 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587e:	e03b      	b.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d037      	beq.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005888:	f7fd fae6 	bl	8002e58 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	6a3a      	ldr	r2, [r7, #32]
 8005894:	429a      	cmp	r2, r3
 8005896:	d302      	bcc.n	800589e <UART_WaitOnFlagUntilTimeout+0x30>
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e03a      	b.n	8005918 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d023      	beq.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b80      	cmp	r3, #128	@ 0x80
 80058b4:	d020      	beq.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b40      	cmp	r3, #64	@ 0x40
 80058ba:	d01d      	beq.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d116      	bne.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f81d 	bl	8005920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2208      	movs	r2, #8
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e00f      	b.n	8005918 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4013      	ands	r3, r2
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	bf0c      	ite	eq
 8005908:	2301      	moveq	r3, #1
 800590a:	2300      	movne	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	429a      	cmp	r2, r3
 8005914:	d0b4      	beq.n	8005880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b095      	sub	sp, #84	@ 0x54
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800593e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005948:	643a      	str	r2, [r7, #64]	@ 0x40
 800594a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800594e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e5      	bne.n	8005928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3314      	adds	r3, #20
 8005962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	61fb      	str	r3, [r7, #28]
   return(result);
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3314      	adds	r3, #20
 800597a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800597c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800597e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	2b01      	cmp	r3, #1
 8005996:	d119      	bne.n	80059cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	330c      	adds	r3, #12
 800599e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f023 0310 	bic.w	r3, r3, #16
 80059ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059b8:	61ba      	str	r2, [r7, #24]
 80059ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6979      	ldr	r1, [r7, #20]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	613b      	str	r3, [r7, #16]
   return(result);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e5      	bne.n	8005998 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059da:	bf00      	nop
 80059dc:	3754      	adds	r7, #84	@ 0x54
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059ec:	b0c0      	sub	sp, #256	@ 0x100
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	68d9      	ldr	r1, [r3, #12]
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	ea40 0301 	orr.w	r3, r0, r1
 8005a10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a40:	f021 010c 	bic.w	r1, r1, #12
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a62:	6999      	ldr	r1, [r3, #24]
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	ea40 0301 	orr.w	r3, r0, r1
 8005a6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb4 <UART_SetConfig+0x2cc>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d005      	beq.n	8005a88 <UART_SetConfig+0xa0>
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb8 <UART_SetConfig+0x2d0>)
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d104      	bne.n	8005a92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a88:	f7fe ff54 	bl	8004934 <HAL_RCC_GetPCLK2Freq>
 8005a8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a90:	e003      	b.n	8005a9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a92:	f7fe ff3b 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8005a96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa4:	f040 810c 	bne.w	8005cc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ab2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ab6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005aba:	4622      	mov	r2, r4
 8005abc:	462b      	mov	r3, r5
 8005abe:	1891      	adds	r1, r2, r2
 8005ac0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ac2:	415b      	adcs	r3, r3
 8005ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ac6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005aca:	4621      	mov	r1, r4
 8005acc:	eb12 0801 	adds.w	r8, r2, r1
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	eb43 0901 	adc.w	r9, r3, r1
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aea:	4690      	mov	r8, r2
 8005aec:	4699      	mov	r9, r3
 8005aee:	4623      	mov	r3, r4
 8005af0:	eb18 0303 	adds.w	r3, r8, r3
 8005af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005af8:	462b      	mov	r3, r5
 8005afa:	eb49 0303 	adc.w	r3, r9, r3
 8005afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b16:	460b      	mov	r3, r1
 8005b18:	18db      	adds	r3, r3, r3
 8005b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	eb42 0303 	adc.w	r3, r2, r3
 8005b22:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b2c:	f7fb f8ac 	bl	8000c88 <__aeabi_uldivmod>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4b61      	ldr	r3, [pc, #388]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005b36:	fba3 2302 	umull	r2, r3, r3, r2
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	011c      	lsls	r4, r3, #4
 8005b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	1891      	adds	r1, r2, r2
 8005b56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b58:	415b      	adcs	r3, r3
 8005b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b60:	4641      	mov	r1, r8
 8005b62:	eb12 0a01 	adds.w	sl, r2, r1
 8005b66:	4649      	mov	r1, r9
 8005b68:	eb43 0b01 	adc.w	fp, r3, r1
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b80:	4692      	mov	sl, r2
 8005b82:	469b      	mov	fp, r3
 8005b84:	4643      	mov	r3, r8
 8005b86:	eb1a 0303 	adds.w	r3, sl, r3
 8005b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	eb4b 0303 	adc.w	r3, fp, r3
 8005b94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ba4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ba8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bac:	460b      	mov	r3, r1
 8005bae:	18db      	adds	r3, r3, r3
 8005bb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	eb42 0303 	adc.w	r3, r2, r3
 8005bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bc2:	f7fb f861 	bl	8000c88 <__aeabi_uldivmod>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005bce:	fba3 2301 	umull	r2, r3, r3, r1
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2264      	movs	r2, #100	@ 0x64
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
 8005bda:	1acb      	subs	r3, r1, r3
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005be2:	4b36      	ldr	r3, [pc, #216]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005be4:	fba3 2302 	umull	r2, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bf0:	441c      	add	r4, r3
 8005bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	1891      	adds	r1, r2, r2
 8005c0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c0c:	415b      	adcs	r3, r3
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c14:	4641      	mov	r1, r8
 8005c16:	1851      	adds	r1, r2, r1
 8005c18:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	414b      	adcs	r3, r1
 8005c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	00cb      	lsls	r3, r1, #3
 8005c30:	4651      	mov	r1, sl
 8005c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c36:	4651      	mov	r1, sl
 8005c38:	00ca      	lsls	r2, r1, #3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4642      	mov	r2, r8
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c48:	464b      	mov	r3, r9
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c68:	460b      	mov	r3, r1
 8005c6a:	18db      	adds	r3, r3, r3
 8005c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c6e:	4613      	mov	r3, r2
 8005c70:	eb42 0303 	adc.w	r3, r2, r3
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c7e:	f7fb f803 	bl	8000c88 <__aeabi_uldivmod>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4b0d      	ldr	r3, [pc, #52]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005c88:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	2164      	movs	r1, #100	@ 0x64
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	3332      	adds	r3, #50	@ 0x32
 8005c9a:	4a08      	ldr	r2, [pc, #32]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f003 0207 	and.w	r2, r3, #7
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4422      	add	r2, r4
 8005cae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cb0:	e106      	b.n	8005ec0 <UART_SetConfig+0x4d8>
 8005cb2:	bf00      	nop
 8005cb4:	40011000 	.word	0x40011000
 8005cb8:	40011400 	.word	0x40011400
 8005cbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	1891      	adds	r1, r2, r2
 8005cd8:	6239      	str	r1, [r7, #32]
 8005cda:	415b      	adcs	r3, r3
 8005cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	1854      	adds	r4, r2, r1
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	eb43 0501 	adc.w	r5, r3, r1
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	00eb      	lsls	r3, r5, #3
 8005cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cfa:	00e2      	lsls	r2, r4, #3
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	461d      	mov	r5, r3
 8005d00:	4643      	mov	r3, r8
 8005d02:	18e3      	adds	r3, r4, r3
 8005d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d08:	464b      	mov	r3, r9
 8005d0a:	eb45 0303 	adc.w	r3, r5, r3
 8005d0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d2e:	4629      	mov	r1, r5
 8005d30:	008b      	lsls	r3, r1, #2
 8005d32:	4621      	mov	r1, r4
 8005d34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d38:	4621      	mov	r1, r4
 8005d3a:	008a      	lsls	r2, r1, #2
 8005d3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d40:	f7fa ffa2 	bl	8000c88 <__aeabi_uldivmod>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4b60      	ldr	r3, [pc, #384]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	011c      	lsls	r4, r3, #4
 8005d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d64:	4642      	mov	r2, r8
 8005d66:	464b      	mov	r3, r9
 8005d68:	1891      	adds	r1, r2, r2
 8005d6a:	61b9      	str	r1, [r7, #24]
 8005d6c:	415b      	adcs	r3, r3
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d74:	4641      	mov	r1, r8
 8005d76:	1851      	adds	r1, r2, r1
 8005d78:	6139      	str	r1, [r7, #16]
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	414b      	adcs	r3, r1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	00cb      	lsls	r3, r1, #3
 8005d90:	4651      	mov	r1, sl
 8005d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d96:	4651      	mov	r1, sl
 8005d98:	00ca      	lsls	r2, r1, #3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4642      	mov	r2, r8
 8005da2:	189b      	adds	r3, r3, r2
 8005da4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005da8:	464b      	mov	r3, r9
 8005daa:	460a      	mov	r2, r1
 8005dac:	eb42 0303 	adc.w	r3, r2, r3
 8005db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dcc:	4649      	mov	r1, r9
 8005dce:	008b      	lsls	r3, r1, #2
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd6:	4641      	mov	r1, r8
 8005dd8:	008a      	lsls	r2, r1, #2
 8005dda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dde:	f7fa ff53 	bl	8000c88 <__aeabi_uldivmod>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	4b38      	ldr	r3, [pc, #224]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005dea:	fba3 2301 	umull	r2, r3, r3, r1
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	2264      	movs	r2, #100	@ 0x64
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	1acb      	subs	r3, r1, r3
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	3332      	adds	r3, #50	@ 0x32
 8005dfc:	4a33      	ldr	r2, [pc, #204]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e08:	441c      	add	r4, r3
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e0e:	2200      	movs	r2, #0
 8005e10:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e12:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	1891      	adds	r1, r2, r2
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	415b      	adcs	r3, r3
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e28:	4641      	mov	r1, r8
 8005e2a:	1851      	adds	r1, r2, r1
 8005e2c:	6039      	str	r1, [r7, #0]
 8005e2e:	4649      	mov	r1, r9
 8005e30:	414b      	adcs	r3, r1
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e40:	4659      	mov	r1, fp
 8005e42:	00cb      	lsls	r3, r1, #3
 8005e44:	4651      	mov	r1, sl
 8005e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e4a:	4651      	mov	r1, sl
 8005e4c:	00ca      	lsls	r2, r1, #3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	4642      	mov	r2, r8
 8005e56:	189b      	adds	r3, r3, r2
 8005e58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	eb42 0303 	adc.w	r3, r2, r3
 8005e62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	008b      	lsls	r3, r1, #2
 8005e80:	4641      	mov	r1, r8
 8005e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e86:	4641      	mov	r1, r8
 8005e88:	008a      	lsls	r2, r1, #2
 8005e8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e8e:	f7fa fefb 	bl	8000c88 <__aeabi_uldivmod>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005e98:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	2164      	movs	r1, #100	@ 0x64
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	3332      	adds	r3, #50	@ 0x32
 8005eaa:	4a08      	ldr	r2, [pc, #32]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f003 020f 	and.w	r2, r3, #15
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4422      	add	r2, r4
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ecc:	51eb851f 	.word	0x51eb851f

08005ed0 <__cvt>:
 8005ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed4:	ec57 6b10 	vmov	r6, r7, d0
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	460c      	mov	r4, r1
 8005edc:	4619      	mov	r1, r3
 8005ede:	463b      	mov	r3, r7
 8005ee0:	bfbb      	ittet	lt
 8005ee2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005ee6:	461f      	movlt	r7, r3
 8005ee8:	2300      	movge	r3, #0
 8005eea:	232d      	movlt	r3, #45	@ 0x2d
 8005eec:	700b      	strb	r3, [r1, #0]
 8005eee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ef4:	4691      	mov	r9, r2
 8005ef6:	f023 0820 	bic.w	r8, r3, #32
 8005efa:	bfbc      	itt	lt
 8005efc:	4632      	movlt	r2, r6
 8005efe:	4616      	movlt	r6, r2
 8005f00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f04:	d005      	beq.n	8005f12 <__cvt+0x42>
 8005f06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f0a:	d100      	bne.n	8005f0e <__cvt+0x3e>
 8005f0c:	3401      	adds	r4, #1
 8005f0e:	2102      	movs	r1, #2
 8005f10:	e000      	b.n	8005f14 <__cvt+0x44>
 8005f12:	2103      	movs	r1, #3
 8005f14:	ab03      	add	r3, sp, #12
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	ab02      	add	r3, sp, #8
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	ec47 6b10 	vmov	d0, r6, r7
 8005f20:	4653      	mov	r3, sl
 8005f22:	4622      	mov	r2, r4
 8005f24:	f000 fe5c 	bl	8006be0 <_dtoa_r>
 8005f28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	d119      	bne.n	8005f64 <__cvt+0x94>
 8005f30:	f019 0f01 	tst.w	r9, #1
 8005f34:	d00e      	beq.n	8005f54 <__cvt+0x84>
 8005f36:	eb00 0904 	add.w	r9, r0, r4
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4630      	mov	r0, r6
 8005f40:	4639      	mov	r1, r7
 8005f42:	f7fa fde1 	bl	8000b08 <__aeabi_dcmpeq>
 8005f46:	b108      	cbz	r0, 8005f4c <__cvt+0x7c>
 8005f48:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f4c:	2230      	movs	r2, #48	@ 0x30
 8005f4e:	9b03      	ldr	r3, [sp, #12]
 8005f50:	454b      	cmp	r3, r9
 8005f52:	d31e      	bcc.n	8005f92 <__cvt+0xc2>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f58:	1b5b      	subs	r3, r3, r5
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	b004      	add	sp, #16
 8005f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f68:	eb00 0904 	add.w	r9, r0, r4
 8005f6c:	d1e5      	bne.n	8005f3a <__cvt+0x6a>
 8005f6e:	7803      	ldrb	r3, [r0, #0]
 8005f70:	2b30      	cmp	r3, #48	@ 0x30
 8005f72:	d10a      	bne.n	8005f8a <__cvt+0xba>
 8005f74:	2200      	movs	r2, #0
 8005f76:	2300      	movs	r3, #0
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 8005f80:	b918      	cbnz	r0, 8005f8a <__cvt+0xba>
 8005f82:	f1c4 0401 	rsb	r4, r4, #1
 8005f86:	f8ca 4000 	str.w	r4, [sl]
 8005f8a:	f8da 3000 	ldr.w	r3, [sl]
 8005f8e:	4499      	add	r9, r3
 8005f90:	e7d3      	b.n	8005f3a <__cvt+0x6a>
 8005f92:	1c59      	adds	r1, r3, #1
 8005f94:	9103      	str	r1, [sp, #12]
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	e7d9      	b.n	8005f4e <__cvt+0x7e>

08005f9a <__exponent>:
 8005f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	bfba      	itte	lt
 8005fa0:	4249      	neglt	r1, r1
 8005fa2:	232d      	movlt	r3, #45	@ 0x2d
 8005fa4:	232b      	movge	r3, #43	@ 0x2b
 8005fa6:	2909      	cmp	r1, #9
 8005fa8:	7002      	strb	r2, [r0, #0]
 8005faa:	7043      	strb	r3, [r0, #1]
 8005fac:	dd29      	ble.n	8006002 <__exponent+0x68>
 8005fae:	f10d 0307 	add.w	r3, sp, #7
 8005fb2:	461d      	mov	r5, r3
 8005fb4:	270a      	movs	r7, #10
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fbc:	fb07 1416 	mls	r4, r7, r6, r1
 8005fc0:	3430      	adds	r4, #48	@ 0x30
 8005fc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	2c63      	cmp	r4, #99	@ 0x63
 8005fca:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fce:	4631      	mov	r1, r6
 8005fd0:	dcf1      	bgt.n	8005fb6 <__exponent+0x1c>
 8005fd2:	3130      	adds	r1, #48	@ 0x30
 8005fd4:	1e94      	subs	r4, r2, #2
 8005fd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fda:	1c41      	adds	r1, r0, #1
 8005fdc:	4623      	mov	r3, r4
 8005fde:	42ab      	cmp	r3, r5
 8005fe0:	d30a      	bcc.n	8005ff8 <__exponent+0x5e>
 8005fe2:	f10d 0309 	add.w	r3, sp, #9
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	42ac      	cmp	r4, r5
 8005fea:	bf88      	it	hi
 8005fec:	2300      	movhi	r3, #0
 8005fee:	3302      	adds	r3, #2
 8005ff0:	4403      	add	r3, r0
 8005ff2:	1a18      	subs	r0, r3, r0
 8005ff4:	b003      	add	sp, #12
 8005ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ffc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006000:	e7ed      	b.n	8005fde <__exponent+0x44>
 8006002:	2330      	movs	r3, #48	@ 0x30
 8006004:	3130      	adds	r1, #48	@ 0x30
 8006006:	7083      	strb	r3, [r0, #2]
 8006008:	70c1      	strb	r1, [r0, #3]
 800600a:	1d03      	adds	r3, r0, #4
 800600c:	e7f1      	b.n	8005ff2 <__exponent+0x58>
	...

08006010 <_printf_float>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	b08d      	sub	sp, #52	@ 0x34
 8006016:	460c      	mov	r4, r1
 8006018:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800601c:	4616      	mov	r6, r2
 800601e:	461f      	mov	r7, r3
 8006020:	4605      	mov	r5, r0
 8006022:	f000 fcdb 	bl	80069dc <_localeconv_r>
 8006026:	6803      	ldr	r3, [r0, #0]
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	4618      	mov	r0, r3
 800602c:	f7fa f940 	bl	80002b0 <strlen>
 8006030:	2300      	movs	r3, #0
 8006032:	930a      	str	r3, [sp, #40]	@ 0x28
 8006034:	f8d8 3000 	ldr.w	r3, [r8]
 8006038:	9005      	str	r0, [sp, #20]
 800603a:	3307      	adds	r3, #7
 800603c:	f023 0307 	bic.w	r3, r3, #7
 8006040:	f103 0208 	add.w	r2, r3, #8
 8006044:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006048:	f8d4 b000 	ldr.w	fp, [r4]
 800604c:	f8c8 2000 	str.w	r2, [r8]
 8006050:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006054:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	f8cd 8018 	str.w	r8, [sp, #24]
 800605e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006066:	4b9c      	ldr	r3, [pc, #624]	@ (80062d8 <_printf_float+0x2c8>)
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	f7fa fd7e 	bl	8000b6c <__aeabi_dcmpun>
 8006070:	bb70      	cbnz	r0, 80060d0 <_printf_float+0xc0>
 8006072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006076:	4b98      	ldr	r3, [pc, #608]	@ (80062d8 <_printf_float+0x2c8>)
 8006078:	f04f 32ff 	mov.w	r2, #4294967295
 800607c:	f7fa fd58 	bl	8000b30 <__aeabi_dcmple>
 8006080:	bb30      	cbnz	r0, 80060d0 <_printf_float+0xc0>
 8006082:	2200      	movs	r2, #0
 8006084:	2300      	movs	r3, #0
 8006086:	4640      	mov	r0, r8
 8006088:	4649      	mov	r1, r9
 800608a:	f7fa fd47 	bl	8000b1c <__aeabi_dcmplt>
 800608e:	b110      	cbz	r0, 8006096 <_printf_float+0x86>
 8006090:	232d      	movs	r3, #45	@ 0x2d
 8006092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006096:	4a91      	ldr	r2, [pc, #580]	@ (80062dc <_printf_float+0x2cc>)
 8006098:	4b91      	ldr	r3, [pc, #580]	@ (80062e0 <_printf_float+0x2d0>)
 800609a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800609e:	bf94      	ite	ls
 80060a0:	4690      	movls	r8, r2
 80060a2:	4698      	movhi	r8, r3
 80060a4:	2303      	movs	r3, #3
 80060a6:	6123      	str	r3, [r4, #16]
 80060a8:	f02b 0304 	bic.w	r3, fp, #4
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	f04f 0900 	mov.w	r9, #0
 80060b2:	9700      	str	r7, [sp, #0]
 80060b4:	4633      	mov	r3, r6
 80060b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060b8:	4621      	mov	r1, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 f9d2 	bl	8006464 <_printf_common>
 80060c0:	3001      	adds	r0, #1
 80060c2:	f040 808d 	bne.w	80061e0 <_printf_float+0x1d0>
 80060c6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ca:	b00d      	add	sp, #52	@ 0x34
 80060cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d0:	4642      	mov	r2, r8
 80060d2:	464b      	mov	r3, r9
 80060d4:	4640      	mov	r0, r8
 80060d6:	4649      	mov	r1, r9
 80060d8:	f7fa fd48 	bl	8000b6c <__aeabi_dcmpun>
 80060dc:	b140      	cbz	r0, 80060f0 <_printf_float+0xe0>
 80060de:	464b      	mov	r3, r9
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bfbc      	itt	lt
 80060e4:	232d      	movlt	r3, #45	@ 0x2d
 80060e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80060ea:	4a7e      	ldr	r2, [pc, #504]	@ (80062e4 <_printf_float+0x2d4>)
 80060ec:	4b7e      	ldr	r3, [pc, #504]	@ (80062e8 <_printf_float+0x2d8>)
 80060ee:	e7d4      	b.n	800609a <_printf_float+0x8a>
 80060f0:	6863      	ldr	r3, [r4, #4]
 80060f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80060f6:	9206      	str	r2, [sp, #24]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	d13b      	bne.n	8006174 <_printf_float+0x164>
 80060fc:	2306      	movs	r3, #6
 80060fe:	6063      	str	r3, [r4, #4]
 8006100:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006104:	2300      	movs	r3, #0
 8006106:	6022      	str	r2, [r4, #0]
 8006108:	9303      	str	r3, [sp, #12]
 800610a:	ab0a      	add	r3, sp, #40	@ 0x28
 800610c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006110:	ab09      	add	r3, sp, #36	@ 0x24
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	6861      	ldr	r1, [r4, #4]
 8006116:	ec49 8b10 	vmov	d0, r8, r9
 800611a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800611e:	4628      	mov	r0, r5
 8006120:	f7ff fed6 	bl	8005ed0 <__cvt>
 8006124:	9b06      	ldr	r3, [sp, #24]
 8006126:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006128:	2b47      	cmp	r3, #71	@ 0x47
 800612a:	4680      	mov	r8, r0
 800612c:	d129      	bne.n	8006182 <_printf_float+0x172>
 800612e:	1cc8      	adds	r0, r1, #3
 8006130:	db02      	blt.n	8006138 <_printf_float+0x128>
 8006132:	6863      	ldr	r3, [r4, #4]
 8006134:	4299      	cmp	r1, r3
 8006136:	dd41      	ble.n	80061bc <_printf_float+0x1ac>
 8006138:	f1aa 0a02 	sub.w	sl, sl, #2
 800613c:	fa5f fa8a 	uxtb.w	sl, sl
 8006140:	3901      	subs	r1, #1
 8006142:	4652      	mov	r2, sl
 8006144:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006148:	9109      	str	r1, [sp, #36]	@ 0x24
 800614a:	f7ff ff26 	bl	8005f9a <__exponent>
 800614e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006150:	1813      	adds	r3, r2, r0
 8006152:	2a01      	cmp	r2, #1
 8006154:	4681      	mov	r9, r0
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	dc02      	bgt.n	8006160 <_printf_float+0x150>
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	07d2      	lsls	r2, r2, #31
 800615e:	d501      	bpl.n	8006164 <_printf_float+0x154>
 8006160:	3301      	adds	r3, #1
 8006162:	6123      	str	r3, [r4, #16]
 8006164:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0a2      	beq.n	80060b2 <_printf_float+0xa2>
 800616c:	232d      	movs	r3, #45	@ 0x2d
 800616e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006172:	e79e      	b.n	80060b2 <_printf_float+0xa2>
 8006174:	9a06      	ldr	r2, [sp, #24]
 8006176:	2a47      	cmp	r2, #71	@ 0x47
 8006178:	d1c2      	bne.n	8006100 <_printf_float+0xf0>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1c0      	bne.n	8006100 <_printf_float+0xf0>
 800617e:	2301      	movs	r3, #1
 8006180:	e7bd      	b.n	80060fe <_printf_float+0xee>
 8006182:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006186:	d9db      	bls.n	8006140 <_printf_float+0x130>
 8006188:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800618c:	d118      	bne.n	80061c0 <_printf_float+0x1b0>
 800618e:	2900      	cmp	r1, #0
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	dd0b      	ble.n	80061ac <_printf_float+0x19c>
 8006194:	6121      	str	r1, [r4, #16]
 8006196:	b913      	cbnz	r3, 800619e <_printf_float+0x18e>
 8006198:	6822      	ldr	r2, [r4, #0]
 800619a:	07d0      	lsls	r0, r2, #31
 800619c:	d502      	bpl.n	80061a4 <_printf_float+0x194>
 800619e:	3301      	adds	r3, #1
 80061a0:	440b      	add	r3, r1
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061a6:	f04f 0900 	mov.w	r9, #0
 80061aa:	e7db      	b.n	8006164 <_printf_float+0x154>
 80061ac:	b913      	cbnz	r3, 80061b4 <_printf_float+0x1a4>
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	07d2      	lsls	r2, r2, #31
 80061b2:	d501      	bpl.n	80061b8 <_printf_float+0x1a8>
 80061b4:	3302      	adds	r3, #2
 80061b6:	e7f4      	b.n	80061a2 <_printf_float+0x192>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e7f2      	b.n	80061a2 <_printf_float+0x192>
 80061bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c2:	4299      	cmp	r1, r3
 80061c4:	db05      	blt.n	80061d2 <_printf_float+0x1c2>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	6121      	str	r1, [r4, #16]
 80061ca:	07d8      	lsls	r0, r3, #31
 80061cc:	d5ea      	bpl.n	80061a4 <_printf_float+0x194>
 80061ce:	1c4b      	adds	r3, r1, #1
 80061d0:	e7e7      	b.n	80061a2 <_printf_float+0x192>
 80061d2:	2900      	cmp	r1, #0
 80061d4:	bfd4      	ite	le
 80061d6:	f1c1 0202 	rsble	r2, r1, #2
 80061da:	2201      	movgt	r2, #1
 80061dc:	4413      	add	r3, r2
 80061de:	e7e0      	b.n	80061a2 <_printf_float+0x192>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	055a      	lsls	r2, r3, #21
 80061e4:	d407      	bmi.n	80061f6 <_printf_float+0x1e6>
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	4642      	mov	r2, r8
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	d12b      	bne.n	800624c <_printf_float+0x23c>
 80061f4:	e767      	b.n	80060c6 <_printf_float+0xb6>
 80061f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061fa:	f240 80dd 	bls.w	80063b8 <_printf_float+0x3a8>
 80061fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006202:	2200      	movs	r2, #0
 8006204:	2300      	movs	r3, #0
 8006206:	f7fa fc7f 	bl	8000b08 <__aeabi_dcmpeq>
 800620a:	2800      	cmp	r0, #0
 800620c:	d033      	beq.n	8006276 <_printf_float+0x266>
 800620e:	4a37      	ldr	r2, [pc, #220]	@ (80062ec <_printf_float+0x2dc>)
 8006210:	2301      	movs	r3, #1
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f af54 	beq.w	80060c6 <_printf_float+0xb6>
 800621e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006222:	4543      	cmp	r3, r8
 8006224:	db02      	blt.n	800622c <_printf_float+0x21c>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	07d8      	lsls	r0, r3, #31
 800622a:	d50f      	bpl.n	800624c <_printf_float+0x23c>
 800622c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006230:	4631      	mov	r1, r6
 8006232:	4628      	mov	r0, r5
 8006234:	47b8      	blx	r7
 8006236:	3001      	adds	r0, #1
 8006238:	f43f af45 	beq.w	80060c6 <_printf_float+0xb6>
 800623c:	f04f 0900 	mov.w	r9, #0
 8006240:	f108 38ff 	add.w	r8, r8, #4294967295
 8006244:	f104 0a1a 	add.w	sl, r4, #26
 8006248:	45c8      	cmp	r8, r9
 800624a:	dc09      	bgt.n	8006260 <_printf_float+0x250>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	079b      	lsls	r3, r3, #30
 8006250:	f100 8103 	bmi.w	800645a <_printf_float+0x44a>
 8006254:	68e0      	ldr	r0, [r4, #12]
 8006256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006258:	4298      	cmp	r0, r3
 800625a:	bfb8      	it	lt
 800625c:	4618      	movlt	r0, r3
 800625e:	e734      	b.n	80060ca <_printf_float+0xba>
 8006260:	2301      	movs	r3, #1
 8006262:	4652      	mov	r2, sl
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f af2b 	beq.w	80060c6 <_printf_float+0xb6>
 8006270:	f109 0901 	add.w	r9, r9, #1
 8006274:	e7e8      	b.n	8006248 <_printf_float+0x238>
 8006276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006278:	2b00      	cmp	r3, #0
 800627a:	dc39      	bgt.n	80062f0 <_printf_float+0x2e0>
 800627c:	4a1b      	ldr	r2, [pc, #108]	@ (80062ec <_printf_float+0x2dc>)
 800627e:	2301      	movs	r3, #1
 8006280:	4631      	mov	r1, r6
 8006282:	4628      	mov	r0, r5
 8006284:	47b8      	blx	r7
 8006286:	3001      	adds	r0, #1
 8006288:	f43f af1d 	beq.w	80060c6 <_printf_float+0xb6>
 800628c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006290:	ea59 0303 	orrs.w	r3, r9, r3
 8006294:	d102      	bne.n	800629c <_printf_float+0x28c>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	07d9      	lsls	r1, r3, #31
 800629a:	d5d7      	bpl.n	800624c <_printf_float+0x23c>
 800629c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	f43f af0d 	beq.w	80060c6 <_printf_float+0xb6>
 80062ac:	f04f 0a00 	mov.w	sl, #0
 80062b0:	f104 0b1a 	add.w	fp, r4, #26
 80062b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b6:	425b      	negs	r3, r3
 80062b8:	4553      	cmp	r3, sl
 80062ba:	dc01      	bgt.n	80062c0 <_printf_float+0x2b0>
 80062bc:	464b      	mov	r3, r9
 80062be:	e793      	b.n	80061e8 <_printf_float+0x1d8>
 80062c0:	2301      	movs	r3, #1
 80062c2:	465a      	mov	r2, fp
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f aefb 	beq.w	80060c6 <_printf_float+0xb6>
 80062d0:	f10a 0a01 	add.w	sl, sl, #1
 80062d4:	e7ee      	b.n	80062b4 <_printf_float+0x2a4>
 80062d6:	bf00      	nop
 80062d8:	7fefffff 	.word	0x7fefffff
 80062dc:	08008ddc 	.word	0x08008ddc
 80062e0:	08008de0 	.word	0x08008de0
 80062e4:	08008de4 	.word	0x08008de4
 80062e8:	08008de8 	.word	0x08008de8
 80062ec:	08008dec 	.word	0x08008dec
 80062f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062f6:	4553      	cmp	r3, sl
 80062f8:	bfa8      	it	ge
 80062fa:	4653      	movge	r3, sl
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	4699      	mov	r9, r3
 8006300:	dc36      	bgt.n	8006370 <_printf_float+0x360>
 8006302:	f04f 0b00 	mov.w	fp, #0
 8006306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800630a:	f104 021a 	add.w	r2, r4, #26
 800630e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006310:	9306      	str	r3, [sp, #24]
 8006312:	eba3 0309 	sub.w	r3, r3, r9
 8006316:	455b      	cmp	r3, fp
 8006318:	dc31      	bgt.n	800637e <_printf_float+0x36e>
 800631a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800631c:	459a      	cmp	sl, r3
 800631e:	dc3a      	bgt.n	8006396 <_printf_float+0x386>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	07da      	lsls	r2, r3, #31
 8006324:	d437      	bmi.n	8006396 <_printf_float+0x386>
 8006326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006328:	ebaa 0903 	sub.w	r9, sl, r3
 800632c:	9b06      	ldr	r3, [sp, #24]
 800632e:	ebaa 0303 	sub.w	r3, sl, r3
 8006332:	4599      	cmp	r9, r3
 8006334:	bfa8      	it	ge
 8006336:	4699      	movge	r9, r3
 8006338:	f1b9 0f00 	cmp.w	r9, #0
 800633c:	dc33      	bgt.n	80063a6 <_printf_float+0x396>
 800633e:	f04f 0800 	mov.w	r8, #0
 8006342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006346:	f104 0b1a 	add.w	fp, r4, #26
 800634a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634c:	ebaa 0303 	sub.w	r3, sl, r3
 8006350:	eba3 0309 	sub.w	r3, r3, r9
 8006354:	4543      	cmp	r3, r8
 8006356:	f77f af79 	ble.w	800624c <_printf_float+0x23c>
 800635a:	2301      	movs	r3, #1
 800635c:	465a      	mov	r2, fp
 800635e:	4631      	mov	r1, r6
 8006360:	4628      	mov	r0, r5
 8006362:	47b8      	blx	r7
 8006364:	3001      	adds	r0, #1
 8006366:	f43f aeae 	beq.w	80060c6 <_printf_float+0xb6>
 800636a:	f108 0801 	add.w	r8, r8, #1
 800636e:	e7ec      	b.n	800634a <_printf_float+0x33a>
 8006370:	4642      	mov	r2, r8
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	47b8      	blx	r7
 8006378:	3001      	adds	r0, #1
 800637a:	d1c2      	bne.n	8006302 <_printf_float+0x2f2>
 800637c:	e6a3      	b.n	80060c6 <_printf_float+0xb6>
 800637e:	2301      	movs	r3, #1
 8006380:	4631      	mov	r1, r6
 8006382:	4628      	mov	r0, r5
 8006384:	9206      	str	r2, [sp, #24]
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	f43f ae9c 	beq.w	80060c6 <_printf_float+0xb6>
 800638e:	9a06      	ldr	r2, [sp, #24]
 8006390:	f10b 0b01 	add.w	fp, fp, #1
 8006394:	e7bb      	b.n	800630e <_printf_float+0x2fe>
 8006396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47b8      	blx	r7
 80063a0:	3001      	adds	r0, #1
 80063a2:	d1c0      	bne.n	8006326 <_printf_float+0x316>
 80063a4:	e68f      	b.n	80060c6 <_printf_float+0xb6>
 80063a6:	9a06      	ldr	r2, [sp, #24]
 80063a8:	464b      	mov	r3, r9
 80063aa:	4442      	add	r2, r8
 80063ac:	4631      	mov	r1, r6
 80063ae:	4628      	mov	r0, r5
 80063b0:	47b8      	blx	r7
 80063b2:	3001      	adds	r0, #1
 80063b4:	d1c3      	bne.n	800633e <_printf_float+0x32e>
 80063b6:	e686      	b.n	80060c6 <_printf_float+0xb6>
 80063b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063bc:	f1ba 0f01 	cmp.w	sl, #1
 80063c0:	dc01      	bgt.n	80063c6 <_printf_float+0x3b6>
 80063c2:	07db      	lsls	r3, r3, #31
 80063c4:	d536      	bpl.n	8006434 <_printf_float+0x424>
 80063c6:	2301      	movs	r3, #1
 80063c8:	4642      	mov	r2, r8
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f ae78 	beq.w	80060c6 <_printf_float+0xb6>
 80063d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	47b8      	blx	r7
 80063e0:	3001      	adds	r0, #1
 80063e2:	f43f ae70 	beq.w	80060c6 <_printf_float+0xb6>
 80063e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063ea:	2200      	movs	r2, #0
 80063ec:	2300      	movs	r3, #0
 80063ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063f2:	f7fa fb89 	bl	8000b08 <__aeabi_dcmpeq>
 80063f6:	b9c0      	cbnz	r0, 800642a <_printf_float+0x41a>
 80063f8:	4653      	mov	r3, sl
 80063fa:	f108 0201 	add.w	r2, r8, #1
 80063fe:	4631      	mov	r1, r6
 8006400:	4628      	mov	r0, r5
 8006402:	47b8      	blx	r7
 8006404:	3001      	adds	r0, #1
 8006406:	d10c      	bne.n	8006422 <_printf_float+0x412>
 8006408:	e65d      	b.n	80060c6 <_printf_float+0xb6>
 800640a:	2301      	movs	r3, #1
 800640c:	465a      	mov	r2, fp
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	f43f ae56 	beq.w	80060c6 <_printf_float+0xb6>
 800641a:	f108 0801 	add.w	r8, r8, #1
 800641e:	45d0      	cmp	r8, sl
 8006420:	dbf3      	blt.n	800640a <_printf_float+0x3fa>
 8006422:	464b      	mov	r3, r9
 8006424:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006428:	e6df      	b.n	80061ea <_printf_float+0x1da>
 800642a:	f04f 0800 	mov.w	r8, #0
 800642e:	f104 0b1a 	add.w	fp, r4, #26
 8006432:	e7f4      	b.n	800641e <_printf_float+0x40e>
 8006434:	2301      	movs	r3, #1
 8006436:	4642      	mov	r2, r8
 8006438:	e7e1      	b.n	80063fe <_printf_float+0x3ee>
 800643a:	2301      	movs	r3, #1
 800643c:	464a      	mov	r2, r9
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	f43f ae3e 	beq.w	80060c6 <_printf_float+0xb6>
 800644a:	f108 0801 	add.w	r8, r8, #1
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006452:	1a5b      	subs	r3, r3, r1
 8006454:	4543      	cmp	r3, r8
 8006456:	dcf0      	bgt.n	800643a <_printf_float+0x42a>
 8006458:	e6fc      	b.n	8006254 <_printf_float+0x244>
 800645a:	f04f 0800 	mov.w	r8, #0
 800645e:	f104 0919 	add.w	r9, r4, #25
 8006462:	e7f4      	b.n	800644e <_printf_float+0x43e>

08006464 <_printf_common>:
 8006464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	4616      	mov	r6, r2
 800646a:	4698      	mov	r8, r3
 800646c:	688a      	ldr	r2, [r1, #8]
 800646e:	690b      	ldr	r3, [r1, #16]
 8006470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006474:	4293      	cmp	r3, r2
 8006476:	bfb8      	it	lt
 8006478:	4613      	movlt	r3, r2
 800647a:	6033      	str	r3, [r6, #0]
 800647c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006480:	4607      	mov	r7, r0
 8006482:	460c      	mov	r4, r1
 8006484:	b10a      	cbz	r2, 800648a <_printf_common+0x26>
 8006486:	3301      	adds	r3, #1
 8006488:	6033      	str	r3, [r6, #0]
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	0699      	lsls	r1, r3, #26
 800648e:	bf42      	ittt	mi
 8006490:	6833      	ldrmi	r3, [r6, #0]
 8006492:	3302      	addmi	r3, #2
 8006494:	6033      	strmi	r3, [r6, #0]
 8006496:	6825      	ldr	r5, [r4, #0]
 8006498:	f015 0506 	ands.w	r5, r5, #6
 800649c:	d106      	bne.n	80064ac <_printf_common+0x48>
 800649e:	f104 0a19 	add.w	sl, r4, #25
 80064a2:	68e3      	ldr	r3, [r4, #12]
 80064a4:	6832      	ldr	r2, [r6, #0]
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	42ab      	cmp	r3, r5
 80064aa:	dc26      	bgt.n	80064fa <_printf_common+0x96>
 80064ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064b0:	6822      	ldr	r2, [r4, #0]
 80064b2:	3b00      	subs	r3, #0
 80064b4:	bf18      	it	ne
 80064b6:	2301      	movne	r3, #1
 80064b8:	0692      	lsls	r2, r2, #26
 80064ba:	d42b      	bmi.n	8006514 <_printf_common+0xb0>
 80064bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064c0:	4641      	mov	r1, r8
 80064c2:	4638      	mov	r0, r7
 80064c4:	47c8      	blx	r9
 80064c6:	3001      	adds	r0, #1
 80064c8:	d01e      	beq.n	8006508 <_printf_common+0xa4>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	6922      	ldr	r2, [r4, #16]
 80064ce:	f003 0306 	and.w	r3, r3, #6
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	bf02      	ittt	eq
 80064d6:	68e5      	ldreq	r5, [r4, #12]
 80064d8:	6833      	ldreq	r3, [r6, #0]
 80064da:	1aed      	subeq	r5, r5, r3
 80064dc:	68a3      	ldr	r3, [r4, #8]
 80064de:	bf0c      	ite	eq
 80064e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064e4:	2500      	movne	r5, #0
 80064e6:	4293      	cmp	r3, r2
 80064e8:	bfc4      	itt	gt
 80064ea:	1a9b      	subgt	r3, r3, r2
 80064ec:	18ed      	addgt	r5, r5, r3
 80064ee:	2600      	movs	r6, #0
 80064f0:	341a      	adds	r4, #26
 80064f2:	42b5      	cmp	r5, r6
 80064f4:	d11a      	bne.n	800652c <_printf_common+0xc8>
 80064f6:	2000      	movs	r0, #0
 80064f8:	e008      	b.n	800650c <_printf_common+0xa8>
 80064fa:	2301      	movs	r3, #1
 80064fc:	4652      	mov	r2, sl
 80064fe:	4641      	mov	r1, r8
 8006500:	4638      	mov	r0, r7
 8006502:	47c8      	blx	r9
 8006504:	3001      	adds	r0, #1
 8006506:	d103      	bne.n	8006510 <_printf_common+0xac>
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006510:	3501      	adds	r5, #1
 8006512:	e7c6      	b.n	80064a2 <_printf_common+0x3e>
 8006514:	18e1      	adds	r1, r4, r3
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	2030      	movs	r0, #48	@ 0x30
 800651a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800651e:	4422      	add	r2, r4
 8006520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006528:	3302      	adds	r3, #2
 800652a:	e7c7      	b.n	80064bc <_printf_common+0x58>
 800652c:	2301      	movs	r3, #1
 800652e:	4622      	mov	r2, r4
 8006530:	4641      	mov	r1, r8
 8006532:	4638      	mov	r0, r7
 8006534:	47c8      	blx	r9
 8006536:	3001      	adds	r0, #1
 8006538:	d0e6      	beq.n	8006508 <_printf_common+0xa4>
 800653a:	3601      	adds	r6, #1
 800653c:	e7d9      	b.n	80064f2 <_printf_common+0x8e>
	...

08006540 <_printf_i>:
 8006540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006544:	7e0f      	ldrb	r7, [r1, #24]
 8006546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006548:	2f78      	cmp	r7, #120	@ 0x78
 800654a:	4691      	mov	r9, r2
 800654c:	4680      	mov	r8, r0
 800654e:	460c      	mov	r4, r1
 8006550:	469a      	mov	sl, r3
 8006552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006556:	d807      	bhi.n	8006568 <_printf_i+0x28>
 8006558:	2f62      	cmp	r7, #98	@ 0x62
 800655a:	d80a      	bhi.n	8006572 <_printf_i+0x32>
 800655c:	2f00      	cmp	r7, #0
 800655e:	f000 80d2 	beq.w	8006706 <_printf_i+0x1c6>
 8006562:	2f58      	cmp	r7, #88	@ 0x58
 8006564:	f000 80b9 	beq.w	80066da <_printf_i+0x19a>
 8006568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800656c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006570:	e03a      	b.n	80065e8 <_printf_i+0xa8>
 8006572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006576:	2b15      	cmp	r3, #21
 8006578:	d8f6      	bhi.n	8006568 <_printf_i+0x28>
 800657a:	a101      	add	r1, pc, #4	@ (adr r1, 8006580 <_printf_i+0x40>)
 800657c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006580:	080065d9 	.word	0x080065d9
 8006584:	080065ed 	.word	0x080065ed
 8006588:	08006569 	.word	0x08006569
 800658c:	08006569 	.word	0x08006569
 8006590:	08006569 	.word	0x08006569
 8006594:	08006569 	.word	0x08006569
 8006598:	080065ed 	.word	0x080065ed
 800659c:	08006569 	.word	0x08006569
 80065a0:	08006569 	.word	0x08006569
 80065a4:	08006569 	.word	0x08006569
 80065a8:	08006569 	.word	0x08006569
 80065ac:	080066ed 	.word	0x080066ed
 80065b0:	08006617 	.word	0x08006617
 80065b4:	080066a7 	.word	0x080066a7
 80065b8:	08006569 	.word	0x08006569
 80065bc:	08006569 	.word	0x08006569
 80065c0:	0800670f 	.word	0x0800670f
 80065c4:	08006569 	.word	0x08006569
 80065c8:	08006617 	.word	0x08006617
 80065cc:	08006569 	.word	0x08006569
 80065d0:	08006569 	.word	0x08006569
 80065d4:	080066af 	.word	0x080066af
 80065d8:	6833      	ldr	r3, [r6, #0]
 80065da:	1d1a      	adds	r2, r3, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6032      	str	r2, [r6, #0]
 80065e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065e8:	2301      	movs	r3, #1
 80065ea:	e09d      	b.n	8006728 <_printf_i+0x1e8>
 80065ec:	6833      	ldr	r3, [r6, #0]
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	6031      	str	r1, [r6, #0]
 80065f4:	0606      	lsls	r6, r0, #24
 80065f6:	d501      	bpl.n	80065fc <_printf_i+0xbc>
 80065f8:	681d      	ldr	r5, [r3, #0]
 80065fa:	e003      	b.n	8006604 <_printf_i+0xc4>
 80065fc:	0645      	lsls	r5, r0, #25
 80065fe:	d5fb      	bpl.n	80065f8 <_printf_i+0xb8>
 8006600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006604:	2d00      	cmp	r5, #0
 8006606:	da03      	bge.n	8006610 <_printf_i+0xd0>
 8006608:	232d      	movs	r3, #45	@ 0x2d
 800660a:	426d      	negs	r5, r5
 800660c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006610:	4859      	ldr	r0, [pc, #356]	@ (8006778 <_printf_i+0x238>)
 8006612:	230a      	movs	r3, #10
 8006614:	e011      	b.n	800663a <_printf_i+0xfa>
 8006616:	6821      	ldr	r1, [r4, #0]
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	0608      	lsls	r0, r1, #24
 800661c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006620:	d402      	bmi.n	8006628 <_printf_i+0xe8>
 8006622:	0649      	lsls	r1, r1, #25
 8006624:	bf48      	it	mi
 8006626:	b2ad      	uxthmi	r5, r5
 8006628:	2f6f      	cmp	r7, #111	@ 0x6f
 800662a:	4853      	ldr	r0, [pc, #332]	@ (8006778 <_printf_i+0x238>)
 800662c:	6033      	str	r3, [r6, #0]
 800662e:	bf14      	ite	ne
 8006630:	230a      	movne	r3, #10
 8006632:	2308      	moveq	r3, #8
 8006634:	2100      	movs	r1, #0
 8006636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800663a:	6866      	ldr	r6, [r4, #4]
 800663c:	60a6      	str	r6, [r4, #8]
 800663e:	2e00      	cmp	r6, #0
 8006640:	bfa2      	ittt	ge
 8006642:	6821      	ldrge	r1, [r4, #0]
 8006644:	f021 0104 	bicge.w	r1, r1, #4
 8006648:	6021      	strge	r1, [r4, #0]
 800664a:	b90d      	cbnz	r5, 8006650 <_printf_i+0x110>
 800664c:	2e00      	cmp	r6, #0
 800664e:	d04b      	beq.n	80066e8 <_printf_i+0x1a8>
 8006650:	4616      	mov	r6, r2
 8006652:	fbb5 f1f3 	udiv	r1, r5, r3
 8006656:	fb03 5711 	mls	r7, r3, r1, r5
 800665a:	5dc7      	ldrb	r7, [r0, r7]
 800665c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006660:	462f      	mov	r7, r5
 8006662:	42bb      	cmp	r3, r7
 8006664:	460d      	mov	r5, r1
 8006666:	d9f4      	bls.n	8006652 <_printf_i+0x112>
 8006668:	2b08      	cmp	r3, #8
 800666a:	d10b      	bne.n	8006684 <_printf_i+0x144>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	07df      	lsls	r7, r3, #31
 8006670:	d508      	bpl.n	8006684 <_printf_i+0x144>
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	6861      	ldr	r1, [r4, #4]
 8006676:	4299      	cmp	r1, r3
 8006678:	bfde      	ittt	le
 800667a:	2330      	movle	r3, #48	@ 0x30
 800667c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006684:	1b92      	subs	r2, r2, r6
 8006686:	6122      	str	r2, [r4, #16]
 8006688:	f8cd a000 	str.w	sl, [sp]
 800668c:	464b      	mov	r3, r9
 800668e:	aa03      	add	r2, sp, #12
 8006690:	4621      	mov	r1, r4
 8006692:	4640      	mov	r0, r8
 8006694:	f7ff fee6 	bl	8006464 <_printf_common>
 8006698:	3001      	adds	r0, #1
 800669a:	d14a      	bne.n	8006732 <_printf_i+0x1f2>
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	b004      	add	sp, #16
 80066a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f043 0320 	orr.w	r3, r3, #32
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	4833      	ldr	r0, [pc, #204]	@ (800677c <_printf_i+0x23c>)
 80066b0:	2778      	movs	r7, #120	@ 0x78
 80066b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	6831      	ldr	r1, [r6, #0]
 80066ba:	061f      	lsls	r7, r3, #24
 80066bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80066c0:	d402      	bmi.n	80066c8 <_printf_i+0x188>
 80066c2:	065f      	lsls	r7, r3, #25
 80066c4:	bf48      	it	mi
 80066c6:	b2ad      	uxthmi	r5, r5
 80066c8:	6031      	str	r1, [r6, #0]
 80066ca:	07d9      	lsls	r1, r3, #31
 80066cc:	bf44      	itt	mi
 80066ce:	f043 0320 	orrmi.w	r3, r3, #32
 80066d2:	6023      	strmi	r3, [r4, #0]
 80066d4:	b11d      	cbz	r5, 80066de <_printf_i+0x19e>
 80066d6:	2310      	movs	r3, #16
 80066d8:	e7ac      	b.n	8006634 <_printf_i+0xf4>
 80066da:	4827      	ldr	r0, [pc, #156]	@ (8006778 <_printf_i+0x238>)
 80066dc:	e7e9      	b.n	80066b2 <_printf_i+0x172>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	f023 0320 	bic.w	r3, r3, #32
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	e7f6      	b.n	80066d6 <_printf_i+0x196>
 80066e8:	4616      	mov	r6, r2
 80066ea:	e7bd      	b.n	8006668 <_printf_i+0x128>
 80066ec:	6833      	ldr	r3, [r6, #0]
 80066ee:	6825      	ldr	r5, [r4, #0]
 80066f0:	6961      	ldr	r1, [r4, #20]
 80066f2:	1d18      	adds	r0, r3, #4
 80066f4:	6030      	str	r0, [r6, #0]
 80066f6:	062e      	lsls	r6, r5, #24
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	d501      	bpl.n	8006700 <_printf_i+0x1c0>
 80066fc:	6019      	str	r1, [r3, #0]
 80066fe:	e002      	b.n	8006706 <_printf_i+0x1c6>
 8006700:	0668      	lsls	r0, r5, #25
 8006702:	d5fb      	bpl.n	80066fc <_printf_i+0x1bc>
 8006704:	8019      	strh	r1, [r3, #0]
 8006706:	2300      	movs	r3, #0
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	4616      	mov	r6, r2
 800670c:	e7bc      	b.n	8006688 <_printf_i+0x148>
 800670e:	6833      	ldr	r3, [r6, #0]
 8006710:	1d1a      	adds	r2, r3, #4
 8006712:	6032      	str	r2, [r6, #0]
 8006714:	681e      	ldr	r6, [r3, #0]
 8006716:	6862      	ldr	r2, [r4, #4]
 8006718:	2100      	movs	r1, #0
 800671a:	4630      	mov	r0, r6
 800671c:	f7f9 fd78 	bl	8000210 <memchr>
 8006720:	b108      	cbz	r0, 8006726 <_printf_i+0x1e6>
 8006722:	1b80      	subs	r0, r0, r6
 8006724:	6060      	str	r0, [r4, #4]
 8006726:	6863      	ldr	r3, [r4, #4]
 8006728:	6123      	str	r3, [r4, #16]
 800672a:	2300      	movs	r3, #0
 800672c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006730:	e7aa      	b.n	8006688 <_printf_i+0x148>
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	4632      	mov	r2, r6
 8006736:	4649      	mov	r1, r9
 8006738:	4640      	mov	r0, r8
 800673a:	47d0      	blx	sl
 800673c:	3001      	adds	r0, #1
 800673e:	d0ad      	beq.n	800669c <_printf_i+0x15c>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	079b      	lsls	r3, r3, #30
 8006744:	d413      	bmi.n	800676e <_printf_i+0x22e>
 8006746:	68e0      	ldr	r0, [r4, #12]
 8006748:	9b03      	ldr	r3, [sp, #12]
 800674a:	4298      	cmp	r0, r3
 800674c:	bfb8      	it	lt
 800674e:	4618      	movlt	r0, r3
 8006750:	e7a6      	b.n	80066a0 <_printf_i+0x160>
 8006752:	2301      	movs	r3, #1
 8006754:	4632      	mov	r2, r6
 8006756:	4649      	mov	r1, r9
 8006758:	4640      	mov	r0, r8
 800675a:	47d0      	blx	sl
 800675c:	3001      	adds	r0, #1
 800675e:	d09d      	beq.n	800669c <_printf_i+0x15c>
 8006760:	3501      	adds	r5, #1
 8006762:	68e3      	ldr	r3, [r4, #12]
 8006764:	9903      	ldr	r1, [sp, #12]
 8006766:	1a5b      	subs	r3, r3, r1
 8006768:	42ab      	cmp	r3, r5
 800676a:	dcf2      	bgt.n	8006752 <_printf_i+0x212>
 800676c:	e7eb      	b.n	8006746 <_printf_i+0x206>
 800676e:	2500      	movs	r5, #0
 8006770:	f104 0619 	add.w	r6, r4, #25
 8006774:	e7f5      	b.n	8006762 <_printf_i+0x222>
 8006776:	bf00      	nop
 8006778:	08008dee 	.word	0x08008dee
 800677c:	08008dff 	.word	0x08008dff

08006780 <std>:
 8006780:	2300      	movs	r3, #0
 8006782:	b510      	push	{r4, lr}
 8006784:	4604      	mov	r4, r0
 8006786:	e9c0 3300 	strd	r3, r3, [r0]
 800678a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800678e:	6083      	str	r3, [r0, #8]
 8006790:	8181      	strh	r1, [r0, #12]
 8006792:	6643      	str	r3, [r0, #100]	@ 0x64
 8006794:	81c2      	strh	r2, [r0, #14]
 8006796:	6183      	str	r3, [r0, #24]
 8006798:	4619      	mov	r1, r3
 800679a:	2208      	movs	r2, #8
 800679c:	305c      	adds	r0, #92	@ 0x5c
 800679e:	f000 f914 	bl	80069ca <memset>
 80067a2:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <std+0x58>)
 80067a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80067a6:	4b0d      	ldr	r3, [pc, #52]	@ (80067dc <std+0x5c>)
 80067a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067aa:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <std+0x60>)
 80067ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <std+0x64>)
 80067b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80067b2:	4b0d      	ldr	r3, [pc, #52]	@ (80067e8 <std+0x68>)
 80067b4:	6224      	str	r4, [r4, #32]
 80067b6:	429c      	cmp	r4, r3
 80067b8:	d006      	beq.n	80067c8 <std+0x48>
 80067ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067be:	4294      	cmp	r4, r2
 80067c0:	d002      	beq.n	80067c8 <std+0x48>
 80067c2:	33d0      	adds	r3, #208	@ 0xd0
 80067c4:	429c      	cmp	r4, r3
 80067c6:	d105      	bne.n	80067d4 <std+0x54>
 80067c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f000 b978 	b.w	8006ac4 <__retarget_lock_init_recursive>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	bf00      	nop
 80067d8:	08006945 	.word	0x08006945
 80067dc:	08006967 	.word	0x08006967
 80067e0:	0800699f 	.word	0x0800699f
 80067e4:	080069c3 	.word	0x080069c3
 80067e8:	2000048c 	.word	0x2000048c

080067ec <stdio_exit_handler>:
 80067ec:	4a02      	ldr	r2, [pc, #8]	@ (80067f8 <stdio_exit_handler+0xc>)
 80067ee:	4903      	ldr	r1, [pc, #12]	@ (80067fc <stdio_exit_handler+0x10>)
 80067f0:	4803      	ldr	r0, [pc, #12]	@ (8006800 <stdio_exit_handler+0x14>)
 80067f2:	f000 b869 	b.w	80068c8 <_fwalk_sglue>
 80067f6:	bf00      	nop
 80067f8:	2000001c 	.word	0x2000001c
 80067fc:	08008425 	.word	0x08008425
 8006800:	2000002c 	.word	0x2000002c

08006804 <cleanup_stdio>:
 8006804:	6841      	ldr	r1, [r0, #4]
 8006806:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <cleanup_stdio+0x34>)
 8006808:	4299      	cmp	r1, r3
 800680a:	b510      	push	{r4, lr}
 800680c:	4604      	mov	r4, r0
 800680e:	d001      	beq.n	8006814 <cleanup_stdio+0x10>
 8006810:	f001 fe08 	bl	8008424 <_fflush_r>
 8006814:	68a1      	ldr	r1, [r4, #8]
 8006816:	4b09      	ldr	r3, [pc, #36]	@ (800683c <cleanup_stdio+0x38>)
 8006818:	4299      	cmp	r1, r3
 800681a:	d002      	beq.n	8006822 <cleanup_stdio+0x1e>
 800681c:	4620      	mov	r0, r4
 800681e:	f001 fe01 	bl	8008424 <_fflush_r>
 8006822:	68e1      	ldr	r1, [r4, #12]
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <cleanup_stdio+0x3c>)
 8006826:	4299      	cmp	r1, r3
 8006828:	d004      	beq.n	8006834 <cleanup_stdio+0x30>
 800682a:	4620      	mov	r0, r4
 800682c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006830:	f001 bdf8 	b.w	8008424 <_fflush_r>
 8006834:	bd10      	pop	{r4, pc}
 8006836:	bf00      	nop
 8006838:	2000048c 	.word	0x2000048c
 800683c:	200004f4 	.word	0x200004f4
 8006840:	2000055c 	.word	0x2000055c

08006844 <global_stdio_init.part.0>:
 8006844:	b510      	push	{r4, lr}
 8006846:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <global_stdio_init.part.0+0x30>)
 8006848:	4c0b      	ldr	r4, [pc, #44]	@ (8006878 <global_stdio_init.part.0+0x34>)
 800684a:	4a0c      	ldr	r2, [pc, #48]	@ (800687c <global_stdio_init.part.0+0x38>)
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	4620      	mov	r0, r4
 8006850:	2200      	movs	r2, #0
 8006852:	2104      	movs	r1, #4
 8006854:	f7ff ff94 	bl	8006780 <std>
 8006858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800685c:	2201      	movs	r2, #1
 800685e:	2109      	movs	r1, #9
 8006860:	f7ff ff8e 	bl	8006780 <std>
 8006864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006868:	2202      	movs	r2, #2
 800686a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800686e:	2112      	movs	r1, #18
 8006870:	f7ff bf86 	b.w	8006780 <std>
 8006874:	200005c4 	.word	0x200005c4
 8006878:	2000048c 	.word	0x2000048c
 800687c:	080067ed 	.word	0x080067ed

08006880 <__sfp_lock_acquire>:
 8006880:	4801      	ldr	r0, [pc, #4]	@ (8006888 <__sfp_lock_acquire+0x8>)
 8006882:	f000 b920 	b.w	8006ac6 <__retarget_lock_acquire_recursive>
 8006886:	bf00      	nop
 8006888:	200005cd 	.word	0x200005cd

0800688c <__sfp_lock_release>:
 800688c:	4801      	ldr	r0, [pc, #4]	@ (8006894 <__sfp_lock_release+0x8>)
 800688e:	f000 b91b 	b.w	8006ac8 <__retarget_lock_release_recursive>
 8006892:	bf00      	nop
 8006894:	200005cd 	.word	0x200005cd

08006898 <__sinit>:
 8006898:	b510      	push	{r4, lr}
 800689a:	4604      	mov	r4, r0
 800689c:	f7ff fff0 	bl	8006880 <__sfp_lock_acquire>
 80068a0:	6a23      	ldr	r3, [r4, #32]
 80068a2:	b11b      	cbz	r3, 80068ac <__sinit+0x14>
 80068a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a8:	f7ff bff0 	b.w	800688c <__sfp_lock_release>
 80068ac:	4b04      	ldr	r3, [pc, #16]	@ (80068c0 <__sinit+0x28>)
 80068ae:	6223      	str	r3, [r4, #32]
 80068b0:	4b04      	ldr	r3, [pc, #16]	@ (80068c4 <__sinit+0x2c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f5      	bne.n	80068a4 <__sinit+0xc>
 80068b8:	f7ff ffc4 	bl	8006844 <global_stdio_init.part.0>
 80068bc:	e7f2      	b.n	80068a4 <__sinit+0xc>
 80068be:	bf00      	nop
 80068c0:	08006805 	.word	0x08006805
 80068c4:	200005c4 	.word	0x200005c4

080068c8 <_fwalk_sglue>:
 80068c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	4607      	mov	r7, r0
 80068ce:	4688      	mov	r8, r1
 80068d0:	4614      	mov	r4, r2
 80068d2:	2600      	movs	r6, #0
 80068d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068d8:	f1b9 0901 	subs.w	r9, r9, #1
 80068dc:	d505      	bpl.n	80068ea <_fwalk_sglue+0x22>
 80068de:	6824      	ldr	r4, [r4, #0]
 80068e0:	2c00      	cmp	r4, #0
 80068e2:	d1f7      	bne.n	80068d4 <_fwalk_sglue+0xc>
 80068e4:	4630      	mov	r0, r6
 80068e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d907      	bls.n	8006900 <_fwalk_sglue+0x38>
 80068f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f4:	3301      	adds	r3, #1
 80068f6:	d003      	beq.n	8006900 <_fwalk_sglue+0x38>
 80068f8:	4629      	mov	r1, r5
 80068fa:	4638      	mov	r0, r7
 80068fc:	47c0      	blx	r8
 80068fe:	4306      	orrs	r6, r0
 8006900:	3568      	adds	r5, #104	@ 0x68
 8006902:	e7e9      	b.n	80068d8 <_fwalk_sglue+0x10>

08006904 <siprintf>:
 8006904:	b40e      	push	{r1, r2, r3}
 8006906:	b500      	push	{lr}
 8006908:	b09c      	sub	sp, #112	@ 0x70
 800690a:	ab1d      	add	r3, sp, #116	@ 0x74
 800690c:	9002      	str	r0, [sp, #8]
 800690e:	9006      	str	r0, [sp, #24]
 8006910:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006914:	4809      	ldr	r0, [pc, #36]	@ (800693c <siprintf+0x38>)
 8006916:	9107      	str	r1, [sp, #28]
 8006918:	9104      	str	r1, [sp, #16]
 800691a:	4909      	ldr	r1, [pc, #36]	@ (8006940 <siprintf+0x3c>)
 800691c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006920:	9105      	str	r1, [sp, #20]
 8006922:	6800      	ldr	r0, [r0, #0]
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	a902      	add	r1, sp, #8
 8006928:	f001 fbfc 	bl	8008124 <_svfiprintf_r>
 800692c:	9b02      	ldr	r3, [sp, #8]
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	b01c      	add	sp, #112	@ 0x70
 8006934:	f85d eb04 	ldr.w	lr, [sp], #4
 8006938:	b003      	add	sp, #12
 800693a:	4770      	bx	lr
 800693c:	20000028 	.word	0x20000028
 8006940:	ffff0208 	.word	0xffff0208

08006944 <__sread>:
 8006944:	b510      	push	{r4, lr}
 8006946:	460c      	mov	r4, r1
 8006948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694c:	f000 f86c 	bl	8006a28 <_read_r>
 8006950:	2800      	cmp	r0, #0
 8006952:	bfab      	itete	ge
 8006954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006956:	89a3      	ldrhlt	r3, [r4, #12]
 8006958:	181b      	addge	r3, r3, r0
 800695a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800695e:	bfac      	ite	ge
 8006960:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006962:	81a3      	strhlt	r3, [r4, #12]
 8006964:	bd10      	pop	{r4, pc}

08006966 <__swrite>:
 8006966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800696a:	461f      	mov	r7, r3
 800696c:	898b      	ldrh	r3, [r1, #12]
 800696e:	05db      	lsls	r3, r3, #23
 8006970:	4605      	mov	r5, r0
 8006972:	460c      	mov	r4, r1
 8006974:	4616      	mov	r6, r2
 8006976:	d505      	bpl.n	8006984 <__swrite+0x1e>
 8006978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697c:	2302      	movs	r3, #2
 800697e:	2200      	movs	r2, #0
 8006980:	f000 f840 	bl	8006a04 <_lseek_r>
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800698a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	4632      	mov	r2, r6
 8006992:	463b      	mov	r3, r7
 8006994:	4628      	mov	r0, r5
 8006996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800699a:	f000 b857 	b.w	8006a4c <_write_r>

0800699e <__sseek>:
 800699e:	b510      	push	{r4, lr}
 80069a0:	460c      	mov	r4, r1
 80069a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a6:	f000 f82d 	bl	8006a04 <_lseek_r>
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	bf15      	itete	ne
 80069b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069ba:	81a3      	strheq	r3, [r4, #12]
 80069bc:	bf18      	it	ne
 80069be:	81a3      	strhne	r3, [r4, #12]
 80069c0:	bd10      	pop	{r4, pc}

080069c2 <__sclose>:
 80069c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c6:	f000 b80d 	b.w	80069e4 <_close_r>

080069ca <memset>:
 80069ca:	4402      	add	r2, r0
 80069cc:	4603      	mov	r3, r0
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d100      	bne.n	80069d4 <memset+0xa>
 80069d2:	4770      	bx	lr
 80069d4:	f803 1b01 	strb.w	r1, [r3], #1
 80069d8:	e7f9      	b.n	80069ce <memset+0x4>
	...

080069dc <_localeconv_r>:
 80069dc:	4800      	ldr	r0, [pc, #0]	@ (80069e0 <_localeconv_r+0x4>)
 80069de:	4770      	bx	lr
 80069e0:	20000168 	.word	0x20000168

080069e4 <_close_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d06      	ldr	r5, [pc, #24]	@ (8006a00 <_close_r+0x1c>)
 80069e8:	2300      	movs	r3, #0
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	f7fc f85b 	bl	8002aaa <_close>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_close_r+0x1a>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_close_r+0x1a>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	200005c8 	.word	0x200005c8

08006a04 <_lseek_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d07      	ldr	r5, [pc, #28]	@ (8006a24 <_lseek_r+0x20>)
 8006a08:	4604      	mov	r4, r0
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	2200      	movs	r2, #0
 8006a10:	602a      	str	r2, [r5, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	f7fc f870 	bl	8002af8 <_lseek>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d102      	bne.n	8006a22 <_lseek_r+0x1e>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	b103      	cbz	r3, 8006a22 <_lseek_r+0x1e>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	200005c8 	.word	0x200005c8

08006a28 <_read_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	@ (8006a48 <_read_r+0x20>)
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	4608      	mov	r0, r1
 8006a30:	4611      	mov	r1, r2
 8006a32:	2200      	movs	r2, #0
 8006a34:	602a      	str	r2, [r5, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f7fb fffe 	bl	8002a38 <_read>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_read_r+0x1e>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_read_r+0x1e>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	200005c8 	.word	0x200005c8

08006a4c <_write_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d07      	ldr	r5, [pc, #28]	@ (8006a6c <_write_r+0x20>)
 8006a50:	4604      	mov	r4, r0
 8006a52:	4608      	mov	r0, r1
 8006a54:	4611      	mov	r1, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	602a      	str	r2, [r5, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f7fc f809 	bl	8002a72 <_write>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_write_r+0x1e>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_write_r+0x1e>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	200005c8 	.word	0x200005c8

08006a70 <__errno>:
 8006a70:	4b01      	ldr	r3, [pc, #4]	@ (8006a78 <__errno+0x8>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000028 	.word	0x20000028

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ab4 <__libc_init_array+0x38>)
 8006a80:	4c0d      	ldr	r4, [pc, #52]	@ (8006ab8 <__libc_init_array+0x3c>)
 8006a82:	1b64      	subs	r4, r4, r5
 8006a84:	10a4      	asrs	r4, r4, #2
 8006a86:	2600      	movs	r6, #0
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006abc <__libc_init_array+0x40>)
 8006a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ac0 <__libc_init_array+0x44>)
 8006a90:	f002 f866 	bl	8008b60 <_init>
 8006a94:	1b64      	subs	r4, r4, r5
 8006a96:	10a4      	asrs	r4, r4, #2
 8006a98:	2600      	movs	r6, #0
 8006a9a:	42a6      	cmp	r6, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa4:	4798      	blx	r3
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aae:	4798      	blx	r3
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08009158 	.word	0x08009158
 8006ab8:	08009158 	.word	0x08009158
 8006abc:	08009158 	.word	0x08009158
 8006ac0:	0800915c 	.word	0x0800915c

08006ac4 <__retarget_lock_init_recursive>:
 8006ac4:	4770      	bx	lr

08006ac6 <__retarget_lock_acquire_recursive>:
 8006ac6:	4770      	bx	lr

08006ac8 <__retarget_lock_release_recursive>:
 8006ac8:	4770      	bx	lr

08006aca <quorem>:
 8006aca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ace:	6903      	ldr	r3, [r0, #16]
 8006ad0:	690c      	ldr	r4, [r1, #16]
 8006ad2:	42a3      	cmp	r3, r4
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	db7e      	blt.n	8006bd6 <quorem+0x10c>
 8006ad8:	3c01      	subs	r4, #1
 8006ada:	f101 0814 	add.w	r8, r1, #20
 8006ade:	00a3      	lsls	r3, r4, #2
 8006ae0:	f100 0514 	add.w	r5, r0, #20
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006af4:	3301      	adds	r3, #1
 8006af6:	429a      	cmp	r2, r3
 8006af8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006afc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b00:	d32e      	bcc.n	8006b60 <quorem+0x96>
 8006b02:	f04f 0a00 	mov.w	sl, #0
 8006b06:	46c4      	mov	ip, r8
 8006b08:	46ae      	mov	lr, r5
 8006b0a:	46d3      	mov	fp, sl
 8006b0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b10:	b298      	uxth	r0, r3
 8006b12:	fb06 a000 	mla	r0, r6, r0, sl
 8006b16:	0c02      	lsrs	r2, r0, #16
 8006b18:	0c1b      	lsrs	r3, r3, #16
 8006b1a:	fb06 2303 	mla	r3, r6, r3, r2
 8006b1e:	f8de 2000 	ldr.w	r2, [lr]
 8006b22:	b280      	uxth	r0, r0
 8006b24:	b292      	uxth	r2, r2
 8006b26:	1a12      	subs	r2, r2, r0
 8006b28:	445a      	add	r2, fp
 8006b2a:	f8de 0000 	ldr.w	r0, [lr]
 8006b2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b42:	45e1      	cmp	r9, ip
 8006b44:	f84e 2b04 	str.w	r2, [lr], #4
 8006b48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b4c:	d2de      	bcs.n	8006b0c <quorem+0x42>
 8006b4e:	9b00      	ldr	r3, [sp, #0]
 8006b50:	58eb      	ldr	r3, [r5, r3]
 8006b52:	b92b      	cbnz	r3, 8006b60 <quorem+0x96>
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	3b04      	subs	r3, #4
 8006b58:	429d      	cmp	r5, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	d32f      	bcc.n	8006bbe <quorem+0xf4>
 8006b5e:	613c      	str	r4, [r7, #16]
 8006b60:	4638      	mov	r0, r7
 8006b62:	f001 f97b 	bl	8007e5c <__mcmp>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	db25      	blt.n	8006bb6 <quorem+0xec>
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b72:	f8d1 c000 	ldr.w	ip, [r1]
 8006b76:	fa1f fe82 	uxth.w	lr, r2
 8006b7a:	fa1f f38c 	uxth.w	r3, ip
 8006b7e:	eba3 030e 	sub.w	r3, r3, lr
 8006b82:	4403      	add	r3, r0
 8006b84:	0c12      	lsrs	r2, r2, #16
 8006b86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b94:	45c1      	cmp	r9, r8
 8006b96:	f841 3b04 	str.w	r3, [r1], #4
 8006b9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b9e:	d2e6      	bcs.n	8006b6e <quorem+0xa4>
 8006ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ba8:	b922      	cbnz	r2, 8006bb4 <quorem+0xea>
 8006baa:	3b04      	subs	r3, #4
 8006bac:	429d      	cmp	r5, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	d30b      	bcc.n	8006bca <quorem+0x100>
 8006bb2:	613c      	str	r4, [r7, #16]
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	b003      	add	sp, #12
 8006bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbe:	6812      	ldr	r2, [r2, #0]
 8006bc0:	3b04      	subs	r3, #4
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	d1cb      	bne.n	8006b5e <quorem+0x94>
 8006bc6:	3c01      	subs	r4, #1
 8006bc8:	e7c6      	b.n	8006b58 <quorem+0x8e>
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	3b04      	subs	r3, #4
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	d1ef      	bne.n	8006bb2 <quorem+0xe8>
 8006bd2:	3c01      	subs	r4, #1
 8006bd4:	e7ea      	b.n	8006bac <quorem+0xe2>
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	e7ee      	b.n	8006bb8 <quorem+0xee>
 8006bda:	0000      	movs	r0, r0
 8006bdc:	0000      	movs	r0, r0
	...

08006be0 <_dtoa_r>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	69c7      	ldr	r7, [r0, #28]
 8006be6:	b099      	sub	sp, #100	@ 0x64
 8006be8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006bec:	ec55 4b10 	vmov	r4, r5, d0
 8006bf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006bf2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006bf4:	4683      	mov	fp, r0
 8006bf6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bfa:	b97f      	cbnz	r7, 8006c1c <_dtoa_r+0x3c>
 8006bfc:	2010      	movs	r0, #16
 8006bfe:	f000 fdfd 	bl	80077fc <malloc>
 8006c02:	4602      	mov	r2, r0
 8006c04:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c08:	b920      	cbnz	r0, 8006c14 <_dtoa_r+0x34>
 8006c0a:	4ba7      	ldr	r3, [pc, #668]	@ (8006ea8 <_dtoa_r+0x2c8>)
 8006c0c:	21ef      	movs	r1, #239	@ 0xef
 8006c0e:	48a7      	ldr	r0, [pc, #668]	@ (8006eac <_dtoa_r+0x2cc>)
 8006c10:	f001 fc68 	bl	80084e4 <__assert_func>
 8006c14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c18:	6007      	str	r7, [r0, #0]
 8006c1a:	60c7      	str	r7, [r0, #12]
 8006c1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	b159      	cbz	r1, 8006c3c <_dtoa_r+0x5c>
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	604a      	str	r2, [r1, #4]
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4093      	lsls	r3, r2
 8006c2c:	608b      	str	r3, [r1, #8]
 8006c2e:	4658      	mov	r0, fp
 8006c30:	f000 feda 	bl	80079e8 <_Bfree>
 8006c34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	1e2b      	subs	r3, r5, #0
 8006c3e:	bfb9      	ittee	lt
 8006c40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c44:	9303      	strlt	r3, [sp, #12]
 8006c46:	2300      	movge	r3, #0
 8006c48:	6033      	strge	r3, [r6, #0]
 8006c4a:	9f03      	ldr	r7, [sp, #12]
 8006c4c:	4b98      	ldr	r3, [pc, #608]	@ (8006eb0 <_dtoa_r+0x2d0>)
 8006c4e:	bfbc      	itt	lt
 8006c50:	2201      	movlt	r2, #1
 8006c52:	6032      	strlt	r2, [r6, #0]
 8006c54:	43bb      	bics	r3, r7
 8006c56:	d112      	bne.n	8006c7e <_dtoa_r+0x9e>
 8006c58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c64:	4323      	orrs	r3, r4
 8006c66:	f000 854d 	beq.w	8007704 <_dtoa_r+0xb24>
 8006c6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006ec4 <_dtoa_r+0x2e4>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 854f 	beq.w	8007714 <_dtoa_r+0xb34>
 8006c76:	f10a 0303 	add.w	r3, sl, #3
 8006c7a:	f000 bd49 	b.w	8007710 <_dtoa_r+0xb30>
 8006c7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c82:	2200      	movs	r2, #0
 8006c84:	ec51 0b17 	vmov	r0, r1, d7
 8006c88:	2300      	movs	r3, #0
 8006c8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006c8e:	f7f9 ff3b 	bl	8000b08 <__aeabi_dcmpeq>
 8006c92:	4680      	mov	r8, r0
 8006c94:	b158      	cbz	r0, 8006cae <_dtoa_r+0xce>
 8006c96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c98:	2301      	movs	r3, #1
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c9e:	b113      	cbz	r3, 8006ca6 <_dtoa_r+0xc6>
 8006ca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ca2:	4b84      	ldr	r3, [pc, #528]	@ (8006eb4 <_dtoa_r+0x2d4>)
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ec8 <_dtoa_r+0x2e8>
 8006caa:	f000 bd33 	b.w	8007714 <_dtoa_r+0xb34>
 8006cae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006cb2:	aa16      	add	r2, sp, #88	@ 0x58
 8006cb4:	a917      	add	r1, sp, #92	@ 0x5c
 8006cb6:	4658      	mov	r0, fp
 8006cb8:	f001 f980 	bl	8007fbc <__d2b>
 8006cbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006cc0:	4681      	mov	r9, r0
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	d077      	beq.n	8006db6 <_dtoa_r+0x1d6>
 8006cc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006cd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006cdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4b74      	ldr	r3, [pc, #464]	@ (8006eb8 <_dtoa_r+0x2d8>)
 8006ce6:	f7f9 faef 	bl	80002c8 <__aeabi_dsub>
 8006cea:	a369      	add	r3, pc, #420	@ (adr r3, 8006e90 <_dtoa_r+0x2b0>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f7f9 fca2 	bl	8000638 <__aeabi_dmul>
 8006cf4:	a368      	add	r3, pc, #416	@ (adr r3, 8006e98 <_dtoa_r+0x2b8>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f7f9 fae7 	bl	80002cc <__adddf3>
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4630      	mov	r0, r6
 8006d02:	460d      	mov	r5, r1
 8006d04:	f7f9 fc2e 	bl	8000564 <__aeabi_i2d>
 8006d08:	a365      	add	r3, pc, #404	@ (adr r3, 8006ea0 <_dtoa_r+0x2c0>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fc93 	bl	8000638 <__aeabi_dmul>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7f9 fad7 	bl	80002cc <__adddf3>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	460d      	mov	r5, r1
 8006d22:	f7f9 ff39 	bl	8000b98 <__aeabi_d2iz>
 8006d26:	2200      	movs	r2, #0
 8006d28:	4607      	mov	r7, r0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	4629      	mov	r1, r5
 8006d30:	f7f9 fef4 	bl	8000b1c <__aeabi_dcmplt>
 8006d34:	b140      	cbz	r0, 8006d48 <_dtoa_r+0x168>
 8006d36:	4638      	mov	r0, r7
 8006d38:	f7f9 fc14 	bl	8000564 <__aeabi_i2d>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	462b      	mov	r3, r5
 8006d40:	f7f9 fee2 	bl	8000b08 <__aeabi_dcmpeq>
 8006d44:	b900      	cbnz	r0, 8006d48 <_dtoa_r+0x168>
 8006d46:	3f01      	subs	r7, #1
 8006d48:	2f16      	cmp	r7, #22
 8006d4a:	d851      	bhi.n	8006df0 <_dtoa_r+0x210>
 8006d4c:	4b5b      	ldr	r3, [pc, #364]	@ (8006ebc <_dtoa_r+0x2dc>)
 8006d4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d5a:	f7f9 fedf 	bl	8000b1c <__aeabi_dcmplt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d048      	beq.n	8006df4 <_dtoa_r+0x214>
 8006d62:	3f01      	subs	r7, #1
 8006d64:	2300      	movs	r3, #0
 8006d66:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d6a:	1b9b      	subs	r3, r3, r6
 8006d6c:	1e5a      	subs	r2, r3, #1
 8006d6e:	bf44      	itt	mi
 8006d70:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d74:	2300      	movmi	r3, #0
 8006d76:	9208      	str	r2, [sp, #32]
 8006d78:	bf54      	ite	pl
 8006d7a:	f04f 0800 	movpl.w	r8, #0
 8006d7e:	9308      	strmi	r3, [sp, #32]
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	db39      	blt.n	8006df8 <_dtoa_r+0x218>
 8006d84:	9b08      	ldr	r3, [sp, #32]
 8006d86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006d88:	443b      	add	r3, r7
 8006d8a:	9308      	str	r3, [sp, #32]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d92:	2b09      	cmp	r3, #9
 8006d94:	d864      	bhi.n	8006e60 <_dtoa_r+0x280>
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	bfc4      	itt	gt
 8006d9a:	3b04      	subgt	r3, #4
 8006d9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da0:	f1a3 0302 	sub.w	r3, r3, #2
 8006da4:	bfcc      	ite	gt
 8006da6:	2400      	movgt	r4, #0
 8006da8:	2401      	movle	r4, #1
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d863      	bhi.n	8006e76 <_dtoa_r+0x296>
 8006dae:	e8df f003 	tbb	[pc, r3]
 8006db2:	372a      	.short	0x372a
 8006db4:	5535      	.short	0x5535
 8006db6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006dba:	441e      	add	r6, r3
 8006dbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	bfc1      	itttt	gt
 8006dc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006dc8:	409f      	lslgt	r7, r3
 8006dca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006dce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006dd2:	bfd6      	itet	le
 8006dd4:	f1c3 0320 	rsble	r3, r3, #32
 8006dd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006ddc:	fa04 f003 	lslle.w	r0, r4, r3
 8006de0:	f7f9 fbb0 	bl	8000544 <__aeabi_ui2d>
 8006de4:	2201      	movs	r2, #1
 8006de6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006dea:	3e01      	subs	r6, #1
 8006dec:	9214      	str	r2, [sp, #80]	@ 0x50
 8006dee:	e777      	b.n	8006ce0 <_dtoa_r+0x100>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e7b8      	b.n	8006d66 <_dtoa_r+0x186>
 8006df4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006df6:	e7b7      	b.n	8006d68 <_dtoa_r+0x188>
 8006df8:	427b      	negs	r3, r7
 8006dfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	eba8 0807 	sub.w	r8, r8, r7
 8006e02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e04:	e7c4      	b.n	8006d90 <_dtoa_r+0x1b0>
 8006e06:	2300      	movs	r3, #0
 8006e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dc35      	bgt.n	8006e7c <_dtoa_r+0x29c>
 8006e10:	2301      	movs	r3, #1
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	9307      	str	r3, [sp, #28]
 8006e16:	461a      	mov	r2, r3
 8006e18:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e1a:	e00b      	b.n	8006e34 <_dtoa_r+0x254>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e7f3      	b.n	8006e08 <_dtoa_r+0x228>
 8006e20:	2300      	movs	r3, #0
 8006e22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	9307      	str	r3, [sp, #28]
 8006e30:	bfb8      	it	lt
 8006e32:	2301      	movlt	r3, #1
 8006e34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e38:	2100      	movs	r1, #0
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	f102 0514 	add.w	r5, r2, #20
 8006e40:	429d      	cmp	r5, r3
 8006e42:	d91f      	bls.n	8006e84 <_dtoa_r+0x2a4>
 8006e44:	6041      	str	r1, [r0, #4]
 8006e46:	4658      	mov	r0, fp
 8006e48:	f000 fd8e 	bl	8007968 <_Balloc>
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d13c      	bne.n	8006ecc <_dtoa_r+0x2ec>
 8006e52:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec0 <_dtoa_r+0x2e0>)
 8006e54:	4602      	mov	r2, r0
 8006e56:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e5a:	e6d8      	b.n	8006c0e <_dtoa_r+0x2e>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e7e0      	b.n	8006e22 <_dtoa_r+0x242>
 8006e60:	2401      	movs	r4, #1
 8006e62:	2300      	movs	r3, #0
 8006e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e68:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	9307      	str	r3, [sp, #28]
 8006e70:	2200      	movs	r2, #0
 8006e72:	2312      	movs	r3, #18
 8006e74:	e7d0      	b.n	8006e18 <_dtoa_r+0x238>
 8006e76:	2301      	movs	r3, #1
 8006e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e7a:	e7f5      	b.n	8006e68 <_dtoa_r+0x288>
 8006e7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	9307      	str	r3, [sp, #28]
 8006e82:	e7d7      	b.n	8006e34 <_dtoa_r+0x254>
 8006e84:	3101      	adds	r1, #1
 8006e86:	0052      	lsls	r2, r2, #1
 8006e88:	e7d8      	b.n	8006e3c <_dtoa_r+0x25c>
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w
 8006e90:	636f4361 	.word	0x636f4361
 8006e94:	3fd287a7 	.word	0x3fd287a7
 8006e98:	8b60c8b3 	.word	0x8b60c8b3
 8006e9c:	3fc68a28 	.word	0x3fc68a28
 8006ea0:	509f79fb 	.word	0x509f79fb
 8006ea4:	3fd34413 	.word	0x3fd34413
 8006ea8:	08008e1d 	.word	0x08008e1d
 8006eac:	08008e34 	.word	0x08008e34
 8006eb0:	7ff00000 	.word	0x7ff00000
 8006eb4:	08008ded 	.word	0x08008ded
 8006eb8:	3ff80000 	.word	0x3ff80000
 8006ebc:	08008f30 	.word	0x08008f30
 8006ec0:	08008e8c 	.word	0x08008e8c
 8006ec4:	08008e19 	.word	0x08008e19
 8006ec8:	08008dec 	.word	0x08008dec
 8006ecc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ed0:	6018      	str	r0, [r3, #0]
 8006ed2:	9b07      	ldr	r3, [sp, #28]
 8006ed4:	2b0e      	cmp	r3, #14
 8006ed6:	f200 80a4 	bhi.w	8007022 <_dtoa_r+0x442>
 8006eda:	2c00      	cmp	r4, #0
 8006edc:	f000 80a1 	beq.w	8007022 <_dtoa_r+0x442>
 8006ee0:	2f00      	cmp	r7, #0
 8006ee2:	dd33      	ble.n	8006f4c <_dtoa_r+0x36c>
 8006ee4:	4bad      	ldr	r3, [pc, #692]	@ (800719c <_dtoa_r+0x5bc>)
 8006ee6:	f007 020f 	and.w	r2, r7, #15
 8006eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eee:	ed93 7b00 	vldr	d7, [r3]
 8006ef2:	05f8      	lsls	r0, r7, #23
 8006ef4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ef8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006efc:	d516      	bpl.n	8006f2c <_dtoa_r+0x34c>
 8006efe:	4ba8      	ldr	r3, [pc, #672]	@ (80071a0 <_dtoa_r+0x5c0>)
 8006f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f08:	f7f9 fcc0 	bl	800088c <__aeabi_ddiv>
 8006f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f10:	f004 040f 	and.w	r4, r4, #15
 8006f14:	2603      	movs	r6, #3
 8006f16:	4da2      	ldr	r5, [pc, #648]	@ (80071a0 <_dtoa_r+0x5c0>)
 8006f18:	b954      	cbnz	r4, 8006f30 <_dtoa_r+0x350>
 8006f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f22:	f7f9 fcb3 	bl	800088c <__aeabi_ddiv>
 8006f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f2a:	e028      	b.n	8006f7e <_dtoa_r+0x39e>
 8006f2c:	2602      	movs	r6, #2
 8006f2e:	e7f2      	b.n	8006f16 <_dtoa_r+0x336>
 8006f30:	07e1      	lsls	r1, r4, #31
 8006f32:	d508      	bpl.n	8006f46 <_dtoa_r+0x366>
 8006f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f3c:	f7f9 fb7c 	bl	8000638 <__aeabi_dmul>
 8006f40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f44:	3601      	adds	r6, #1
 8006f46:	1064      	asrs	r4, r4, #1
 8006f48:	3508      	adds	r5, #8
 8006f4a:	e7e5      	b.n	8006f18 <_dtoa_r+0x338>
 8006f4c:	f000 80d2 	beq.w	80070f4 <_dtoa_r+0x514>
 8006f50:	427c      	negs	r4, r7
 8006f52:	4b92      	ldr	r3, [pc, #584]	@ (800719c <_dtoa_r+0x5bc>)
 8006f54:	4d92      	ldr	r5, [pc, #584]	@ (80071a0 <_dtoa_r+0x5c0>)
 8006f56:	f004 020f 	and.w	r2, r4, #15
 8006f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f66:	f7f9 fb67 	bl	8000638 <__aeabi_dmul>
 8006f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f6e:	1124      	asrs	r4, r4, #4
 8006f70:	2300      	movs	r3, #0
 8006f72:	2602      	movs	r6, #2
 8006f74:	2c00      	cmp	r4, #0
 8006f76:	f040 80b2 	bne.w	80070de <_dtoa_r+0x4fe>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1d3      	bne.n	8006f26 <_dtoa_r+0x346>
 8006f7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80b7 	beq.w	80070f8 <_dtoa_r+0x518>
 8006f8a:	4b86      	ldr	r3, [pc, #536]	@ (80071a4 <_dtoa_r+0x5c4>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 fdc3 	bl	8000b1c <__aeabi_dcmplt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f000 80ae 	beq.w	80070f8 <_dtoa_r+0x518>
 8006f9c:	9b07      	ldr	r3, [sp, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 80aa 	beq.w	80070f8 <_dtoa_r+0x518>
 8006fa4:	9b00      	ldr	r3, [sp, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dd37      	ble.n	800701a <_dtoa_r+0x43a>
 8006faa:	1e7b      	subs	r3, r7, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4b7d      	ldr	r3, [pc, #500]	@ (80071a8 <_dtoa_r+0x5c8>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 fb3f 	bl	8000638 <__aeabi_dmul>
 8006fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fbe:	9c00      	ldr	r4, [sp, #0]
 8006fc0:	3601      	adds	r6, #1
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f7f9 face 	bl	8000564 <__aeabi_i2d>
 8006fc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fcc:	f7f9 fb34 	bl	8000638 <__aeabi_dmul>
 8006fd0:	4b76      	ldr	r3, [pc, #472]	@ (80071ac <_dtoa_r+0x5cc>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f7f9 f97a 	bl	80002cc <__adddf3>
 8006fd8:	4605      	mov	r5, r0
 8006fda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006fde:	2c00      	cmp	r4, #0
 8006fe0:	f040 808d 	bne.w	80070fe <_dtoa_r+0x51e>
 8006fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe8:	4b71      	ldr	r3, [pc, #452]	@ (80071b0 <_dtoa_r+0x5d0>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 f96c 	bl	80002c8 <__aeabi_dsub>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4633      	mov	r3, r6
 8006ffc:	f7f9 fdac 	bl	8000b58 <__aeabi_dcmpgt>
 8007000:	2800      	cmp	r0, #0
 8007002:	f040 828b 	bne.w	800751c <_dtoa_r+0x93c>
 8007006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700a:	462a      	mov	r2, r5
 800700c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007010:	f7f9 fd84 	bl	8000b1c <__aeabi_dcmplt>
 8007014:	2800      	cmp	r0, #0
 8007016:	f040 8128 	bne.w	800726a <_dtoa_r+0x68a>
 800701a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800701e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007022:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007024:	2b00      	cmp	r3, #0
 8007026:	f2c0 815a 	blt.w	80072de <_dtoa_r+0x6fe>
 800702a:	2f0e      	cmp	r7, #14
 800702c:	f300 8157 	bgt.w	80072de <_dtoa_r+0x6fe>
 8007030:	4b5a      	ldr	r3, [pc, #360]	@ (800719c <_dtoa_r+0x5bc>)
 8007032:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007036:	ed93 7b00 	vldr	d7, [r3]
 800703a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	ed8d 7b00 	vstr	d7, [sp]
 8007042:	da03      	bge.n	800704c <_dtoa_r+0x46c>
 8007044:	9b07      	ldr	r3, [sp, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f340 8101 	ble.w	800724e <_dtoa_r+0x66e>
 800704c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007050:	4656      	mov	r6, sl
 8007052:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007056:	4620      	mov	r0, r4
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 fc17 	bl	800088c <__aeabi_ddiv>
 800705e:	f7f9 fd9b 	bl	8000b98 <__aeabi_d2iz>
 8007062:	4680      	mov	r8, r0
 8007064:	f7f9 fa7e 	bl	8000564 <__aeabi_i2d>
 8007068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800706c:	f7f9 fae4 	bl	8000638 <__aeabi_dmul>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4620      	mov	r0, r4
 8007076:	4629      	mov	r1, r5
 8007078:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800707c:	f7f9 f924 	bl	80002c8 <__aeabi_dsub>
 8007080:	f806 4b01 	strb.w	r4, [r6], #1
 8007084:	9d07      	ldr	r5, [sp, #28]
 8007086:	eba6 040a 	sub.w	r4, r6, sl
 800708a:	42a5      	cmp	r5, r4
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	f040 8117 	bne.w	80072c2 <_dtoa_r+0x6e2>
 8007094:	f7f9 f91a 	bl	80002cc <__adddf3>
 8007098:	e9dd 2300 	ldrd	r2, r3, [sp]
 800709c:	4604      	mov	r4, r0
 800709e:	460d      	mov	r5, r1
 80070a0:	f7f9 fd5a 	bl	8000b58 <__aeabi_dcmpgt>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	f040 80f9 	bne.w	800729c <_dtoa_r+0x6bc>
 80070aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7f9 fd29 	bl	8000b08 <__aeabi_dcmpeq>
 80070b6:	b118      	cbz	r0, 80070c0 <_dtoa_r+0x4e0>
 80070b8:	f018 0f01 	tst.w	r8, #1
 80070bc:	f040 80ee 	bne.w	800729c <_dtoa_r+0x6bc>
 80070c0:	4649      	mov	r1, r9
 80070c2:	4658      	mov	r0, fp
 80070c4:	f000 fc90 	bl	80079e8 <_Bfree>
 80070c8:	2300      	movs	r3, #0
 80070ca:	7033      	strb	r3, [r6, #0]
 80070cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070ce:	3701      	adds	r7, #1
 80070d0:	601f      	str	r7, [r3, #0]
 80070d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 831d 	beq.w	8007714 <_dtoa_r+0xb34>
 80070da:	601e      	str	r6, [r3, #0]
 80070dc:	e31a      	b.n	8007714 <_dtoa_r+0xb34>
 80070de:	07e2      	lsls	r2, r4, #31
 80070e0:	d505      	bpl.n	80070ee <_dtoa_r+0x50e>
 80070e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070e6:	f7f9 faa7 	bl	8000638 <__aeabi_dmul>
 80070ea:	3601      	adds	r6, #1
 80070ec:	2301      	movs	r3, #1
 80070ee:	1064      	asrs	r4, r4, #1
 80070f0:	3508      	adds	r5, #8
 80070f2:	e73f      	b.n	8006f74 <_dtoa_r+0x394>
 80070f4:	2602      	movs	r6, #2
 80070f6:	e742      	b.n	8006f7e <_dtoa_r+0x39e>
 80070f8:	9c07      	ldr	r4, [sp, #28]
 80070fa:	9704      	str	r7, [sp, #16]
 80070fc:	e761      	b.n	8006fc2 <_dtoa_r+0x3e2>
 80070fe:	4b27      	ldr	r3, [pc, #156]	@ (800719c <_dtoa_r+0x5bc>)
 8007100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007106:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800710a:	4454      	add	r4, sl
 800710c:	2900      	cmp	r1, #0
 800710e:	d053      	beq.n	80071b8 <_dtoa_r+0x5d8>
 8007110:	4928      	ldr	r1, [pc, #160]	@ (80071b4 <_dtoa_r+0x5d4>)
 8007112:	2000      	movs	r0, #0
 8007114:	f7f9 fbba 	bl	800088c <__aeabi_ddiv>
 8007118:	4633      	mov	r3, r6
 800711a:	462a      	mov	r2, r5
 800711c:	f7f9 f8d4 	bl	80002c8 <__aeabi_dsub>
 8007120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007124:	4656      	mov	r6, sl
 8007126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800712a:	f7f9 fd35 	bl	8000b98 <__aeabi_d2iz>
 800712e:	4605      	mov	r5, r0
 8007130:	f7f9 fa18 	bl	8000564 <__aeabi_i2d>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800713c:	f7f9 f8c4 	bl	80002c8 <__aeabi_dsub>
 8007140:	3530      	adds	r5, #48	@ 0x30
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800714a:	f806 5b01 	strb.w	r5, [r6], #1
 800714e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007152:	f7f9 fce3 	bl	8000b1c <__aeabi_dcmplt>
 8007156:	2800      	cmp	r0, #0
 8007158:	d171      	bne.n	800723e <_dtoa_r+0x65e>
 800715a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800715e:	4911      	ldr	r1, [pc, #68]	@ (80071a4 <_dtoa_r+0x5c4>)
 8007160:	2000      	movs	r0, #0
 8007162:	f7f9 f8b1 	bl	80002c8 <__aeabi_dsub>
 8007166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800716a:	f7f9 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 800716e:	2800      	cmp	r0, #0
 8007170:	f040 8095 	bne.w	800729e <_dtoa_r+0x6be>
 8007174:	42a6      	cmp	r6, r4
 8007176:	f43f af50 	beq.w	800701a <_dtoa_r+0x43a>
 800717a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800717e:	4b0a      	ldr	r3, [pc, #40]	@ (80071a8 <_dtoa_r+0x5c8>)
 8007180:	2200      	movs	r2, #0
 8007182:	f7f9 fa59 	bl	8000638 <__aeabi_dmul>
 8007186:	4b08      	ldr	r3, [pc, #32]	@ (80071a8 <_dtoa_r+0x5c8>)
 8007188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800718c:	2200      	movs	r2, #0
 800718e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007192:	f7f9 fa51 	bl	8000638 <__aeabi_dmul>
 8007196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800719a:	e7c4      	b.n	8007126 <_dtoa_r+0x546>
 800719c:	08008f30 	.word	0x08008f30
 80071a0:	08008f08 	.word	0x08008f08
 80071a4:	3ff00000 	.word	0x3ff00000
 80071a8:	40240000 	.word	0x40240000
 80071ac:	401c0000 	.word	0x401c0000
 80071b0:	40140000 	.word	0x40140000
 80071b4:	3fe00000 	.word	0x3fe00000
 80071b8:	4631      	mov	r1, r6
 80071ba:	4628      	mov	r0, r5
 80071bc:	f7f9 fa3c 	bl	8000638 <__aeabi_dmul>
 80071c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80071c6:	4656      	mov	r6, sl
 80071c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071cc:	f7f9 fce4 	bl	8000b98 <__aeabi_d2iz>
 80071d0:	4605      	mov	r5, r0
 80071d2:	f7f9 f9c7 	bl	8000564 <__aeabi_i2d>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071de:	f7f9 f873 	bl	80002c8 <__aeabi_dsub>
 80071e2:	3530      	adds	r5, #48	@ 0x30
 80071e4:	f806 5b01 	strb.w	r5, [r6], #1
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	42a6      	cmp	r6, r4
 80071ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	d124      	bne.n	8007242 <_dtoa_r+0x662>
 80071f8:	4bac      	ldr	r3, [pc, #688]	@ (80074ac <_dtoa_r+0x8cc>)
 80071fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071fe:	f7f9 f865 	bl	80002cc <__adddf3>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800720a:	f7f9 fca5 	bl	8000b58 <__aeabi_dcmpgt>
 800720e:	2800      	cmp	r0, #0
 8007210:	d145      	bne.n	800729e <_dtoa_r+0x6be>
 8007212:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007216:	49a5      	ldr	r1, [pc, #660]	@ (80074ac <_dtoa_r+0x8cc>)
 8007218:	2000      	movs	r0, #0
 800721a:	f7f9 f855 	bl	80002c8 <__aeabi_dsub>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007226:	f7f9 fc79 	bl	8000b1c <__aeabi_dcmplt>
 800722a:	2800      	cmp	r0, #0
 800722c:	f43f aef5 	beq.w	800701a <_dtoa_r+0x43a>
 8007230:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007232:	1e73      	subs	r3, r6, #1
 8007234:	9315      	str	r3, [sp, #84]	@ 0x54
 8007236:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800723a:	2b30      	cmp	r3, #48	@ 0x30
 800723c:	d0f8      	beq.n	8007230 <_dtoa_r+0x650>
 800723e:	9f04      	ldr	r7, [sp, #16]
 8007240:	e73e      	b.n	80070c0 <_dtoa_r+0x4e0>
 8007242:	4b9b      	ldr	r3, [pc, #620]	@ (80074b0 <_dtoa_r+0x8d0>)
 8007244:	f7f9 f9f8 	bl	8000638 <__aeabi_dmul>
 8007248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800724c:	e7bc      	b.n	80071c8 <_dtoa_r+0x5e8>
 800724e:	d10c      	bne.n	800726a <_dtoa_r+0x68a>
 8007250:	4b98      	ldr	r3, [pc, #608]	@ (80074b4 <_dtoa_r+0x8d4>)
 8007252:	2200      	movs	r2, #0
 8007254:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007258:	f7f9 f9ee 	bl	8000638 <__aeabi_dmul>
 800725c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007260:	f7f9 fc70 	bl	8000b44 <__aeabi_dcmpge>
 8007264:	2800      	cmp	r0, #0
 8007266:	f000 8157 	beq.w	8007518 <_dtoa_r+0x938>
 800726a:	2400      	movs	r4, #0
 800726c:	4625      	mov	r5, r4
 800726e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007270:	43db      	mvns	r3, r3
 8007272:	9304      	str	r3, [sp, #16]
 8007274:	4656      	mov	r6, sl
 8007276:	2700      	movs	r7, #0
 8007278:	4621      	mov	r1, r4
 800727a:	4658      	mov	r0, fp
 800727c:	f000 fbb4 	bl	80079e8 <_Bfree>
 8007280:	2d00      	cmp	r5, #0
 8007282:	d0dc      	beq.n	800723e <_dtoa_r+0x65e>
 8007284:	b12f      	cbz	r7, 8007292 <_dtoa_r+0x6b2>
 8007286:	42af      	cmp	r7, r5
 8007288:	d003      	beq.n	8007292 <_dtoa_r+0x6b2>
 800728a:	4639      	mov	r1, r7
 800728c:	4658      	mov	r0, fp
 800728e:	f000 fbab 	bl	80079e8 <_Bfree>
 8007292:	4629      	mov	r1, r5
 8007294:	4658      	mov	r0, fp
 8007296:	f000 fba7 	bl	80079e8 <_Bfree>
 800729a:	e7d0      	b.n	800723e <_dtoa_r+0x65e>
 800729c:	9704      	str	r7, [sp, #16]
 800729e:	4633      	mov	r3, r6
 80072a0:	461e      	mov	r6, r3
 80072a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072a6:	2a39      	cmp	r2, #57	@ 0x39
 80072a8:	d107      	bne.n	80072ba <_dtoa_r+0x6da>
 80072aa:	459a      	cmp	sl, r3
 80072ac:	d1f8      	bne.n	80072a0 <_dtoa_r+0x6c0>
 80072ae:	9a04      	ldr	r2, [sp, #16]
 80072b0:	3201      	adds	r2, #1
 80072b2:	9204      	str	r2, [sp, #16]
 80072b4:	2230      	movs	r2, #48	@ 0x30
 80072b6:	f88a 2000 	strb.w	r2, [sl]
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	3201      	adds	r2, #1
 80072be:	701a      	strb	r2, [r3, #0]
 80072c0:	e7bd      	b.n	800723e <_dtoa_r+0x65e>
 80072c2:	4b7b      	ldr	r3, [pc, #492]	@ (80074b0 <_dtoa_r+0x8d0>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	f7f9 f9b7 	bl	8000638 <__aeabi_dmul>
 80072ca:	2200      	movs	r2, #0
 80072cc:	2300      	movs	r3, #0
 80072ce:	4604      	mov	r4, r0
 80072d0:	460d      	mov	r5, r1
 80072d2:	f7f9 fc19 	bl	8000b08 <__aeabi_dcmpeq>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f43f aebb 	beq.w	8007052 <_dtoa_r+0x472>
 80072dc:	e6f0      	b.n	80070c0 <_dtoa_r+0x4e0>
 80072de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80072e0:	2a00      	cmp	r2, #0
 80072e2:	f000 80db 	beq.w	800749c <_dtoa_r+0x8bc>
 80072e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072e8:	2a01      	cmp	r2, #1
 80072ea:	f300 80bf 	bgt.w	800746c <_dtoa_r+0x88c>
 80072ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	f000 80b7 	beq.w	8007464 <_dtoa_r+0x884>
 80072f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072fc:	4646      	mov	r6, r8
 80072fe:	9a08      	ldr	r2, [sp, #32]
 8007300:	2101      	movs	r1, #1
 8007302:	441a      	add	r2, r3
 8007304:	4658      	mov	r0, fp
 8007306:	4498      	add	r8, r3
 8007308:	9208      	str	r2, [sp, #32]
 800730a:	f000 fc21 	bl	8007b50 <__i2b>
 800730e:	4605      	mov	r5, r0
 8007310:	b15e      	cbz	r6, 800732a <_dtoa_r+0x74a>
 8007312:	9b08      	ldr	r3, [sp, #32]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd08      	ble.n	800732a <_dtoa_r+0x74a>
 8007318:	42b3      	cmp	r3, r6
 800731a:	9a08      	ldr	r2, [sp, #32]
 800731c:	bfa8      	it	ge
 800731e:	4633      	movge	r3, r6
 8007320:	eba8 0803 	sub.w	r8, r8, r3
 8007324:	1af6      	subs	r6, r6, r3
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	9308      	str	r3, [sp, #32]
 800732a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800732c:	b1f3      	cbz	r3, 800736c <_dtoa_r+0x78c>
 800732e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 80b7 	beq.w	80074a4 <_dtoa_r+0x8c4>
 8007336:	b18c      	cbz	r4, 800735c <_dtoa_r+0x77c>
 8007338:	4629      	mov	r1, r5
 800733a:	4622      	mov	r2, r4
 800733c:	4658      	mov	r0, fp
 800733e:	f000 fcc7 	bl	8007cd0 <__pow5mult>
 8007342:	464a      	mov	r2, r9
 8007344:	4601      	mov	r1, r0
 8007346:	4605      	mov	r5, r0
 8007348:	4658      	mov	r0, fp
 800734a:	f000 fc17 	bl	8007b7c <__multiply>
 800734e:	4649      	mov	r1, r9
 8007350:	9004      	str	r0, [sp, #16]
 8007352:	4658      	mov	r0, fp
 8007354:	f000 fb48 	bl	80079e8 <_Bfree>
 8007358:	9b04      	ldr	r3, [sp, #16]
 800735a:	4699      	mov	r9, r3
 800735c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800735e:	1b1a      	subs	r2, r3, r4
 8007360:	d004      	beq.n	800736c <_dtoa_r+0x78c>
 8007362:	4649      	mov	r1, r9
 8007364:	4658      	mov	r0, fp
 8007366:	f000 fcb3 	bl	8007cd0 <__pow5mult>
 800736a:	4681      	mov	r9, r0
 800736c:	2101      	movs	r1, #1
 800736e:	4658      	mov	r0, fp
 8007370:	f000 fbee 	bl	8007b50 <__i2b>
 8007374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007376:	4604      	mov	r4, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 81cf 	beq.w	800771c <_dtoa_r+0xb3c>
 800737e:	461a      	mov	r2, r3
 8007380:	4601      	mov	r1, r0
 8007382:	4658      	mov	r0, fp
 8007384:	f000 fca4 	bl	8007cd0 <__pow5mult>
 8007388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738a:	2b01      	cmp	r3, #1
 800738c:	4604      	mov	r4, r0
 800738e:	f300 8095 	bgt.w	80074bc <_dtoa_r+0x8dc>
 8007392:	9b02      	ldr	r3, [sp, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 8087 	bne.w	80074a8 <_dtoa_r+0x8c8>
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 8089 	bne.w	80074b8 <_dtoa_r+0x8d8>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073ac:	0d1b      	lsrs	r3, r3, #20
 80073ae:	051b      	lsls	r3, r3, #20
 80073b0:	b12b      	cbz	r3, 80073be <_dtoa_r+0x7de>
 80073b2:	9b08      	ldr	r3, [sp, #32]
 80073b4:	3301      	adds	r3, #1
 80073b6:	9308      	str	r3, [sp, #32]
 80073b8:	f108 0801 	add.w	r8, r8, #1
 80073bc:	2301      	movs	r3, #1
 80073be:	930a      	str	r3, [sp, #40]	@ 0x28
 80073c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 81b0 	beq.w	8007728 <_dtoa_r+0xb48>
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073ce:	6918      	ldr	r0, [r3, #16]
 80073d0:	f000 fb72 	bl	8007ab8 <__hi0bits>
 80073d4:	f1c0 0020 	rsb	r0, r0, #32
 80073d8:	9b08      	ldr	r3, [sp, #32]
 80073da:	4418      	add	r0, r3
 80073dc:	f010 001f 	ands.w	r0, r0, #31
 80073e0:	d077      	beq.n	80074d2 <_dtoa_r+0x8f2>
 80073e2:	f1c0 0320 	rsb	r3, r0, #32
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	dd6b      	ble.n	80074c2 <_dtoa_r+0x8e2>
 80073ea:	9b08      	ldr	r3, [sp, #32]
 80073ec:	f1c0 001c 	rsb	r0, r0, #28
 80073f0:	4403      	add	r3, r0
 80073f2:	4480      	add	r8, r0
 80073f4:	4406      	add	r6, r0
 80073f6:	9308      	str	r3, [sp, #32]
 80073f8:	f1b8 0f00 	cmp.w	r8, #0
 80073fc:	dd05      	ble.n	800740a <_dtoa_r+0x82a>
 80073fe:	4649      	mov	r1, r9
 8007400:	4642      	mov	r2, r8
 8007402:	4658      	mov	r0, fp
 8007404:	f000 fcbe 	bl	8007d84 <__lshift>
 8007408:	4681      	mov	r9, r0
 800740a:	9b08      	ldr	r3, [sp, #32]
 800740c:	2b00      	cmp	r3, #0
 800740e:	dd05      	ble.n	800741c <_dtoa_r+0x83c>
 8007410:	4621      	mov	r1, r4
 8007412:	461a      	mov	r2, r3
 8007414:	4658      	mov	r0, fp
 8007416:	f000 fcb5 	bl	8007d84 <__lshift>
 800741a:	4604      	mov	r4, r0
 800741c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800741e:	2b00      	cmp	r3, #0
 8007420:	d059      	beq.n	80074d6 <_dtoa_r+0x8f6>
 8007422:	4621      	mov	r1, r4
 8007424:	4648      	mov	r0, r9
 8007426:	f000 fd19 	bl	8007e5c <__mcmp>
 800742a:	2800      	cmp	r0, #0
 800742c:	da53      	bge.n	80074d6 <_dtoa_r+0x8f6>
 800742e:	1e7b      	subs	r3, r7, #1
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	4649      	mov	r1, r9
 8007434:	2300      	movs	r3, #0
 8007436:	220a      	movs	r2, #10
 8007438:	4658      	mov	r0, fp
 800743a:	f000 faf7 	bl	8007a2c <__multadd>
 800743e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007440:	4681      	mov	r9, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8172 	beq.w	800772c <_dtoa_r+0xb4c>
 8007448:	2300      	movs	r3, #0
 800744a:	4629      	mov	r1, r5
 800744c:	220a      	movs	r2, #10
 800744e:	4658      	mov	r0, fp
 8007450:	f000 faec 	bl	8007a2c <__multadd>
 8007454:	9b00      	ldr	r3, [sp, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	4605      	mov	r5, r0
 800745a:	dc67      	bgt.n	800752c <_dtoa_r+0x94c>
 800745c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800745e:	2b02      	cmp	r3, #2
 8007460:	dc41      	bgt.n	80074e6 <_dtoa_r+0x906>
 8007462:	e063      	b.n	800752c <_dtoa_r+0x94c>
 8007464:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007466:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800746a:	e746      	b.n	80072fa <_dtoa_r+0x71a>
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	1e5c      	subs	r4, r3, #1
 8007470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007472:	42a3      	cmp	r3, r4
 8007474:	bfbf      	itttt	lt
 8007476:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007478:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800747a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800747c:	1ae3      	sublt	r3, r4, r3
 800747e:	bfb4      	ite	lt
 8007480:	18d2      	addlt	r2, r2, r3
 8007482:	1b1c      	subge	r4, r3, r4
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	bfbc      	itt	lt
 8007488:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800748a:	2400      	movlt	r4, #0
 800748c:	2b00      	cmp	r3, #0
 800748e:	bfb5      	itete	lt
 8007490:	eba8 0603 	sublt.w	r6, r8, r3
 8007494:	9b07      	ldrge	r3, [sp, #28]
 8007496:	2300      	movlt	r3, #0
 8007498:	4646      	movge	r6, r8
 800749a:	e730      	b.n	80072fe <_dtoa_r+0x71e>
 800749c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800749e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80074a0:	4646      	mov	r6, r8
 80074a2:	e735      	b.n	8007310 <_dtoa_r+0x730>
 80074a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074a6:	e75c      	b.n	8007362 <_dtoa_r+0x782>
 80074a8:	2300      	movs	r3, #0
 80074aa:	e788      	b.n	80073be <_dtoa_r+0x7de>
 80074ac:	3fe00000 	.word	0x3fe00000
 80074b0:	40240000 	.word	0x40240000
 80074b4:	40140000 	.word	0x40140000
 80074b8:	9b02      	ldr	r3, [sp, #8]
 80074ba:	e780      	b.n	80073be <_dtoa_r+0x7de>
 80074bc:	2300      	movs	r3, #0
 80074be:	930a      	str	r3, [sp, #40]	@ 0x28
 80074c0:	e782      	b.n	80073c8 <_dtoa_r+0x7e8>
 80074c2:	d099      	beq.n	80073f8 <_dtoa_r+0x818>
 80074c4:	9a08      	ldr	r2, [sp, #32]
 80074c6:	331c      	adds	r3, #28
 80074c8:	441a      	add	r2, r3
 80074ca:	4498      	add	r8, r3
 80074cc:	441e      	add	r6, r3
 80074ce:	9208      	str	r2, [sp, #32]
 80074d0:	e792      	b.n	80073f8 <_dtoa_r+0x818>
 80074d2:	4603      	mov	r3, r0
 80074d4:	e7f6      	b.n	80074c4 <_dtoa_r+0x8e4>
 80074d6:	9b07      	ldr	r3, [sp, #28]
 80074d8:	9704      	str	r7, [sp, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	dc20      	bgt.n	8007520 <_dtoa_r+0x940>
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	dd1e      	ble.n	8007524 <_dtoa_r+0x944>
 80074e6:	9b00      	ldr	r3, [sp, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f47f aec0 	bne.w	800726e <_dtoa_r+0x68e>
 80074ee:	4621      	mov	r1, r4
 80074f0:	2205      	movs	r2, #5
 80074f2:	4658      	mov	r0, fp
 80074f4:	f000 fa9a 	bl	8007a2c <__multadd>
 80074f8:	4601      	mov	r1, r0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4648      	mov	r0, r9
 80074fe:	f000 fcad 	bl	8007e5c <__mcmp>
 8007502:	2800      	cmp	r0, #0
 8007504:	f77f aeb3 	ble.w	800726e <_dtoa_r+0x68e>
 8007508:	4656      	mov	r6, sl
 800750a:	2331      	movs	r3, #49	@ 0x31
 800750c:	f806 3b01 	strb.w	r3, [r6], #1
 8007510:	9b04      	ldr	r3, [sp, #16]
 8007512:	3301      	adds	r3, #1
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	e6ae      	b.n	8007276 <_dtoa_r+0x696>
 8007518:	9c07      	ldr	r4, [sp, #28]
 800751a:	9704      	str	r7, [sp, #16]
 800751c:	4625      	mov	r5, r4
 800751e:	e7f3      	b.n	8007508 <_dtoa_r+0x928>
 8007520:	9b07      	ldr	r3, [sp, #28]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8104 	beq.w	8007734 <_dtoa_r+0xb54>
 800752c:	2e00      	cmp	r6, #0
 800752e:	dd05      	ble.n	800753c <_dtoa_r+0x95c>
 8007530:	4629      	mov	r1, r5
 8007532:	4632      	mov	r2, r6
 8007534:	4658      	mov	r0, fp
 8007536:	f000 fc25 	bl	8007d84 <__lshift>
 800753a:	4605      	mov	r5, r0
 800753c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d05a      	beq.n	80075f8 <_dtoa_r+0xa18>
 8007542:	6869      	ldr	r1, [r5, #4]
 8007544:	4658      	mov	r0, fp
 8007546:	f000 fa0f 	bl	8007968 <_Balloc>
 800754a:	4606      	mov	r6, r0
 800754c:	b928      	cbnz	r0, 800755a <_dtoa_r+0x97a>
 800754e:	4b84      	ldr	r3, [pc, #528]	@ (8007760 <_dtoa_r+0xb80>)
 8007550:	4602      	mov	r2, r0
 8007552:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007556:	f7ff bb5a 	b.w	8006c0e <_dtoa_r+0x2e>
 800755a:	692a      	ldr	r2, [r5, #16]
 800755c:	3202      	adds	r2, #2
 800755e:	0092      	lsls	r2, r2, #2
 8007560:	f105 010c 	add.w	r1, r5, #12
 8007564:	300c      	adds	r0, #12
 8007566:	f000 ffaf 	bl	80084c8 <memcpy>
 800756a:	2201      	movs	r2, #1
 800756c:	4631      	mov	r1, r6
 800756e:	4658      	mov	r0, fp
 8007570:	f000 fc08 	bl	8007d84 <__lshift>
 8007574:	f10a 0301 	add.w	r3, sl, #1
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	9b00      	ldr	r3, [sp, #0]
 800757c:	4453      	add	r3, sl
 800757e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	462f      	mov	r7, r5
 8007588:	930a      	str	r3, [sp, #40]	@ 0x28
 800758a:	4605      	mov	r5, r0
 800758c:	9b07      	ldr	r3, [sp, #28]
 800758e:	4621      	mov	r1, r4
 8007590:	3b01      	subs	r3, #1
 8007592:	4648      	mov	r0, r9
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	f7ff fa98 	bl	8006aca <quorem>
 800759a:	4639      	mov	r1, r7
 800759c:	9002      	str	r0, [sp, #8]
 800759e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075a2:	4648      	mov	r0, r9
 80075a4:	f000 fc5a 	bl	8007e5c <__mcmp>
 80075a8:	462a      	mov	r2, r5
 80075aa:	9008      	str	r0, [sp, #32]
 80075ac:	4621      	mov	r1, r4
 80075ae:	4658      	mov	r0, fp
 80075b0:	f000 fc70 	bl	8007e94 <__mdiff>
 80075b4:	68c2      	ldr	r2, [r0, #12]
 80075b6:	4606      	mov	r6, r0
 80075b8:	bb02      	cbnz	r2, 80075fc <_dtoa_r+0xa1c>
 80075ba:	4601      	mov	r1, r0
 80075bc:	4648      	mov	r0, r9
 80075be:	f000 fc4d 	bl	8007e5c <__mcmp>
 80075c2:	4602      	mov	r2, r0
 80075c4:	4631      	mov	r1, r6
 80075c6:	4658      	mov	r0, fp
 80075c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80075ca:	f000 fa0d 	bl	80079e8 <_Bfree>
 80075ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075d2:	9e07      	ldr	r6, [sp, #28]
 80075d4:	ea43 0102 	orr.w	r1, r3, r2
 80075d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075da:	4319      	orrs	r1, r3
 80075dc:	d110      	bne.n	8007600 <_dtoa_r+0xa20>
 80075de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075e2:	d029      	beq.n	8007638 <_dtoa_r+0xa58>
 80075e4:	9b08      	ldr	r3, [sp, #32]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dd02      	ble.n	80075f0 <_dtoa_r+0xa10>
 80075ea:	9b02      	ldr	r3, [sp, #8]
 80075ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80075f0:	9b00      	ldr	r3, [sp, #0]
 80075f2:	f883 8000 	strb.w	r8, [r3]
 80075f6:	e63f      	b.n	8007278 <_dtoa_r+0x698>
 80075f8:	4628      	mov	r0, r5
 80075fa:	e7bb      	b.n	8007574 <_dtoa_r+0x994>
 80075fc:	2201      	movs	r2, #1
 80075fe:	e7e1      	b.n	80075c4 <_dtoa_r+0x9e4>
 8007600:	9b08      	ldr	r3, [sp, #32]
 8007602:	2b00      	cmp	r3, #0
 8007604:	db04      	blt.n	8007610 <_dtoa_r+0xa30>
 8007606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007608:	430b      	orrs	r3, r1
 800760a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800760c:	430b      	orrs	r3, r1
 800760e:	d120      	bne.n	8007652 <_dtoa_r+0xa72>
 8007610:	2a00      	cmp	r2, #0
 8007612:	dded      	ble.n	80075f0 <_dtoa_r+0xa10>
 8007614:	4649      	mov	r1, r9
 8007616:	2201      	movs	r2, #1
 8007618:	4658      	mov	r0, fp
 800761a:	f000 fbb3 	bl	8007d84 <__lshift>
 800761e:	4621      	mov	r1, r4
 8007620:	4681      	mov	r9, r0
 8007622:	f000 fc1b 	bl	8007e5c <__mcmp>
 8007626:	2800      	cmp	r0, #0
 8007628:	dc03      	bgt.n	8007632 <_dtoa_r+0xa52>
 800762a:	d1e1      	bne.n	80075f0 <_dtoa_r+0xa10>
 800762c:	f018 0f01 	tst.w	r8, #1
 8007630:	d0de      	beq.n	80075f0 <_dtoa_r+0xa10>
 8007632:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007636:	d1d8      	bne.n	80075ea <_dtoa_r+0xa0a>
 8007638:	9a00      	ldr	r2, [sp, #0]
 800763a:	2339      	movs	r3, #57	@ 0x39
 800763c:	7013      	strb	r3, [r2, #0]
 800763e:	4633      	mov	r3, r6
 8007640:	461e      	mov	r6, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007648:	2a39      	cmp	r2, #57	@ 0x39
 800764a:	d052      	beq.n	80076f2 <_dtoa_r+0xb12>
 800764c:	3201      	adds	r2, #1
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	e612      	b.n	8007278 <_dtoa_r+0x698>
 8007652:	2a00      	cmp	r2, #0
 8007654:	dd07      	ble.n	8007666 <_dtoa_r+0xa86>
 8007656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800765a:	d0ed      	beq.n	8007638 <_dtoa_r+0xa58>
 800765c:	9a00      	ldr	r2, [sp, #0]
 800765e:	f108 0301 	add.w	r3, r8, #1
 8007662:	7013      	strb	r3, [r2, #0]
 8007664:	e608      	b.n	8007278 <_dtoa_r+0x698>
 8007666:	9b07      	ldr	r3, [sp, #28]
 8007668:	9a07      	ldr	r2, [sp, #28]
 800766a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800766e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007670:	4293      	cmp	r3, r2
 8007672:	d028      	beq.n	80076c6 <_dtoa_r+0xae6>
 8007674:	4649      	mov	r1, r9
 8007676:	2300      	movs	r3, #0
 8007678:	220a      	movs	r2, #10
 800767a:	4658      	mov	r0, fp
 800767c:	f000 f9d6 	bl	8007a2c <__multadd>
 8007680:	42af      	cmp	r7, r5
 8007682:	4681      	mov	r9, r0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	f04f 020a 	mov.w	r2, #10
 800768c:	4639      	mov	r1, r7
 800768e:	4658      	mov	r0, fp
 8007690:	d107      	bne.n	80076a2 <_dtoa_r+0xac2>
 8007692:	f000 f9cb 	bl	8007a2c <__multadd>
 8007696:	4607      	mov	r7, r0
 8007698:	4605      	mov	r5, r0
 800769a:	9b07      	ldr	r3, [sp, #28]
 800769c:	3301      	adds	r3, #1
 800769e:	9307      	str	r3, [sp, #28]
 80076a0:	e774      	b.n	800758c <_dtoa_r+0x9ac>
 80076a2:	f000 f9c3 	bl	8007a2c <__multadd>
 80076a6:	4629      	mov	r1, r5
 80076a8:	4607      	mov	r7, r0
 80076aa:	2300      	movs	r3, #0
 80076ac:	220a      	movs	r2, #10
 80076ae:	4658      	mov	r0, fp
 80076b0:	f000 f9bc 	bl	8007a2c <__multadd>
 80076b4:	4605      	mov	r5, r0
 80076b6:	e7f0      	b.n	800769a <_dtoa_r+0xaba>
 80076b8:	9b00      	ldr	r3, [sp, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bfcc      	ite	gt
 80076be:	461e      	movgt	r6, r3
 80076c0:	2601      	movle	r6, #1
 80076c2:	4456      	add	r6, sl
 80076c4:	2700      	movs	r7, #0
 80076c6:	4649      	mov	r1, r9
 80076c8:	2201      	movs	r2, #1
 80076ca:	4658      	mov	r0, fp
 80076cc:	f000 fb5a 	bl	8007d84 <__lshift>
 80076d0:	4621      	mov	r1, r4
 80076d2:	4681      	mov	r9, r0
 80076d4:	f000 fbc2 	bl	8007e5c <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	dcb0      	bgt.n	800763e <_dtoa_r+0xa5e>
 80076dc:	d102      	bne.n	80076e4 <_dtoa_r+0xb04>
 80076de:	f018 0f01 	tst.w	r8, #1
 80076e2:	d1ac      	bne.n	800763e <_dtoa_r+0xa5e>
 80076e4:	4633      	mov	r3, r6
 80076e6:	461e      	mov	r6, r3
 80076e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ec:	2a30      	cmp	r2, #48	@ 0x30
 80076ee:	d0fa      	beq.n	80076e6 <_dtoa_r+0xb06>
 80076f0:	e5c2      	b.n	8007278 <_dtoa_r+0x698>
 80076f2:	459a      	cmp	sl, r3
 80076f4:	d1a4      	bne.n	8007640 <_dtoa_r+0xa60>
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	2331      	movs	r3, #49	@ 0x31
 80076fe:	f88a 3000 	strb.w	r3, [sl]
 8007702:	e5b9      	b.n	8007278 <_dtoa_r+0x698>
 8007704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007706:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007764 <_dtoa_r+0xb84>
 800770a:	b11b      	cbz	r3, 8007714 <_dtoa_r+0xb34>
 800770c:	f10a 0308 	add.w	r3, sl, #8
 8007710:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4650      	mov	r0, sl
 8007716:	b019      	add	sp, #100	@ 0x64
 8007718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771e:	2b01      	cmp	r3, #1
 8007720:	f77f ae37 	ble.w	8007392 <_dtoa_r+0x7b2>
 8007724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007726:	930a      	str	r3, [sp, #40]	@ 0x28
 8007728:	2001      	movs	r0, #1
 800772a:	e655      	b.n	80073d8 <_dtoa_r+0x7f8>
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f77f aed6 	ble.w	80074e0 <_dtoa_r+0x900>
 8007734:	4656      	mov	r6, sl
 8007736:	4621      	mov	r1, r4
 8007738:	4648      	mov	r0, r9
 800773a:	f7ff f9c6 	bl	8006aca <quorem>
 800773e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007742:	f806 8b01 	strb.w	r8, [r6], #1
 8007746:	9b00      	ldr	r3, [sp, #0]
 8007748:	eba6 020a 	sub.w	r2, r6, sl
 800774c:	4293      	cmp	r3, r2
 800774e:	ddb3      	ble.n	80076b8 <_dtoa_r+0xad8>
 8007750:	4649      	mov	r1, r9
 8007752:	2300      	movs	r3, #0
 8007754:	220a      	movs	r2, #10
 8007756:	4658      	mov	r0, fp
 8007758:	f000 f968 	bl	8007a2c <__multadd>
 800775c:	4681      	mov	r9, r0
 800775e:	e7ea      	b.n	8007736 <_dtoa_r+0xb56>
 8007760:	08008e8c 	.word	0x08008e8c
 8007764:	08008e10 	.word	0x08008e10

08007768 <_free_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4605      	mov	r5, r0
 800776c:	2900      	cmp	r1, #0
 800776e:	d041      	beq.n	80077f4 <_free_r+0x8c>
 8007770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007774:	1f0c      	subs	r4, r1, #4
 8007776:	2b00      	cmp	r3, #0
 8007778:	bfb8      	it	lt
 800777a:	18e4      	addlt	r4, r4, r3
 800777c:	f000 f8e8 	bl	8007950 <__malloc_lock>
 8007780:	4a1d      	ldr	r2, [pc, #116]	@ (80077f8 <_free_r+0x90>)
 8007782:	6813      	ldr	r3, [r2, #0]
 8007784:	b933      	cbnz	r3, 8007794 <_free_r+0x2c>
 8007786:	6063      	str	r3, [r4, #4]
 8007788:	6014      	str	r4, [r2, #0]
 800778a:	4628      	mov	r0, r5
 800778c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007790:	f000 b8e4 	b.w	800795c <__malloc_unlock>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d908      	bls.n	80077aa <_free_r+0x42>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	1821      	adds	r1, r4, r0
 800779c:	428b      	cmp	r3, r1
 800779e:	bf01      	itttt	eq
 80077a0:	6819      	ldreq	r1, [r3, #0]
 80077a2:	685b      	ldreq	r3, [r3, #4]
 80077a4:	1809      	addeq	r1, r1, r0
 80077a6:	6021      	streq	r1, [r4, #0]
 80077a8:	e7ed      	b.n	8007786 <_free_r+0x1e>
 80077aa:	461a      	mov	r2, r3
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	b10b      	cbz	r3, 80077b4 <_free_r+0x4c>
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d9fa      	bls.n	80077aa <_free_r+0x42>
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	1850      	adds	r0, r2, r1
 80077b8:	42a0      	cmp	r0, r4
 80077ba:	d10b      	bne.n	80077d4 <_free_r+0x6c>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	4401      	add	r1, r0
 80077c0:	1850      	adds	r0, r2, r1
 80077c2:	4283      	cmp	r3, r0
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	d1e0      	bne.n	800778a <_free_r+0x22>
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	6053      	str	r3, [r2, #4]
 80077ce:	4408      	add	r0, r1
 80077d0:	6010      	str	r0, [r2, #0]
 80077d2:	e7da      	b.n	800778a <_free_r+0x22>
 80077d4:	d902      	bls.n	80077dc <_free_r+0x74>
 80077d6:	230c      	movs	r3, #12
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	e7d6      	b.n	800778a <_free_r+0x22>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	1821      	adds	r1, r4, r0
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf04      	itt	eq
 80077e4:	6819      	ldreq	r1, [r3, #0]
 80077e6:	685b      	ldreq	r3, [r3, #4]
 80077e8:	6063      	str	r3, [r4, #4]
 80077ea:	bf04      	itt	eq
 80077ec:	1809      	addeq	r1, r1, r0
 80077ee:	6021      	streq	r1, [r4, #0]
 80077f0:	6054      	str	r4, [r2, #4]
 80077f2:	e7ca      	b.n	800778a <_free_r+0x22>
 80077f4:	bd38      	pop	{r3, r4, r5, pc}
 80077f6:	bf00      	nop
 80077f8:	200005d4 	.word	0x200005d4

080077fc <malloc>:
 80077fc:	4b02      	ldr	r3, [pc, #8]	@ (8007808 <malloc+0xc>)
 80077fe:	4601      	mov	r1, r0
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	f000 b825 	b.w	8007850 <_malloc_r>
 8007806:	bf00      	nop
 8007808:	20000028 	.word	0x20000028

0800780c <sbrk_aligned>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4e0f      	ldr	r6, [pc, #60]	@ (800784c <sbrk_aligned+0x40>)
 8007810:	460c      	mov	r4, r1
 8007812:	6831      	ldr	r1, [r6, #0]
 8007814:	4605      	mov	r5, r0
 8007816:	b911      	cbnz	r1, 800781e <sbrk_aligned+0x12>
 8007818:	f000 fe46 	bl	80084a8 <_sbrk_r>
 800781c:	6030      	str	r0, [r6, #0]
 800781e:	4621      	mov	r1, r4
 8007820:	4628      	mov	r0, r5
 8007822:	f000 fe41 	bl	80084a8 <_sbrk_r>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d103      	bne.n	8007832 <sbrk_aligned+0x26>
 800782a:	f04f 34ff 	mov.w	r4, #4294967295
 800782e:	4620      	mov	r0, r4
 8007830:	bd70      	pop	{r4, r5, r6, pc}
 8007832:	1cc4      	adds	r4, r0, #3
 8007834:	f024 0403 	bic.w	r4, r4, #3
 8007838:	42a0      	cmp	r0, r4
 800783a:	d0f8      	beq.n	800782e <sbrk_aligned+0x22>
 800783c:	1a21      	subs	r1, r4, r0
 800783e:	4628      	mov	r0, r5
 8007840:	f000 fe32 	bl	80084a8 <_sbrk_r>
 8007844:	3001      	adds	r0, #1
 8007846:	d1f2      	bne.n	800782e <sbrk_aligned+0x22>
 8007848:	e7ef      	b.n	800782a <sbrk_aligned+0x1e>
 800784a:	bf00      	nop
 800784c:	200005d0 	.word	0x200005d0

08007850 <_malloc_r>:
 8007850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007854:	1ccd      	adds	r5, r1, #3
 8007856:	f025 0503 	bic.w	r5, r5, #3
 800785a:	3508      	adds	r5, #8
 800785c:	2d0c      	cmp	r5, #12
 800785e:	bf38      	it	cc
 8007860:	250c      	movcc	r5, #12
 8007862:	2d00      	cmp	r5, #0
 8007864:	4606      	mov	r6, r0
 8007866:	db01      	blt.n	800786c <_malloc_r+0x1c>
 8007868:	42a9      	cmp	r1, r5
 800786a:	d904      	bls.n	8007876 <_malloc_r+0x26>
 800786c:	230c      	movs	r3, #12
 800786e:	6033      	str	r3, [r6, #0]
 8007870:	2000      	movs	r0, #0
 8007872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800794c <_malloc_r+0xfc>
 800787a:	f000 f869 	bl	8007950 <__malloc_lock>
 800787e:	f8d8 3000 	ldr.w	r3, [r8]
 8007882:	461c      	mov	r4, r3
 8007884:	bb44      	cbnz	r4, 80078d8 <_malloc_r+0x88>
 8007886:	4629      	mov	r1, r5
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff ffbf 	bl	800780c <sbrk_aligned>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	4604      	mov	r4, r0
 8007892:	d158      	bne.n	8007946 <_malloc_r+0xf6>
 8007894:	f8d8 4000 	ldr.w	r4, [r8]
 8007898:	4627      	mov	r7, r4
 800789a:	2f00      	cmp	r7, #0
 800789c:	d143      	bne.n	8007926 <_malloc_r+0xd6>
 800789e:	2c00      	cmp	r4, #0
 80078a0:	d04b      	beq.n	800793a <_malloc_r+0xea>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	4639      	mov	r1, r7
 80078a6:	4630      	mov	r0, r6
 80078a8:	eb04 0903 	add.w	r9, r4, r3
 80078ac:	f000 fdfc 	bl	80084a8 <_sbrk_r>
 80078b0:	4581      	cmp	r9, r0
 80078b2:	d142      	bne.n	800793a <_malloc_r+0xea>
 80078b4:	6821      	ldr	r1, [r4, #0]
 80078b6:	1a6d      	subs	r5, r5, r1
 80078b8:	4629      	mov	r1, r5
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7ff ffa6 	bl	800780c <sbrk_aligned>
 80078c0:	3001      	adds	r0, #1
 80078c2:	d03a      	beq.n	800793a <_malloc_r+0xea>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	442b      	add	r3, r5
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	f8d8 3000 	ldr.w	r3, [r8]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	bb62      	cbnz	r2, 800792c <_malloc_r+0xdc>
 80078d2:	f8c8 7000 	str.w	r7, [r8]
 80078d6:	e00f      	b.n	80078f8 <_malloc_r+0xa8>
 80078d8:	6822      	ldr	r2, [r4, #0]
 80078da:	1b52      	subs	r2, r2, r5
 80078dc:	d420      	bmi.n	8007920 <_malloc_r+0xd0>
 80078de:	2a0b      	cmp	r2, #11
 80078e0:	d917      	bls.n	8007912 <_malloc_r+0xc2>
 80078e2:	1961      	adds	r1, r4, r5
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	6025      	str	r5, [r4, #0]
 80078e8:	bf18      	it	ne
 80078ea:	6059      	strne	r1, [r3, #4]
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	bf08      	it	eq
 80078f0:	f8c8 1000 	streq.w	r1, [r8]
 80078f4:	5162      	str	r2, [r4, r5]
 80078f6:	604b      	str	r3, [r1, #4]
 80078f8:	4630      	mov	r0, r6
 80078fa:	f000 f82f 	bl	800795c <__malloc_unlock>
 80078fe:	f104 000b 	add.w	r0, r4, #11
 8007902:	1d23      	adds	r3, r4, #4
 8007904:	f020 0007 	bic.w	r0, r0, #7
 8007908:	1ac2      	subs	r2, r0, r3
 800790a:	bf1c      	itt	ne
 800790c:	1a1b      	subne	r3, r3, r0
 800790e:	50a3      	strne	r3, [r4, r2]
 8007910:	e7af      	b.n	8007872 <_malloc_r+0x22>
 8007912:	6862      	ldr	r2, [r4, #4]
 8007914:	42a3      	cmp	r3, r4
 8007916:	bf0c      	ite	eq
 8007918:	f8c8 2000 	streq.w	r2, [r8]
 800791c:	605a      	strne	r2, [r3, #4]
 800791e:	e7eb      	b.n	80078f8 <_malloc_r+0xa8>
 8007920:	4623      	mov	r3, r4
 8007922:	6864      	ldr	r4, [r4, #4]
 8007924:	e7ae      	b.n	8007884 <_malloc_r+0x34>
 8007926:	463c      	mov	r4, r7
 8007928:	687f      	ldr	r7, [r7, #4]
 800792a:	e7b6      	b.n	800789a <_malloc_r+0x4a>
 800792c:	461a      	mov	r2, r3
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	42a3      	cmp	r3, r4
 8007932:	d1fb      	bne.n	800792c <_malloc_r+0xdc>
 8007934:	2300      	movs	r3, #0
 8007936:	6053      	str	r3, [r2, #4]
 8007938:	e7de      	b.n	80078f8 <_malloc_r+0xa8>
 800793a:	230c      	movs	r3, #12
 800793c:	6033      	str	r3, [r6, #0]
 800793e:	4630      	mov	r0, r6
 8007940:	f000 f80c 	bl	800795c <__malloc_unlock>
 8007944:	e794      	b.n	8007870 <_malloc_r+0x20>
 8007946:	6005      	str	r5, [r0, #0]
 8007948:	e7d6      	b.n	80078f8 <_malloc_r+0xa8>
 800794a:	bf00      	nop
 800794c:	200005d4 	.word	0x200005d4

08007950 <__malloc_lock>:
 8007950:	4801      	ldr	r0, [pc, #4]	@ (8007958 <__malloc_lock+0x8>)
 8007952:	f7ff b8b8 	b.w	8006ac6 <__retarget_lock_acquire_recursive>
 8007956:	bf00      	nop
 8007958:	200005cc 	.word	0x200005cc

0800795c <__malloc_unlock>:
 800795c:	4801      	ldr	r0, [pc, #4]	@ (8007964 <__malloc_unlock+0x8>)
 800795e:	f7ff b8b3 	b.w	8006ac8 <__retarget_lock_release_recursive>
 8007962:	bf00      	nop
 8007964:	200005cc 	.word	0x200005cc

08007968 <_Balloc>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	69c6      	ldr	r6, [r0, #28]
 800796c:	4604      	mov	r4, r0
 800796e:	460d      	mov	r5, r1
 8007970:	b976      	cbnz	r6, 8007990 <_Balloc+0x28>
 8007972:	2010      	movs	r0, #16
 8007974:	f7ff ff42 	bl	80077fc <malloc>
 8007978:	4602      	mov	r2, r0
 800797a:	61e0      	str	r0, [r4, #28]
 800797c:	b920      	cbnz	r0, 8007988 <_Balloc+0x20>
 800797e:	4b18      	ldr	r3, [pc, #96]	@ (80079e0 <_Balloc+0x78>)
 8007980:	4818      	ldr	r0, [pc, #96]	@ (80079e4 <_Balloc+0x7c>)
 8007982:	216b      	movs	r1, #107	@ 0x6b
 8007984:	f000 fdae 	bl	80084e4 <__assert_func>
 8007988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800798c:	6006      	str	r6, [r0, #0]
 800798e:	60c6      	str	r6, [r0, #12]
 8007990:	69e6      	ldr	r6, [r4, #28]
 8007992:	68f3      	ldr	r3, [r6, #12]
 8007994:	b183      	cbz	r3, 80079b8 <_Balloc+0x50>
 8007996:	69e3      	ldr	r3, [r4, #28]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800799e:	b9b8      	cbnz	r0, 80079d0 <_Balloc+0x68>
 80079a0:	2101      	movs	r1, #1
 80079a2:	fa01 f605 	lsl.w	r6, r1, r5
 80079a6:	1d72      	adds	r2, r6, #5
 80079a8:	0092      	lsls	r2, r2, #2
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 fdb8 	bl	8008520 <_calloc_r>
 80079b0:	b160      	cbz	r0, 80079cc <_Balloc+0x64>
 80079b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079b6:	e00e      	b.n	80079d6 <_Balloc+0x6e>
 80079b8:	2221      	movs	r2, #33	@ 0x21
 80079ba:	2104      	movs	r1, #4
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fdaf 	bl	8008520 <_calloc_r>
 80079c2:	69e3      	ldr	r3, [r4, #28]
 80079c4:	60f0      	str	r0, [r6, #12]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e4      	bne.n	8007996 <_Balloc+0x2e>
 80079cc:	2000      	movs	r0, #0
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	6802      	ldr	r2, [r0, #0]
 80079d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079d6:	2300      	movs	r3, #0
 80079d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079dc:	e7f7      	b.n	80079ce <_Balloc+0x66>
 80079de:	bf00      	nop
 80079e0:	08008e1d 	.word	0x08008e1d
 80079e4:	08008e9d 	.word	0x08008e9d

080079e8 <_Bfree>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	69c6      	ldr	r6, [r0, #28]
 80079ec:	4605      	mov	r5, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	b976      	cbnz	r6, 8007a10 <_Bfree+0x28>
 80079f2:	2010      	movs	r0, #16
 80079f4:	f7ff ff02 	bl	80077fc <malloc>
 80079f8:	4602      	mov	r2, r0
 80079fa:	61e8      	str	r0, [r5, #28]
 80079fc:	b920      	cbnz	r0, 8007a08 <_Bfree+0x20>
 80079fe:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <_Bfree+0x3c>)
 8007a00:	4809      	ldr	r0, [pc, #36]	@ (8007a28 <_Bfree+0x40>)
 8007a02:	218f      	movs	r1, #143	@ 0x8f
 8007a04:	f000 fd6e 	bl	80084e4 <__assert_func>
 8007a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a0c:	6006      	str	r6, [r0, #0]
 8007a0e:	60c6      	str	r6, [r0, #12]
 8007a10:	b13c      	cbz	r4, 8007a22 <_Bfree+0x3a>
 8007a12:	69eb      	ldr	r3, [r5, #28]
 8007a14:	6862      	ldr	r2, [r4, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a1c:	6021      	str	r1, [r4, #0]
 8007a1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	08008e1d 	.word	0x08008e1d
 8007a28:	08008e9d 	.word	0x08008e9d

08007a2c <__multadd>:
 8007a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a30:	690d      	ldr	r5, [r1, #16]
 8007a32:	4607      	mov	r7, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	461e      	mov	r6, r3
 8007a38:	f101 0c14 	add.w	ip, r1, #20
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007a42:	b299      	uxth	r1, r3
 8007a44:	fb02 6101 	mla	r1, r2, r1, r6
 8007a48:	0c1e      	lsrs	r6, r3, #16
 8007a4a:	0c0b      	lsrs	r3, r1, #16
 8007a4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007a50:	b289      	uxth	r1, r1
 8007a52:	3001      	adds	r0, #1
 8007a54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a58:	4285      	cmp	r5, r0
 8007a5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a62:	dcec      	bgt.n	8007a3e <__multadd+0x12>
 8007a64:	b30e      	cbz	r6, 8007aaa <__multadd+0x7e>
 8007a66:	68a3      	ldr	r3, [r4, #8]
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	dc19      	bgt.n	8007aa0 <__multadd+0x74>
 8007a6c:	6861      	ldr	r1, [r4, #4]
 8007a6e:	4638      	mov	r0, r7
 8007a70:	3101      	adds	r1, #1
 8007a72:	f7ff ff79 	bl	8007968 <_Balloc>
 8007a76:	4680      	mov	r8, r0
 8007a78:	b928      	cbnz	r0, 8007a86 <__multadd+0x5a>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab0 <__multadd+0x84>)
 8007a7e:	480d      	ldr	r0, [pc, #52]	@ (8007ab4 <__multadd+0x88>)
 8007a80:	21ba      	movs	r1, #186	@ 0xba
 8007a82:	f000 fd2f 	bl	80084e4 <__assert_func>
 8007a86:	6922      	ldr	r2, [r4, #16]
 8007a88:	3202      	adds	r2, #2
 8007a8a:	f104 010c 	add.w	r1, r4, #12
 8007a8e:	0092      	lsls	r2, r2, #2
 8007a90:	300c      	adds	r0, #12
 8007a92:	f000 fd19 	bl	80084c8 <memcpy>
 8007a96:	4621      	mov	r1, r4
 8007a98:	4638      	mov	r0, r7
 8007a9a:	f7ff ffa5 	bl	80079e8 <_Bfree>
 8007a9e:	4644      	mov	r4, r8
 8007aa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	615e      	str	r6, [r3, #20]
 8007aa8:	6125      	str	r5, [r4, #16]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab0:	08008e8c 	.word	0x08008e8c
 8007ab4:	08008e9d 	.word	0x08008e9d

08007ab8 <__hi0bits>:
 8007ab8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007abc:	4603      	mov	r3, r0
 8007abe:	bf36      	itet	cc
 8007ac0:	0403      	lslcc	r3, r0, #16
 8007ac2:	2000      	movcs	r0, #0
 8007ac4:	2010      	movcc	r0, #16
 8007ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aca:	bf3c      	itt	cc
 8007acc:	021b      	lslcc	r3, r3, #8
 8007ace:	3008      	addcc	r0, #8
 8007ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ad4:	bf3c      	itt	cc
 8007ad6:	011b      	lslcc	r3, r3, #4
 8007ad8:	3004      	addcc	r0, #4
 8007ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ade:	bf3c      	itt	cc
 8007ae0:	009b      	lslcc	r3, r3, #2
 8007ae2:	3002      	addcc	r0, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	db05      	blt.n	8007af4 <__hi0bits+0x3c>
 8007ae8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007aec:	f100 0001 	add.w	r0, r0, #1
 8007af0:	bf08      	it	eq
 8007af2:	2020      	moveq	r0, #32
 8007af4:	4770      	bx	lr

08007af6 <__lo0bits>:
 8007af6:	6803      	ldr	r3, [r0, #0]
 8007af8:	4602      	mov	r2, r0
 8007afa:	f013 0007 	ands.w	r0, r3, #7
 8007afe:	d00b      	beq.n	8007b18 <__lo0bits+0x22>
 8007b00:	07d9      	lsls	r1, r3, #31
 8007b02:	d421      	bmi.n	8007b48 <__lo0bits+0x52>
 8007b04:	0798      	lsls	r0, r3, #30
 8007b06:	bf49      	itett	mi
 8007b08:	085b      	lsrmi	r3, r3, #1
 8007b0a:	089b      	lsrpl	r3, r3, #2
 8007b0c:	2001      	movmi	r0, #1
 8007b0e:	6013      	strmi	r3, [r2, #0]
 8007b10:	bf5c      	itt	pl
 8007b12:	6013      	strpl	r3, [r2, #0]
 8007b14:	2002      	movpl	r0, #2
 8007b16:	4770      	bx	lr
 8007b18:	b299      	uxth	r1, r3
 8007b1a:	b909      	cbnz	r1, 8007b20 <__lo0bits+0x2a>
 8007b1c:	0c1b      	lsrs	r3, r3, #16
 8007b1e:	2010      	movs	r0, #16
 8007b20:	b2d9      	uxtb	r1, r3
 8007b22:	b909      	cbnz	r1, 8007b28 <__lo0bits+0x32>
 8007b24:	3008      	adds	r0, #8
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	0719      	lsls	r1, r3, #28
 8007b2a:	bf04      	itt	eq
 8007b2c:	091b      	lsreq	r3, r3, #4
 8007b2e:	3004      	addeq	r0, #4
 8007b30:	0799      	lsls	r1, r3, #30
 8007b32:	bf04      	itt	eq
 8007b34:	089b      	lsreq	r3, r3, #2
 8007b36:	3002      	addeq	r0, #2
 8007b38:	07d9      	lsls	r1, r3, #31
 8007b3a:	d403      	bmi.n	8007b44 <__lo0bits+0x4e>
 8007b3c:	085b      	lsrs	r3, r3, #1
 8007b3e:	f100 0001 	add.w	r0, r0, #1
 8007b42:	d003      	beq.n	8007b4c <__lo0bits+0x56>
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	4770      	bx	lr
 8007b48:	2000      	movs	r0, #0
 8007b4a:	4770      	bx	lr
 8007b4c:	2020      	movs	r0, #32
 8007b4e:	4770      	bx	lr

08007b50 <__i2b>:
 8007b50:	b510      	push	{r4, lr}
 8007b52:	460c      	mov	r4, r1
 8007b54:	2101      	movs	r1, #1
 8007b56:	f7ff ff07 	bl	8007968 <_Balloc>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	b928      	cbnz	r0, 8007b6a <__i2b+0x1a>
 8007b5e:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <__i2b+0x24>)
 8007b60:	4805      	ldr	r0, [pc, #20]	@ (8007b78 <__i2b+0x28>)
 8007b62:	f240 1145 	movw	r1, #325	@ 0x145
 8007b66:	f000 fcbd 	bl	80084e4 <__assert_func>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	6144      	str	r4, [r0, #20]
 8007b6e:	6103      	str	r3, [r0, #16]
 8007b70:	bd10      	pop	{r4, pc}
 8007b72:	bf00      	nop
 8007b74:	08008e8c 	.word	0x08008e8c
 8007b78:	08008e9d 	.word	0x08008e9d

08007b7c <__multiply>:
 8007b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	4614      	mov	r4, r2
 8007b82:	690a      	ldr	r2, [r1, #16]
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	bfa8      	it	ge
 8007b8a:	4623      	movge	r3, r4
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	bfa4      	itt	ge
 8007b90:	460c      	movge	r4, r1
 8007b92:	461f      	movge	r7, r3
 8007b94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007b98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007b9c:	68a3      	ldr	r3, [r4, #8]
 8007b9e:	6861      	ldr	r1, [r4, #4]
 8007ba0:	eb0a 0609 	add.w	r6, sl, r9
 8007ba4:	42b3      	cmp	r3, r6
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	bfb8      	it	lt
 8007baa:	3101      	addlt	r1, #1
 8007bac:	f7ff fedc 	bl	8007968 <_Balloc>
 8007bb0:	b930      	cbnz	r0, 8007bc0 <__multiply+0x44>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4b44      	ldr	r3, [pc, #272]	@ (8007cc8 <__multiply+0x14c>)
 8007bb6:	4845      	ldr	r0, [pc, #276]	@ (8007ccc <__multiply+0x150>)
 8007bb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007bbc:	f000 fc92 	bl	80084e4 <__assert_func>
 8007bc0:	f100 0514 	add.w	r5, r0, #20
 8007bc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bc8:	462b      	mov	r3, r5
 8007bca:	2200      	movs	r2, #0
 8007bcc:	4543      	cmp	r3, r8
 8007bce:	d321      	bcc.n	8007c14 <__multiply+0x98>
 8007bd0:	f107 0114 	add.w	r1, r7, #20
 8007bd4:	f104 0214 	add.w	r2, r4, #20
 8007bd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007bdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	1b13      	subs	r3, r2, r4
 8007be4:	3b15      	subs	r3, #21
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	3304      	adds	r3, #4
 8007bec:	f104 0715 	add.w	r7, r4, #21
 8007bf0:	42ba      	cmp	r2, r7
 8007bf2:	bf38      	it	cc
 8007bf4:	2304      	movcc	r3, #4
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	9103      	str	r1, [sp, #12]
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	d80c      	bhi.n	8007c1a <__multiply+0x9e>
 8007c00:	2e00      	cmp	r6, #0
 8007c02:	dd03      	ble.n	8007c0c <__multiply+0x90>
 8007c04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d05b      	beq.n	8007cc4 <__multiply+0x148>
 8007c0c:	6106      	str	r6, [r0, #16]
 8007c0e:	b005      	add	sp, #20
 8007c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	f843 2b04 	str.w	r2, [r3], #4
 8007c18:	e7d8      	b.n	8007bcc <__multiply+0x50>
 8007c1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c1e:	f1ba 0f00 	cmp.w	sl, #0
 8007c22:	d024      	beq.n	8007c6e <__multiply+0xf2>
 8007c24:	f104 0e14 	add.w	lr, r4, #20
 8007c28:	46a9      	mov	r9, r5
 8007c2a:	f04f 0c00 	mov.w	ip, #0
 8007c2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c32:	f8d9 3000 	ldr.w	r3, [r9]
 8007c36:	fa1f fb87 	uxth.w	fp, r7
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007c44:	f8d9 7000 	ldr.w	r7, [r9]
 8007c48:	4463      	add	r3, ip
 8007c4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007c52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c5c:	4572      	cmp	r2, lr
 8007c5e:	f849 3b04 	str.w	r3, [r9], #4
 8007c62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c66:	d8e2      	bhi.n	8007c2e <__multiply+0xb2>
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	f845 c003 	str.w	ip, [r5, r3]
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c74:	3104      	adds	r1, #4
 8007c76:	f1b9 0f00 	cmp.w	r9, #0
 8007c7a:	d021      	beq.n	8007cc0 <__multiply+0x144>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	f104 0c14 	add.w	ip, r4, #20
 8007c82:	46ae      	mov	lr, r5
 8007c84:	f04f 0a00 	mov.w	sl, #0
 8007c88:	f8bc b000 	ldrh.w	fp, [ip]
 8007c8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007c90:	fb09 770b 	mla	r7, r9, fp, r7
 8007c94:	4457      	add	r7, sl
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c9c:	f84e 3b04 	str.w	r3, [lr], #4
 8007ca0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ca8:	f8be 3000 	ldrh.w	r3, [lr]
 8007cac:	fb09 330a 	mla	r3, r9, sl, r3
 8007cb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007cb4:	4562      	cmp	r2, ip
 8007cb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cba:	d8e5      	bhi.n	8007c88 <__multiply+0x10c>
 8007cbc:	9f01      	ldr	r7, [sp, #4]
 8007cbe:	51eb      	str	r3, [r5, r7]
 8007cc0:	3504      	adds	r5, #4
 8007cc2:	e799      	b.n	8007bf8 <__multiply+0x7c>
 8007cc4:	3e01      	subs	r6, #1
 8007cc6:	e79b      	b.n	8007c00 <__multiply+0x84>
 8007cc8:	08008e8c 	.word	0x08008e8c
 8007ccc:	08008e9d 	.word	0x08008e9d

08007cd0 <__pow5mult>:
 8007cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	4615      	mov	r5, r2
 8007cd6:	f012 0203 	ands.w	r2, r2, #3
 8007cda:	4607      	mov	r7, r0
 8007cdc:	460e      	mov	r6, r1
 8007cde:	d007      	beq.n	8007cf0 <__pow5mult+0x20>
 8007ce0:	4c25      	ldr	r4, [pc, #148]	@ (8007d78 <__pow5mult+0xa8>)
 8007ce2:	3a01      	subs	r2, #1
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cea:	f7ff fe9f 	bl	8007a2c <__multadd>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	10ad      	asrs	r5, r5, #2
 8007cf2:	d03d      	beq.n	8007d70 <__pow5mult+0xa0>
 8007cf4:	69fc      	ldr	r4, [r7, #28]
 8007cf6:	b97c      	cbnz	r4, 8007d18 <__pow5mult+0x48>
 8007cf8:	2010      	movs	r0, #16
 8007cfa:	f7ff fd7f 	bl	80077fc <malloc>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	61f8      	str	r0, [r7, #28]
 8007d02:	b928      	cbnz	r0, 8007d10 <__pow5mult+0x40>
 8007d04:	4b1d      	ldr	r3, [pc, #116]	@ (8007d7c <__pow5mult+0xac>)
 8007d06:	481e      	ldr	r0, [pc, #120]	@ (8007d80 <__pow5mult+0xb0>)
 8007d08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d0c:	f000 fbea 	bl	80084e4 <__assert_func>
 8007d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d14:	6004      	str	r4, [r0, #0]
 8007d16:	60c4      	str	r4, [r0, #12]
 8007d18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d20:	b94c      	cbnz	r4, 8007d36 <__pow5mult+0x66>
 8007d22:	f240 2171 	movw	r1, #625	@ 0x271
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7ff ff12 	bl	8007b50 <__i2b>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d32:	4604      	mov	r4, r0
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	07eb      	lsls	r3, r5, #31
 8007d3c:	d50a      	bpl.n	8007d54 <__pow5mult+0x84>
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4622      	mov	r2, r4
 8007d42:	4638      	mov	r0, r7
 8007d44:	f7ff ff1a 	bl	8007b7c <__multiply>
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f7ff fe4b 	bl	80079e8 <_Bfree>
 8007d52:	4646      	mov	r6, r8
 8007d54:	106d      	asrs	r5, r5, #1
 8007d56:	d00b      	beq.n	8007d70 <__pow5mult+0xa0>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	b938      	cbnz	r0, 8007d6c <__pow5mult+0x9c>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff ff0b 	bl	8007b7c <__multiply>
 8007d66:	6020      	str	r0, [r4, #0]
 8007d68:	f8c0 9000 	str.w	r9, [r0]
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	e7e4      	b.n	8007d3a <__pow5mult+0x6a>
 8007d70:	4630      	mov	r0, r6
 8007d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d76:	bf00      	nop
 8007d78:	08008ef8 	.word	0x08008ef8
 8007d7c:	08008e1d 	.word	0x08008e1d
 8007d80:	08008e9d 	.word	0x08008e9d

08007d84 <__lshift>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	6849      	ldr	r1, [r1, #4]
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	4607      	mov	r7, r0
 8007d96:	4691      	mov	r9, r2
 8007d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d9c:	f108 0601 	add.w	r6, r8, #1
 8007da0:	42b3      	cmp	r3, r6
 8007da2:	db0b      	blt.n	8007dbc <__lshift+0x38>
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff fddf 	bl	8007968 <_Balloc>
 8007daa:	4605      	mov	r5, r0
 8007dac:	b948      	cbnz	r0, 8007dc2 <__lshift+0x3e>
 8007dae:	4602      	mov	r2, r0
 8007db0:	4b28      	ldr	r3, [pc, #160]	@ (8007e54 <__lshift+0xd0>)
 8007db2:	4829      	ldr	r0, [pc, #164]	@ (8007e58 <__lshift+0xd4>)
 8007db4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007db8:	f000 fb94 	bl	80084e4 <__assert_func>
 8007dbc:	3101      	adds	r1, #1
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	e7ee      	b.n	8007da0 <__lshift+0x1c>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f100 0114 	add.w	r1, r0, #20
 8007dc8:	f100 0210 	add.w	r2, r0, #16
 8007dcc:	4618      	mov	r0, r3
 8007dce:	4553      	cmp	r3, sl
 8007dd0:	db33      	blt.n	8007e3a <__lshift+0xb6>
 8007dd2:	6920      	ldr	r0, [r4, #16]
 8007dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dd8:	f104 0314 	add.w	r3, r4, #20
 8007ddc:	f019 091f 	ands.w	r9, r9, #31
 8007de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007de4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007de8:	d02b      	beq.n	8007e42 <__lshift+0xbe>
 8007dea:	f1c9 0e20 	rsb	lr, r9, #32
 8007dee:	468a      	mov	sl, r1
 8007df0:	2200      	movs	r2, #0
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	fa00 f009 	lsl.w	r0, r0, r9
 8007df8:	4310      	orrs	r0, r2
 8007dfa:	f84a 0b04 	str.w	r0, [sl], #4
 8007dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e02:	459c      	cmp	ip, r3
 8007e04:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e08:	d8f3      	bhi.n	8007df2 <__lshift+0x6e>
 8007e0a:	ebac 0304 	sub.w	r3, ip, r4
 8007e0e:	3b15      	subs	r3, #21
 8007e10:	f023 0303 	bic.w	r3, r3, #3
 8007e14:	3304      	adds	r3, #4
 8007e16:	f104 0015 	add.w	r0, r4, #21
 8007e1a:	4584      	cmp	ip, r0
 8007e1c:	bf38      	it	cc
 8007e1e:	2304      	movcc	r3, #4
 8007e20:	50ca      	str	r2, [r1, r3]
 8007e22:	b10a      	cbz	r2, 8007e28 <__lshift+0xa4>
 8007e24:	f108 0602 	add.w	r6, r8, #2
 8007e28:	3e01      	subs	r6, #1
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	612e      	str	r6, [r5, #16]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	f7ff fdda 	bl	80079e8 <_Bfree>
 8007e34:	4628      	mov	r0, r5
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e3e:	3301      	adds	r3, #1
 8007e40:	e7c5      	b.n	8007dce <__lshift+0x4a>
 8007e42:	3904      	subs	r1, #4
 8007e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e48:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e4c:	459c      	cmp	ip, r3
 8007e4e:	d8f9      	bhi.n	8007e44 <__lshift+0xc0>
 8007e50:	e7ea      	b.n	8007e28 <__lshift+0xa4>
 8007e52:	bf00      	nop
 8007e54:	08008e8c 	.word	0x08008e8c
 8007e58:	08008e9d 	.word	0x08008e9d

08007e5c <__mcmp>:
 8007e5c:	690a      	ldr	r2, [r1, #16]
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6900      	ldr	r0, [r0, #16]
 8007e62:	1a80      	subs	r0, r0, r2
 8007e64:	b530      	push	{r4, r5, lr}
 8007e66:	d10e      	bne.n	8007e86 <__mcmp+0x2a>
 8007e68:	3314      	adds	r3, #20
 8007e6a:	3114      	adds	r1, #20
 8007e6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e7c:	4295      	cmp	r5, r2
 8007e7e:	d003      	beq.n	8007e88 <__mcmp+0x2c>
 8007e80:	d205      	bcs.n	8007e8e <__mcmp+0x32>
 8007e82:	f04f 30ff 	mov.w	r0, #4294967295
 8007e86:	bd30      	pop	{r4, r5, pc}
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	d3f3      	bcc.n	8007e74 <__mcmp+0x18>
 8007e8c:	e7fb      	b.n	8007e86 <__mcmp+0x2a>
 8007e8e:	2001      	movs	r0, #1
 8007e90:	e7f9      	b.n	8007e86 <__mcmp+0x2a>
	...

08007e94 <__mdiff>:
 8007e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	4689      	mov	r9, r1
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4648      	mov	r0, r9
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	f7ff ffdb 	bl	8007e5c <__mcmp>
 8007ea6:	1e05      	subs	r5, r0, #0
 8007ea8:	d112      	bne.n	8007ed0 <__mdiff+0x3c>
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff fd5b 	bl	8007968 <_Balloc>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	b928      	cbnz	r0, 8007ec2 <__mdiff+0x2e>
 8007eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8007fb4 <__mdiff+0x120>)
 8007eb8:	f240 2137 	movw	r1, #567	@ 0x237
 8007ebc:	483e      	ldr	r0, [pc, #248]	@ (8007fb8 <__mdiff+0x124>)
 8007ebe:	f000 fb11 	bl	80084e4 <__assert_func>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ec8:	4610      	mov	r0, r2
 8007eca:	b003      	add	sp, #12
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	bfbc      	itt	lt
 8007ed2:	464b      	movlt	r3, r9
 8007ed4:	46a1      	movlt	r9, r4
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007edc:	bfba      	itte	lt
 8007ede:	461c      	movlt	r4, r3
 8007ee0:	2501      	movlt	r5, #1
 8007ee2:	2500      	movge	r5, #0
 8007ee4:	f7ff fd40 	bl	8007968 <_Balloc>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	b918      	cbnz	r0, 8007ef4 <__mdiff+0x60>
 8007eec:	4b31      	ldr	r3, [pc, #196]	@ (8007fb4 <__mdiff+0x120>)
 8007eee:	f240 2145 	movw	r1, #581	@ 0x245
 8007ef2:	e7e3      	b.n	8007ebc <__mdiff+0x28>
 8007ef4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ef8:	6926      	ldr	r6, [r4, #16]
 8007efa:	60c5      	str	r5, [r0, #12]
 8007efc:	f109 0310 	add.w	r3, r9, #16
 8007f00:	f109 0514 	add.w	r5, r9, #20
 8007f04:	f104 0e14 	add.w	lr, r4, #20
 8007f08:	f100 0b14 	add.w	fp, r0, #20
 8007f0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	46d9      	mov	r9, fp
 8007f18:	f04f 0c00 	mov.w	ip, #0
 8007f1c:	9b01      	ldr	r3, [sp, #4]
 8007f1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	fa1f f38a 	uxth.w	r3, sl
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	b283      	uxth	r3, r0
 8007f30:	1acb      	subs	r3, r1, r3
 8007f32:	0c00      	lsrs	r0, r0, #16
 8007f34:	4463      	add	r3, ip
 8007f36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f44:	4576      	cmp	r6, lr
 8007f46:	f849 3b04 	str.w	r3, [r9], #4
 8007f4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f4e:	d8e5      	bhi.n	8007f1c <__mdiff+0x88>
 8007f50:	1b33      	subs	r3, r6, r4
 8007f52:	3b15      	subs	r3, #21
 8007f54:	f023 0303 	bic.w	r3, r3, #3
 8007f58:	3415      	adds	r4, #21
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	42a6      	cmp	r6, r4
 8007f5e:	bf38      	it	cc
 8007f60:	2304      	movcc	r3, #4
 8007f62:	441d      	add	r5, r3
 8007f64:	445b      	add	r3, fp
 8007f66:	461e      	mov	r6, r3
 8007f68:	462c      	mov	r4, r5
 8007f6a:	4544      	cmp	r4, r8
 8007f6c:	d30e      	bcc.n	8007f8c <__mdiff+0xf8>
 8007f6e:	f108 0103 	add.w	r1, r8, #3
 8007f72:	1b49      	subs	r1, r1, r5
 8007f74:	f021 0103 	bic.w	r1, r1, #3
 8007f78:	3d03      	subs	r5, #3
 8007f7a:	45a8      	cmp	r8, r5
 8007f7c:	bf38      	it	cc
 8007f7e:	2100      	movcc	r1, #0
 8007f80:	440b      	add	r3, r1
 8007f82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f86:	b191      	cbz	r1, 8007fae <__mdiff+0x11a>
 8007f88:	6117      	str	r7, [r2, #16]
 8007f8a:	e79d      	b.n	8007ec8 <__mdiff+0x34>
 8007f8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f90:	46e6      	mov	lr, ip
 8007f92:	0c08      	lsrs	r0, r1, #16
 8007f94:	fa1c fc81 	uxtah	ip, ip, r1
 8007f98:	4471      	add	r1, lr
 8007f9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f9e:	b289      	uxth	r1, r1
 8007fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007fa4:	f846 1b04 	str.w	r1, [r6], #4
 8007fa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fac:	e7dd      	b.n	8007f6a <__mdiff+0xd6>
 8007fae:	3f01      	subs	r7, #1
 8007fb0:	e7e7      	b.n	8007f82 <__mdiff+0xee>
 8007fb2:	bf00      	nop
 8007fb4:	08008e8c 	.word	0x08008e8c
 8007fb8:	08008e9d 	.word	0x08008e9d

08007fbc <__d2b>:
 8007fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	ec59 8b10 	vmov	r8, r9, d0
 8007fc8:	4616      	mov	r6, r2
 8007fca:	f7ff fccd 	bl	8007968 <_Balloc>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	b930      	cbnz	r0, 8007fe0 <__d2b+0x24>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4b23      	ldr	r3, [pc, #140]	@ (8008064 <__d2b+0xa8>)
 8007fd6:	4824      	ldr	r0, [pc, #144]	@ (8008068 <__d2b+0xac>)
 8007fd8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007fdc:	f000 fa82 	bl	80084e4 <__assert_func>
 8007fe0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fe4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fe8:	b10d      	cbz	r5, 8007fee <__d2b+0x32>
 8007fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ff4:	d023      	beq.n	800803e <__d2b+0x82>
 8007ff6:	4668      	mov	r0, sp
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	f7ff fd7c 	bl	8007af6 <__lo0bits>
 8007ffe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008002:	b1d0      	cbz	r0, 800803a <__d2b+0x7e>
 8008004:	f1c0 0320 	rsb	r3, r0, #32
 8008008:	fa02 f303 	lsl.w	r3, r2, r3
 800800c:	430b      	orrs	r3, r1
 800800e:	40c2      	lsrs	r2, r0
 8008010:	6163      	str	r3, [r4, #20]
 8008012:	9201      	str	r2, [sp, #4]
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	61a3      	str	r3, [r4, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	bf0c      	ite	eq
 800801c:	2201      	moveq	r2, #1
 800801e:	2202      	movne	r2, #2
 8008020:	6122      	str	r2, [r4, #16]
 8008022:	b1a5      	cbz	r5, 800804e <__d2b+0x92>
 8008024:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008028:	4405      	add	r5, r0
 800802a:	603d      	str	r5, [r7, #0]
 800802c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008030:	6030      	str	r0, [r6, #0]
 8008032:	4620      	mov	r0, r4
 8008034:	b003      	add	sp, #12
 8008036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800803a:	6161      	str	r1, [r4, #20]
 800803c:	e7ea      	b.n	8008014 <__d2b+0x58>
 800803e:	a801      	add	r0, sp, #4
 8008040:	f7ff fd59 	bl	8007af6 <__lo0bits>
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	6163      	str	r3, [r4, #20]
 8008048:	3020      	adds	r0, #32
 800804a:	2201      	movs	r2, #1
 800804c:	e7e8      	b.n	8008020 <__d2b+0x64>
 800804e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008052:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008056:	6038      	str	r0, [r7, #0]
 8008058:	6918      	ldr	r0, [r3, #16]
 800805a:	f7ff fd2d 	bl	8007ab8 <__hi0bits>
 800805e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008062:	e7e5      	b.n	8008030 <__d2b+0x74>
 8008064:	08008e8c 	.word	0x08008e8c
 8008068:	08008e9d 	.word	0x08008e9d

0800806c <__ssputs_r>:
 800806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	688e      	ldr	r6, [r1, #8]
 8008072:	461f      	mov	r7, r3
 8008074:	42be      	cmp	r6, r7
 8008076:	680b      	ldr	r3, [r1, #0]
 8008078:	4682      	mov	sl, r0
 800807a:	460c      	mov	r4, r1
 800807c:	4690      	mov	r8, r2
 800807e:	d82d      	bhi.n	80080dc <__ssputs_r+0x70>
 8008080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008084:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008088:	d026      	beq.n	80080d8 <__ssputs_r+0x6c>
 800808a:	6965      	ldr	r5, [r4, #20]
 800808c:	6909      	ldr	r1, [r1, #16]
 800808e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008092:	eba3 0901 	sub.w	r9, r3, r1
 8008096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800809a:	1c7b      	adds	r3, r7, #1
 800809c:	444b      	add	r3, r9
 800809e:	106d      	asrs	r5, r5, #1
 80080a0:	429d      	cmp	r5, r3
 80080a2:	bf38      	it	cc
 80080a4:	461d      	movcc	r5, r3
 80080a6:	0553      	lsls	r3, r2, #21
 80080a8:	d527      	bpl.n	80080fa <__ssputs_r+0x8e>
 80080aa:	4629      	mov	r1, r5
 80080ac:	f7ff fbd0 	bl	8007850 <_malloc_r>
 80080b0:	4606      	mov	r6, r0
 80080b2:	b360      	cbz	r0, 800810e <__ssputs_r+0xa2>
 80080b4:	6921      	ldr	r1, [r4, #16]
 80080b6:	464a      	mov	r2, r9
 80080b8:	f000 fa06 	bl	80084c8 <memcpy>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	6126      	str	r6, [r4, #16]
 80080ca:	6165      	str	r5, [r4, #20]
 80080cc:	444e      	add	r6, r9
 80080ce:	eba5 0509 	sub.w	r5, r5, r9
 80080d2:	6026      	str	r6, [r4, #0]
 80080d4:	60a5      	str	r5, [r4, #8]
 80080d6:	463e      	mov	r6, r7
 80080d8:	42be      	cmp	r6, r7
 80080da:	d900      	bls.n	80080de <__ssputs_r+0x72>
 80080dc:	463e      	mov	r6, r7
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	4632      	mov	r2, r6
 80080e2:	4641      	mov	r1, r8
 80080e4:	f000 f9c6 	bl	8008474 <memmove>
 80080e8:	68a3      	ldr	r3, [r4, #8]
 80080ea:	1b9b      	subs	r3, r3, r6
 80080ec:	60a3      	str	r3, [r4, #8]
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	4433      	add	r3, r6
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	2000      	movs	r0, #0
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fa:	462a      	mov	r2, r5
 80080fc:	f000 fa36 	bl	800856c <_realloc_r>
 8008100:	4606      	mov	r6, r0
 8008102:	2800      	cmp	r0, #0
 8008104:	d1e0      	bne.n	80080c8 <__ssputs_r+0x5c>
 8008106:	6921      	ldr	r1, [r4, #16]
 8008108:	4650      	mov	r0, sl
 800810a:	f7ff fb2d 	bl	8007768 <_free_r>
 800810e:	230c      	movs	r3, #12
 8008110:	f8ca 3000 	str.w	r3, [sl]
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	e7e9      	b.n	80080f6 <__ssputs_r+0x8a>
	...

08008124 <_svfiprintf_r>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	4698      	mov	r8, r3
 800812a:	898b      	ldrh	r3, [r1, #12]
 800812c:	061b      	lsls	r3, r3, #24
 800812e:	b09d      	sub	sp, #116	@ 0x74
 8008130:	4607      	mov	r7, r0
 8008132:	460d      	mov	r5, r1
 8008134:	4614      	mov	r4, r2
 8008136:	d510      	bpl.n	800815a <_svfiprintf_r+0x36>
 8008138:	690b      	ldr	r3, [r1, #16]
 800813a:	b973      	cbnz	r3, 800815a <_svfiprintf_r+0x36>
 800813c:	2140      	movs	r1, #64	@ 0x40
 800813e:	f7ff fb87 	bl	8007850 <_malloc_r>
 8008142:	6028      	str	r0, [r5, #0]
 8008144:	6128      	str	r0, [r5, #16]
 8008146:	b930      	cbnz	r0, 8008156 <_svfiprintf_r+0x32>
 8008148:	230c      	movs	r3, #12
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	f04f 30ff 	mov.w	r0, #4294967295
 8008150:	b01d      	add	sp, #116	@ 0x74
 8008152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008156:	2340      	movs	r3, #64	@ 0x40
 8008158:	616b      	str	r3, [r5, #20]
 800815a:	2300      	movs	r3, #0
 800815c:	9309      	str	r3, [sp, #36]	@ 0x24
 800815e:	2320      	movs	r3, #32
 8008160:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008164:	f8cd 800c 	str.w	r8, [sp, #12]
 8008168:	2330      	movs	r3, #48	@ 0x30
 800816a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008308 <_svfiprintf_r+0x1e4>
 800816e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008172:	f04f 0901 	mov.w	r9, #1
 8008176:	4623      	mov	r3, r4
 8008178:	469a      	mov	sl, r3
 800817a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800817e:	b10a      	cbz	r2, 8008184 <_svfiprintf_r+0x60>
 8008180:	2a25      	cmp	r2, #37	@ 0x25
 8008182:	d1f9      	bne.n	8008178 <_svfiprintf_r+0x54>
 8008184:	ebba 0b04 	subs.w	fp, sl, r4
 8008188:	d00b      	beq.n	80081a2 <_svfiprintf_r+0x7e>
 800818a:	465b      	mov	r3, fp
 800818c:	4622      	mov	r2, r4
 800818e:	4629      	mov	r1, r5
 8008190:	4638      	mov	r0, r7
 8008192:	f7ff ff6b 	bl	800806c <__ssputs_r>
 8008196:	3001      	adds	r0, #1
 8008198:	f000 80a7 	beq.w	80082ea <_svfiprintf_r+0x1c6>
 800819c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800819e:	445a      	add	r2, fp
 80081a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80081a2:	f89a 3000 	ldrb.w	r3, [sl]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 809f 	beq.w	80082ea <_svfiprintf_r+0x1c6>
 80081ac:	2300      	movs	r3, #0
 80081ae:	f04f 32ff 	mov.w	r2, #4294967295
 80081b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b6:	f10a 0a01 	add.w	sl, sl, #1
 80081ba:	9304      	str	r3, [sp, #16]
 80081bc:	9307      	str	r3, [sp, #28]
 80081be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80081c4:	4654      	mov	r4, sl
 80081c6:	2205      	movs	r2, #5
 80081c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081cc:	484e      	ldr	r0, [pc, #312]	@ (8008308 <_svfiprintf_r+0x1e4>)
 80081ce:	f7f8 f81f 	bl	8000210 <memchr>
 80081d2:	9a04      	ldr	r2, [sp, #16]
 80081d4:	b9d8      	cbnz	r0, 800820e <_svfiprintf_r+0xea>
 80081d6:	06d0      	lsls	r0, r2, #27
 80081d8:	bf44      	itt	mi
 80081da:	2320      	movmi	r3, #32
 80081dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081e0:	0711      	lsls	r1, r2, #28
 80081e2:	bf44      	itt	mi
 80081e4:	232b      	movmi	r3, #43	@ 0x2b
 80081e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ea:	f89a 3000 	ldrb.w	r3, [sl]
 80081ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f0:	d015      	beq.n	800821e <_svfiprintf_r+0xfa>
 80081f2:	9a07      	ldr	r2, [sp, #28]
 80081f4:	4654      	mov	r4, sl
 80081f6:	2000      	movs	r0, #0
 80081f8:	f04f 0c0a 	mov.w	ip, #10
 80081fc:	4621      	mov	r1, r4
 80081fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008202:	3b30      	subs	r3, #48	@ 0x30
 8008204:	2b09      	cmp	r3, #9
 8008206:	d94b      	bls.n	80082a0 <_svfiprintf_r+0x17c>
 8008208:	b1b0      	cbz	r0, 8008238 <_svfiprintf_r+0x114>
 800820a:	9207      	str	r2, [sp, #28]
 800820c:	e014      	b.n	8008238 <_svfiprintf_r+0x114>
 800820e:	eba0 0308 	sub.w	r3, r0, r8
 8008212:	fa09 f303 	lsl.w	r3, r9, r3
 8008216:	4313      	orrs	r3, r2
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	46a2      	mov	sl, r4
 800821c:	e7d2      	b.n	80081c4 <_svfiprintf_r+0xa0>
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	1d19      	adds	r1, r3, #4
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	9103      	str	r1, [sp, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	bfbb      	ittet	lt
 800822a:	425b      	neglt	r3, r3
 800822c:	f042 0202 	orrlt.w	r2, r2, #2
 8008230:	9307      	strge	r3, [sp, #28]
 8008232:	9307      	strlt	r3, [sp, #28]
 8008234:	bfb8      	it	lt
 8008236:	9204      	strlt	r2, [sp, #16]
 8008238:	7823      	ldrb	r3, [r4, #0]
 800823a:	2b2e      	cmp	r3, #46	@ 0x2e
 800823c:	d10a      	bne.n	8008254 <_svfiprintf_r+0x130>
 800823e:	7863      	ldrb	r3, [r4, #1]
 8008240:	2b2a      	cmp	r3, #42	@ 0x2a
 8008242:	d132      	bne.n	80082aa <_svfiprintf_r+0x186>
 8008244:	9b03      	ldr	r3, [sp, #12]
 8008246:	1d1a      	adds	r2, r3, #4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	9203      	str	r2, [sp, #12]
 800824c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008250:	3402      	adds	r4, #2
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008318 <_svfiprintf_r+0x1f4>
 8008258:	7821      	ldrb	r1, [r4, #0]
 800825a:	2203      	movs	r2, #3
 800825c:	4650      	mov	r0, sl
 800825e:	f7f7 ffd7 	bl	8000210 <memchr>
 8008262:	b138      	cbz	r0, 8008274 <_svfiprintf_r+0x150>
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	eba0 000a 	sub.w	r0, r0, sl
 800826a:	2240      	movs	r2, #64	@ 0x40
 800826c:	4082      	lsls	r2, r0
 800826e:	4313      	orrs	r3, r2
 8008270:	3401      	adds	r4, #1
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008278:	4824      	ldr	r0, [pc, #144]	@ (800830c <_svfiprintf_r+0x1e8>)
 800827a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800827e:	2206      	movs	r2, #6
 8008280:	f7f7 ffc6 	bl	8000210 <memchr>
 8008284:	2800      	cmp	r0, #0
 8008286:	d036      	beq.n	80082f6 <_svfiprintf_r+0x1d2>
 8008288:	4b21      	ldr	r3, [pc, #132]	@ (8008310 <_svfiprintf_r+0x1ec>)
 800828a:	bb1b      	cbnz	r3, 80082d4 <_svfiprintf_r+0x1b0>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	3307      	adds	r3, #7
 8008290:	f023 0307 	bic.w	r3, r3, #7
 8008294:	3308      	adds	r3, #8
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829a:	4433      	add	r3, r6
 800829c:	9309      	str	r3, [sp, #36]	@ 0x24
 800829e:	e76a      	b.n	8008176 <_svfiprintf_r+0x52>
 80082a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a4:	460c      	mov	r4, r1
 80082a6:	2001      	movs	r0, #1
 80082a8:	e7a8      	b.n	80081fc <_svfiprintf_r+0xd8>
 80082aa:	2300      	movs	r3, #0
 80082ac:	3401      	adds	r4, #1
 80082ae:	9305      	str	r3, [sp, #20]
 80082b0:	4619      	mov	r1, r3
 80082b2:	f04f 0c0a 	mov.w	ip, #10
 80082b6:	4620      	mov	r0, r4
 80082b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082bc:	3a30      	subs	r2, #48	@ 0x30
 80082be:	2a09      	cmp	r2, #9
 80082c0:	d903      	bls.n	80082ca <_svfiprintf_r+0x1a6>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0c6      	beq.n	8008254 <_svfiprintf_r+0x130>
 80082c6:	9105      	str	r1, [sp, #20]
 80082c8:	e7c4      	b.n	8008254 <_svfiprintf_r+0x130>
 80082ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ce:	4604      	mov	r4, r0
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7f0      	b.n	80082b6 <_svfiprintf_r+0x192>
 80082d4:	ab03      	add	r3, sp, #12
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	462a      	mov	r2, r5
 80082da:	4b0e      	ldr	r3, [pc, #56]	@ (8008314 <_svfiprintf_r+0x1f0>)
 80082dc:	a904      	add	r1, sp, #16
 80082de:	4638      	mov	r0, r7
 80082e0:	f7fd fe96 	bl	8006010 <_printf_float>
 80082e4:	1c42      	adds	r2, r0, #1
 80082e6:	4606      	mov	r6, r0
 80082e8:	d1d6      	bne.n	8008298 <_svfiprintf_r+0x174>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	065b      	lsls	r3, r3, #25
 80082ee:	f53f af2d 	bmi.w	800814c <_svfiprintf_r+0x28>
 80082f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082f4:	e72c      	b.n	8008150 <_svfiprintf_r+0x2c>
 80082f6:	ab03      	add	r3, sp, #12
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	462a      	mov	r2, r5
 80082fc:	4b05      	ldr	r3, [pc, #20]	@ (8008314 <_svfiprintf_r+0x1f0>)
 80082fe:	a904      	add	r1, sp, #16
 8008300:	4638      	mov	r0, r7
 8008302:	f7fe f91d 	bl	8006540 <_printf_i>
 8008306:	e7ed      	b.n	80082e4 <_svfiprintf_r+0x1c0>
 8008308:	08008ff8 	.word	0x08008ff8
 800830c:	08009002 	.word	0x08009002
 8008310:	08006011 	.word	0x08006011
 8008314:	0800806d 	.word	0x0800806d
 8008318:	08008ffe 	.word	0x08008ffe

0800831c <__sflush_r>:
 800831c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008324:	0716      	lsls	r6, r2, #28
 8008326:	4605      	mov	r5, r0
 8008328:	460c      	mov	r4, r1
 800832a:	d454      	bmi.n	80083d6 <__sflush_r+0xba>
 800832c:	684b      	ldr	r3, [r1, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	dc02      	bgt.n	8008338 <__sflush_r+0x1c>
 8008332:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	dd48      	ble.n	80083ca <__sflush_r+0xae>
 8008338:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800833a:	2e00      	cmp	r6, #0
 800833c:	d045      	beq.n	80083ca <__sflush_r+0xae>
 800833e:	2300      	movs	r3, #0
 8008340:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008344:	682f      	ldr	r7, [r5, #0]
 8008346:	6a21      	ldr	r1, [r4, #32]
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	d030      	beq.n	80083ae <__sflush_r+0x92>
 800834c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	0759      	lsls	r1, r3, #29
 8008352:	d505      	bpl.n	8008360 <__sflush_r+0x44>
 8008354:	6863      	ldr	r3, [r4, #4]
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800835a:	b10b      	cbz	r3, 8008360 <__sflush_r+0x44>
 800835c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	2300      	movs	r3, #0
 8008362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008364:	6a21      	ldr	r1, [r4, #32]
 8008366:	4628      	mov	r0, r5
 8008368:	47b0      	blx	r6
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	d106      	bne.n	800837e <__sflush_r+0x62>
 8008370:	6829      	ldr	r1, [r5, #0]
 8008372:	291d      	cmp	r1, #29
 8008374:	d82b      	bhi.n	80083ce <__sflush_r+0xb2>
 8008376:	4a2a      	ldr	r2, [pc, #168]	@ (8008420 <__sflush_r+0x104>)
 8008378:	410a      	asrs	r2, r1
 800837a:	07d6      	lsls	r6, r2, #31
 800837c:	d427      	bmi.n	80083ce <__sflush_r+0xb2>
 800837e:	2200      	movs	r2, #0
 8008380:	6062      	str	r2, [r4, #4]
 8008382:	04d9      	lsls	r1, r3, #19
 8008384:	6922      	ldr	r2, [r4, #16]
 8008386:	6022      	str	r2, [r4, #0]
 8008388:	d504      	bpl.n	8008394 <__sflush_r+0x78>
 800838a:	1c42      	adds	r2, r0, #1
 800838c:	d101      	bne.n	8008392 <__sflush_r+0x76>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	b903      	cbnz	r3, 8008394 <__sflush_r+0x78>
 8008392:	6560      	str	r0, [r4, #84]	@ 0x54
 8008394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008396:	602f      	str	r7, [r5, #0]
 8008398:	b1b9      	cbz	r1, 80083ca <__sflush_r+0xae>
 800839a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800839e:	4299      	cmp	r1, r3
 80083a0:	d002      	beq.n	80083a8 <__sflush_r+0x8c>
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7ff f9e0 	bl	8007768 <_free_r>
 80083a8:	2300      	movs	r3, #0
 80083aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ac:	e00d      	b.n	80083ca <__sflush_r+0xae>
 80083ae:	2301      	movs	r3, #1
 80083b0:	4628      	mov	r0, r5
 80083b2:	47b0      	blx	r6
 80083b4:	4602      	mov	r2, r0
 80083b6:	1c50      	adds	r0, r2, #1
 80083b8:	d1c9      	bne.n	800834e <__sflush_r+0x32>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0c6      	beq.n	800834e <__sflush_r+0x32>
 80083c0:	2b1d      	cmp	r3, #29
 80083c2:	d001      	beq.n	80083c8 <__sflush_r+0xac>
 80083c4:	2b16      	cmp	r3, #22
 80083c6:	d11e      	bne.n	8008406 <__sflush_r+0xea>
 80083c8:	602f      	str	r7, [r5, #0]
 80083ca:	2000      	movs	r0, #0
 80083cc:	e022      	b.n	8008414 <__sflush_r+0xf8>
 80083ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d2:	b21b      	sxth	r3, r3
 80083d4:	e01b      	b.n	800840e <__sflush_r+0xf2>
 80083d6:	690f      	ldr	r7, [r1, #16]
 80083d8:	2f00      	cmp	r7, #0
 80083da:	d0f6      	beq.n	80083ca <__sflush_r+0xae>
 80083dc:	0793      	lsls	r3, r2, #30
 80083de:	680e      	ldr	r6, [r1, #0]
 80083e0:	bf08      	it	eq
 80083e2:	694b      	ldreq	r3, [r1, #20]
 80083e4:	600f      	str	r7, [r1, #0]
 80083e6:	bf18      	it	ne
 80083e8:	2300      	movne	r3, #0
 80083ea:	eba6 0807 	sub.w	r8, r6, r7
 80083ee:	608b      	str	r3, [r1, #8]
 80083f0:	f1b8 0f00 	cmp.w	r8, #0
 80083f4:	dde9      	ble.n	80083ca <__sflush_r+0xae>
 80083f6:	6a21      	ldr	r1, [r4, #32]
 80083f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083fa:	4643      	mov	r3, r8
 80083fc:	463a      	mov	r2, r7
 80083fe:	4628      	mov	r0, r5
 8008400:	47b0      	blx	r6
 8008402:	2800      	cmp	r0, #0
 8008404:	dc08      	bgt.n	8008418 <__sflush_r+0xfc>
 8008406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800840a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840e:	81a3      	strh	r3, [r4, #12]
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	4407      	add	r7, r0
 800841a:	eba8 0800 	sub.w	r8, r8, r0
 800841e:	e7e7      	b.n	80083f0 <__sflush_r+0xd4>
 8008420:	dfbffffe 	.word	0xdfbffffe

08008424 <_fflush_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	690b      	ldr	r3, [r1, #16]
 8008428:	4605      	mov	r5, r0
 800842a:	460c      	mov	r4, r1
 800842c:	b913      	cbnz	r3, 8008434 <_fflush_r+0x10>
 800842e:	2500      	movs	r5, #0
 8008430:	4628      	mov	r0, r5
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	b118      	cbz	r0, 800843e <_fflush_r+0x1a>
 8008436:	6a03      	ldr	r3, [r0, #32]
 8008438:	b90b      	cbnz	r3, 800843e <_fflush_r+0x1a>
 800843a:	f7fe fa2d 	bl	8006898 <__sinit>
 800843e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f3      	beq.n	800842e <_fflush_r+0xa>
 8008446:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008448:	07d0      	lsls	r0, r2, #31
 800844a:	d404      	bmi.n	8008456 <_fflush_r+0x32>
 800844c:	0599      	lsls	r1, r3, #22
 800844e:	d402      	bmi.n	8008456 <_fflush_r+0x32>
 8008450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008452:	f7fe fb38 	bl	8006ac6 <__retarget_lock_acquire_recursive>
 8008456:	4628      	mov	r0, r5
 8008458:	4621      	mov	r1, r4
 800845a:	f7ff ff5f 	bl	800831c <__sflush_r>
 800845e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008460:	07da      	lsls	r2, r3, #31
 8008462:	4605      	mov	r5, r0
 8008464:	d4e4      	bmi.n	8008430 <_fflush_r+0xc>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	059b      	lsls	r3, r3, #22
 800846a:	d4e1      	bmi.n	8008430 <_fflush_r+0xc>
 800846c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800846e:	f7fe fb2b 	bl	8006ac8 <__retarget_lock_release_recursive>
 8008472:	e7dd      	b.n	8008430 <_fflush_r+0xc>

08008474 <memmove>:
 8008474:	4288      	cmp	r0, r1
 8008476:	b510      	push	{r4, lr}
 8008478:	eb01 0402 	add.w	r4, r1, r2
 800847c:	d902      	bls.n	8008484 <memmove+0x10>
 800847e:	4284      	cmp	r4, r0
 8008480:	4623      	mov	r3, r4
 8008482:	d807      	bhi.n	8008494 <memmove+0x20>
 8008484:	1e43      	subs	r3, r0, #1
 8008486:	42a1      	cmp	r1, r4
 8008488:	d008      	beq.n	800849c <memmove+0x28>
 800848a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800848e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008492:	e7f8      	b.n	8008486 <memmove+0x12>
 8008494:	4402      	add	r2, r0
 8008496:	4601      	mov	r1, r0
 8008498:	428a      	cmp	r2, r1
 800849a:	d100      	bne.n	800849e <memmove+0x2a>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084a6:	e7f7      	b.n	8008498 <memmove+0x24>

080084a8 <_sbrk_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d06      	ldr	r5, [pc, #24]	@ (80084c4 <_sbrk_r+0x1c>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	f7fa fb2e 	bl	8002b14 <_sbrk>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_sbrk_r+0x1a>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_sbrk_r+0x1a>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	200005c8 	.word	0x200005c8

080084c8 <memcpy>:
 80084c8:	440a      	add	r2, r1
 80084ca:	4291      	cmp	r1, r2
 80084cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80084d0:	d100      	bne.n	80084d4 <memcpy+0xc>
 80084d2:	4770      	bx	lr
 80084d4:	b510      	push	{r4, lr}
 80084d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084de:	4291      	cmp	r1, r2
 80084e0:	d1f9      	bne.n	80084d6 <memcpy+0xe>
 80084e2:	bd10      	pop	{r4, pc}

080084e4 <__assert_func>:
 80084e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084e6:	4614      	mov	r4, r2
 80084e8:	461a      	mov	r2, r3
 80084ea:	4b09      	ldr	r3, [pc, #36]	@ (8008510 <__assert_func+0x2c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4605      	mov	r5, r0
 80084f0:	68d8      	ldr	r0, [r3, #12]
 80084f2:	b954      	cbnz	r4, 800850a <__assert_func+0x26>
 80084f4:	4b07      	ldr	r3, [pc, #28]	@ (8008514 <__assert_func+0x30>)
 80084f6:	461c      	mov	r4, r3
 80084f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084fc:	9100      	str	r1, [sp, #0]
 80084fe:	462b      	mov	r3, r5
 8008500:	4905      	ldr	r1, [pc, #20]	@ (8008518 <__assert_func+0x34>)
 8008502:	f000 f86f 	bl	80085e4 <fiprintf>
 8008506:	f000 f87f 	bl	8008608 <abort>
 800850a:	4b04      	ldr	r3, [pc, #16]	@ (800851c <__assert_func+0x38>)
 800850c:	e7f4      	b.n	80084f8 <__assert_func+0x14>
 800850e:	bf00      	nop
 8008510:	20000028 	.word	0x20000028
 8008514:	0800904e 	.word	0x0800904e
 8008518:	08009020 	.word	0x08009020
 800851c:	08009013 	.word	0x08009013

08008520 <_calloc_r>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	fba1 5402 	umull	r5, r4, r1, r2
 8008526:	b93c      	cbnz	r4, 8008538 <_calloc_r+0x18>
 8008528:	4629      	mov	r1, r5
 800852a:	f7ff f991 	bl	8007850 <_malloc_r>
 800852e:	4606      	mov	r6, r0
 8008530:	b928      	cbnz	r0, 800853e <_calloc_r+0x1e>
 8008532:	2600      	movs	r6, #0
 8008534:	4630      	mov	r0, r6
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	220c      	movs	r2, #12
 800853a:	6002      	str	r2, [r0, #0]
 800853c:	e7f9      	b.n	8008532 <_calloc_r+0x12>
 800853e:	462a      	mov	r2, r5
 8008540:	4621      	mov	r1, r4
 8008542:	f7fe fa42 	bl	80069ca <memset>
 8008546:	e7f5      	b.n	8008534 <_calloc_r+0x14>

08008548 <__ascii_mbtowc>:
 8008548:	b082      	sub	sp, #8
 800854a:	b901      	cbnz	r1, 800854e <__ascii_mbtowc+0x6>
 800854c:	a901      	add	r1, sp, #4
 800854e:	b142      	cbz	r2, 8008562 <__ascii_mbtowc+0x1a>
 8008550:	b14b      	cbz	r3, 8008566 <__ascii_mbtowc+0x1e>
 8008552:	7813      	ldrb	r3, [r2, #0]
 8008554:	600b      	str	r3, [r1, #0]
 8008556:	7812      	ldrb	r2, [r2, #0]
 8008558:	1e10      	subs	r0, r2, #0
 800855a:	bf18      	it	ne
 800855c:	2001      	movne	r0, #1
 800855e:	b002      	add	sp, #8
 8008560:	4770      	bx	lr
 8008562:	4610      	mov	r0, r2
 8008564:	e7fb      	b.n	800855e <__ascii_mbtowc+0x16>
 8008566:	f06f 0001 	mvn.w	r0, #1
 800856a:	e7f8      	b.n	800855e <__ascii_mbtowc+0x16>

0800856c <_realloc_r>:
 800856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008570:	4680      	mov	r8, r0
 8008572:	4615      	mov	r5, r2
 8008574:	460c      	mov	r4, r1
 8008576:	b921      	cbnz	r1, 8008582 <_realloc_r+0x16>
 8008578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800857c:	4611      	mov	r1, r2
 800857e:	f7ff b967 	b.w	8007850 <_malloc_r>
 8008582:	b92a      	cbnz	r2, 8008590 <_realloc_r+0x24>
 8008584:	f7ff f8f0 	bl	8007768 <_free_r>
 8008588:	2400      	movs	r4, #0
 800858a:	4620      	mov	r0, r4
 800858c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008590:	f000 f841 	bl	8008616 <_malloc_usable_size_r>
 8008594:	4285      	cmp	r5, r0
 8008596:	4606      	mov	r6, r0
 8008598:	d802      	bhi.n	80085a0 <_realloc_r+0x34>
 800859a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800859e:	d8f4      	bhi.n	800858a <_realloc_r+0x1e>
 80085a0:	4629      	mov	r1, r5
 80085a2:	4640      	mov	r0, r8
 80085a4:	f7ff f954 	bl	8007850 <_malloc_r>
 80085a8:	4607      	mov	r7, r0
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d0ec      	beq.n	8008588 <_realloc_r+0x1c>
 80085ae:	42b5      	cmp	r5, r6
 80085b0:	462a      	mov	r2, r5
 80085b2:	4621      	mov	r1, r4
 80085b4:	bf28      	it	cs
 80085b6:	4632      	movcs	r2, r6
 80085b8:	f7ff ff86 	bl	80084c8 <memcpy>
 80085bc:	4621      	mov	r1, r4
 80085be:	4640      	mov	r0, r8
 80085c0:	f7ff f8d2 	bl	8007768 <_free_r>
 80085c4:	463c      	mov	r4, r7
 80085c6:	e7e0      	b.n	800858a <_realloc_r+0x1e>

080085c8 <__ascii_wctomb>:
 80085c8:	4603      	mov	r3, r0
 80085ca:	4608      	mov	r0, r1
 80085cc:	b141      	cbz	r1, 80085e0 <__ascii_wctomb+0x18>
 80085ce:	2aff      	cmp	r2, #255	@ 0xff
 80085d0:	d904      	bls.n	80085dc <__ascii_wctomb+0x14>
 80085d2:	228a      	movs	r2, #138	@ 0x8a
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	f04f 30ff 	mov.w	r0, #4294967295
 80085da:	4770      	bx	lr
 80085dc:	700a      	strb	r2, [r1, #0]
 80085de:	2001      	movs	r0, #1
 80085e0:	4770      	bx	lr
	...

080085e4 <fiprintf>:
 80085e4:	b40e      	push	{r1, r2, r3}
 80085e6:	b503      	push	{r0, r1, lr}
 80085e8:	4601      	mov	r1, r0
 80085ea:	ab03      	add	r3, sp, #12
 80085ec:	4805      	ldr	r0, [pc, #20]	@ (8008604 <fiprintf+0x20>)
 80085ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f2:	6800      	ldr	r0, [r0, #0]
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	f000 f83f 	bl	8008678 <_vfiprintf_r>
 80085fa:	b002      	add	sp, #8
 80085fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008600:	b003      	add	sp, #12
 8008602:	4770      	bx	lr
 8008604:	20000028 	.word	0x20000028

08008608 <abort>:
 8008608:	b508      	push	{r3, lr}
 800860a:	2006      	movs	r0, #6
 800860c:	f000 fa08 	bl	8008a20 <raise>
 8008610:	2001      	movs	r0, #1
 8008612:	f7fa fa06 	bl	8002a22 <_exit>

08008616 <_malloc_usable_size_r>:
 8008616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800861a:	1f18      	subs	r0, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	bfbc      	itt	lt
 8008620:	580b      	ldrlt	r3, [r1, r0]
 8008622:	18c0      	addlt	r0, r0, r3
 8008624:	4770      	bx	lr

08008626 <__sfputc_r>:
 8008626:	6893      	ldr	r3, [r2, #8]
 8008628:	3b01      	subs	r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	b410      	push	{r4}
 800862e:	6093      	str	r3, [r2, #8]
 8008630:	da08      	bge.n	8008644 <__sfputc_r+0x1e>
 8008632:	6994      	ldr	r4, [r2, #24]
 8008634:	42a3      	cmp	r3, r4
 8008636:	db01      	blt.n	800863c <__sfputc_r+0x16>
 8008638:	290a      	cmp	r1, #10
 800863a:	d103      	bne.n	8008644 <__sfputc_r+0x1e>
 800863c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008640:	f000 b932 	b.w	80088a8 <__swbuf_r>
 8008644:	6813      	ldr	r3, [r2, #0]
 8008646:	1c58      	adds	r0, r3, #1
 8008648:	6010      	str	r0, [r2, #0]
 800864a:	7019      	strb	r1, [r3, #0]
 800864c:	4608      	mov	r0, r1
 800864e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008652:	4770      	bx	lr

08008654 <__sfputs_r>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	4606      	mov	r6, r0
 8008658:	460f      	mov	r7, r1
 800865a:	4614      	mov	r4, r2
 800865c:	18d5      	adds	r5, r2, r3
 800865e:	42ac      	cmp	r4, r5
 8008660:	d101      	bne.n	8008666 <__sfputs_r+0x12>
 8008662:	2000      	movs	r0, #0
 8008664:	e007      	b.n	8008676 <__sfputs_r+0x22>
 8008666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866a:	463a      	mov	r2, r7
 800866c:	4630      	mov	r0, r6
 800866e:	f7ff ffda 	bl	8008626 <__sfputc_r>
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d1f3      	bne.n	800865e <__sfputs_r+0xa>
 8008676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008678 <_vfiprintf_r>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	460d      	mov	r5, r1
 800867e:	b09d      	sub	sp, #116	@ 0x74
 8008680:	4614      	mov	r4, r2
 8008682:	4698      	mov	r8, r3
 8008684:	4606      	mov	r6, r0
 8008686:	b118      	cbz	r0, 8008690 <_vfiprintf_r+0x18>
 8008688:	6a03      	ldr	r3, [r0, #32]
 800868a:	b90b      	cbnz	r3, 8008690 <_vfiprintf_r+0x18>
 800868c:	f7fe f904 	bl	8006898 <__sinit>
 8008690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008692:	07d9      	lsls	r1, r3, #31
 8008694:	d405      	bmi.n	80086a2 <_vfiprintf_r+0x2a>
 8008696:	89ab      	ldrh	r3, [r5, #12]
 8008698:	059a      	lsls	r2, r3, #22
 800869a:	d402      	bmi.n	80086a2 <_vfiprintf_r+0x2a>
 800869c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800869e:	f7fe fa12 	bl	8006ac6 <__retarget_lock_acquire_recursive>
 80086a2:	89ab      	ldrh	r3, [r5, #12]
 80086a4:	071b      	lsls	r3, r3, #28
 80086a6:	d501      	bpl.n	80086ac <_vfiprintf_r+0x34>
 80086a8:	692b      	ldr	r3, [r5, #16]
 80086aa:	b99b      	cbnz	r3, 80086d4 <_vfiprintf_r+0x5c>
 80086ac:	4629      	mov	r1, r5
 80086ae:	4630      	mov	r0, r6
 80086b0:	f000 f938 	bl	8008924 <__swsetup_r>
 80086b4:	b170      	cbz	r0, 80086d4 <_vfiprintf_r+0x5c>
 80086b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086b8:	07dc      	lsls	r4, r3, #31
 80086ba:	d504      	bpl.n	80086c6 <_vfiprintf_r+0x4e>
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	b01d      	add	sp, #116	@ 0x74
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	89ab      	ldrh	r3, [r5, #12]
 80086c8:	0598      	lsls	r0, r3, #22
 80086ca:	d4f7      	bmi.n	80086bc <_vfiprintf_r+0x44>
 80086cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086ce:	f7fe f9fb 	bl	8006ac8 <__retarget_lock_release_recursive>
 80086d2:	e7f3      	b.n	80086bc <_vfiprintf_r+0x44>
 80086d4:	2300      	movs	r3, #0
 80086d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d8:	2320      	movs	r3, #32
 80086da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086de:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e2:	2330      	movs	r3, #48	@ 0x30
 80086e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008894 <_vfiprintf_r+0x21c>
 80086e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086ec:	f04f 0901 	mov.w	r9, #1
 80086f0:	4623      	mov	r3, r4
 80086f2:	469a      	mov	sl, r3
 80086f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086f8:	b10a      	cbz	r2, 80086fe <_vfiprintf_r+0x86>
 80086fa:	2a25      	cmp	r2, #37	@ 0x25
 80086fc:	d1f9      	bne.n	80086f2 <_vfiprintf_r+0x7a>
 80086fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008702:	d00b      	beq.n	800871c <_vfiprintf_r+0xa4>
 8008704:	465b      	mov	r3, fp
 8008706:	4622      	mov	r2, r4
 8008708:	4629      	mov	r1, r5
 800870a:	4630      	mov	r0, r6
 800870c:	f7ff ffa2 	bl	8008654 <__sfputs_r>
 8008710:	3001      	adds	r0, #1
 8008712:	f000 80a7 	beq.w	8008864 <_vfiprintf_r+0x1ec>
 8008716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008718:	445a      	add	r2, fp
 800871a:	9209      	str	r2, [sp, #36]	@ 0x24
 800871c:	f89a 3000 	ldrb.w	r3, [sl]
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 809f 	beq.w	8008864 <_vfiprintf_r+0x1ec>
 8008726:	2300      	movs	r3, #0
 8008728:	f04f 32ff 	mov.w	r2, #4294967295
 800872c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008730:	f10a 0a01 	add.w	sl, sl, #1
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800873c:	931a      	str	r3, [sp, #104]	@ 0x68
 800873e:	4654      	mov	r4, sl
 8008740:	2205      	movs	r2, #5
 8008742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008746:	4853      	ldr	r0, [pc, #332]	@ (8008894 <_vfiprintf_r+0x21c>)
 8008748:	f7f7 fd62 	bl	8000210 <memchr>
 800874c:	9a04      	ldr	r2, [sp, #16]
 800874e:	b9d8      	cbnz	r0, 8008788 <_vfiprintf_r+0x110>
 8008750:	06d1      	lsls	r1, r2, #27
 8008752:	bf44      	itt	mi
 8008754:	2320      	movmi	r3, #32
 8008756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800875a:	0713      	lsls	r3, r2, #28
 800875c:	bf44      	itt	mi
 800875e:	232b      	movmi	r3, #43	@ 0x2b
 8008760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008764:	f89a 3000 	ldrb.w	r3, [sl]
 8008768:	2b2a      	cmp	r3, #42	@ 0x2a
 800876a:	d015      	beq.n	8008798 <_vfiprintf_r+0x120>
 800876c:	9a07      	ldr	r2, [sp, #28]
 800876e:	4654      	mov	r4, sl
 8008770:	2000      	movs	r0, #0
 8008772:	f04f 0c0a 	mov.w	ip, #10
 8008776:	4621      	mov	r1, r4
 8008778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800877c:	3b30      	subs	r3, #48	@ 0x30
 800877e:	2b09      	cmp	r3, #9
 8008780:	d94b      	bls.n	800881a <_vfiprintf_r+0x1a2>
 8008782:	b1b0      	cbz	r0, 80087b2 <_vfiprintf_r+0x13a>
 8008784:	9207      	str	r2, [sp, #28]
 8008786:	e014      	b.n	80087b2 <_vfiprintf_r+0x13a>
 8008788:	eba0 0308 	sub.w	r3, r0, r8
 800878c:	fa09 f303 	lsl.w	r3, r9, r3
 8008790:	4313      	orrs	r3, r2
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	46a2      	mov	sl, r4
 8008796:	e7d2      	b.n	800873e <_vfiprintf_r+0xc6>
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	1d19      	adds	r1, r3, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	9103      	str	r1, [sp, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bfbb      	ittet	lt
 80087a4:	425b      	neglt	r3, r3
 80087a6:	f042 0202 	orrlt.w	r2, r2, #2
 80087aa:	9307      	strge	r3, [sp, #28]
 80087ac:	9307      	strlt	r3, [sp, #28]
 80087ae:	bfb8      	it	lt
 80087b0:	9204      	strlt	r2, [sp, #16]
 80087b2:	7823      	ldrb	r3, [r4, #0]
 80087b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80087b6:	d10a      	bne.n	80087ce <_vfiprintf_r+0x156>
 80087b8:	7863      	ldrb	r3, [r4, #1]
 80087ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80087bc:	d132      	bne.n	8008824 <_vfiprintf_r+0x1ac>
 80087be:	9b03      	ldr	r3, [sp, #12]
 80087c0:	1d1a      	adds	r2, r3, #4
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	9203      	str	r2, [sp, #12]
 80087c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087ca:	3402      	adds	r4, #2
 80087cc:	9305      	str	r3, [sp, #20]
 80087ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088a4 <_vfiprintf_r+0x22c>
 80087d2:	7821      	ldrb	r1, [r4, #0]
 80087d4:	2203      	movs	r2, #3
 80087d6:	4650      	mov	r0, sl
 80087d8:	f7f7 fd1a 	bl	8000210 <memchr>
 80087dc:	b138      	cbz	r0, 80087ee <_vfiprintf_r+0x176>
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	eba0 000a 	sub.w	r0, r0, sl
 80087e4:	2240      	movs	r2, #64	@ 0x40
 80087e6:	4082      	lsls	r2, r0
 80087e8:	4313      	orrs	r3, r2
 80087ea:	3401      	adds	r4, #1
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f2:	4829      	ldr	r0, [pc, #164]	@ (8008898 <_vfiprintf_r+0x220>)
 80087f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087f8:	2206      	movs	r2, #6
 80087fa:	f7f7 fd09 	bl	8000210 <memchr>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d03f      	beq.n	8008882 <_vfiprintf_r+0x20a>
 8008802:	4b26      	ldr	r3, [pc, #152]	@ (800889c <_vfiprintf_r+0x224>)
 8008804:	bb1b      	cbnz	r3, 800884e <_vfiprintf_r+0x1d6>
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	3307      	adds	r3, #7
 800880a:	f023 0307 	bic.w	r3, r3, #7
 800880e:	3308      	adds	r3, #8
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008814:	443b      	add	r3, r7
 8008816:	9309      	str	r3, [sp, #36]	@ 0x24
 8008818:	e76a      	b.n	80086f0 <_vfiprintf_r+0x78>
 800881a:	fb0c 3202 	mla	r2, ip, r2, r3
 800881e:	460c      	mov	r4, r1
 8008820:	2001      	movs	r0, #1
 8008822:	e7a8      	b.n	8008776 <_vfiprintf_r+0xfe>
 8008824:	2300      	movs	r3, #0
 8008826:	3401      	adds	r4, #1
 8008828:	9305      	str	r3, [sp, #20]
 800882a:	4619      	mov	r1, r3
 800882c:	f04f 0c0a 	mov.w	ip, #10
 8008830:	4620      	mov	r0, r4
 8008832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008836:	3a30      	subs	r2, #48	@ 0x30
 8008838:	2a09      	cmp	r2, #9
 800883a:	d903      	bls.n	8008844 <_vfiprintf_r+0x1cc>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0c6      	beq.n	80087ce <_vfiprintf_r+0x156>
 8008840:	9105      	str	r1, [sp, #20]
 8008842:	e7c4      	b.n	80087ce <_vfiprintf_r+0x156>
 8008844:	fb0c 2101 	mla	r1, ip, r1, r2
 8008848:	4604      	mov	r4, r0
 800884a:	2301      	movs	r3, #1
 800884c:	e7f0      	b.n	8008830 <_vfiprintf_r+0x1b8>
 800884e:	ab03      	add	r3, sp, #12
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	462a      	mov	r2, r5
 8008854:	4b12      	ldr	r3, [pc, #72]	@ (80088a0 <_vfiprintf_r+0x228>)
 8008856:	a904      	add	r1, sp, #16
 8008858:	4630      	mov	r0, r6
 800885a:	f7fd fbd9 	bl	8006010 <_printf_float>
 800885e:	4607      	mov	r7, r0
 8008860:	1c78      	adds	r0, r7, #1
 8008862:	d1d6      	bne.n	8008812 <_vfiprintf_r+0x19a>
 8008864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008866:	07d9      	lsls	r1, r3, #31
 8008868:	d405      	bmi.n	8008876 <_vfiprintf_r+0x1fe>
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	059a      	lsls	r2, r3, #22
 800886e:	d402      	bmi.n	8008876 <_vfiprintf_r+0x1fe>
 8008870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008872:	f7fe f929 	bl	8006ac8 <__retarget_lock_release_recursive>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	065b      	lsls	r3, r3, #25
 800887a:	f53f af1f 	bmi.w	80086bc <_vfiprintf_r+0x44>
 800887e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008880:	e71e      	b.n	80086c0 <_vfiprintf_r+0x48>
 8008882:	ab03      	add	r3, sp, #12
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	462a      	mov	r2, r5
 8008888:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <_vfiprintf_r+0x228>)
 800888a:	a904      	add	r1, sp, #16
 800888c:	4630      	mov	r0, r6
 800888e:	f7fd fe57 	bl	8006540 <_printf_i>
 8008892:	e7e4      	b.n	800885e <_vfiprintf_r+0x1e6>
 8008894:	08008ff8 	.word	0x08008ff8
 8008898:	08009002 	.word	0x08009002
 800889c:	08006011 	.word	0x08006011
 80088a0:	08008655 	.word	0x08008655
 80088a4:	08008ffe 	.word	0x08008ffe

080088a8 <__swbuf_r>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	460e      	mov	r6, r1
 80088ac:	4614      	mov	r4, r2
 80088ae:	4605      	mov	r5, r0
 80088b0:	b118      	cbz	r0, 80088ba <__swbuf_r+0x12>
 80088b2:	6a03      	ldr	r3, [r0, #32]
 80088b4:	b90b      	cbnz	r3, 80088ba <__swbuf_r+0x12>
 80088b6:	f7fd ffef 	bl	8006898 <__sinit>
 80088ba:	69a3      	ldr	r3, [r4, #24]
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	071a      	lsls	r2, r3, #28
 80088c2:	d501      	bpl.n	80088c8 <__swbuf_r+0x20>
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	b943      	cbnz	r3, 80088da <__swbuf_r+0x32>
 80088c8:	4621      	mov	r1, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f82a 	bl	8008924 <__swsetup_r>
 80088d0:	b118      	cbz	r0, 80088da <__swbuf_r+0x32>
 80088d2:	f04f 37ff 	mov.w	r7, #4294967295
 80088d6:	4638      	mov	r0, r7
 80088d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	6922      	ldr	r2, [r4, #16]
 80088de:	1a98      	subs	r0, r3, r2
 80088e0:	6963      	ldr	r3, [r4, #20]
 80088e2:	b2f6      	uxtb	r6, r6
 80088e4:	4283      	cmp	r3, r0
 80088e6:	4637      	mov	r7, r6
 80088e8:	dc05      	bgt.n	80088f6 <__swbuf_r+0x4e>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	f7ff fd99 	bl	8008424 <_fflush_r>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d1ed      	bne.n	80088d2 <__swbuf_r+0x2a>
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	60a3      	str	r3, [r4, #8]
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	6022      	str	r2, [r4, #0]
 8008902:	701e      	strb	r6, [r3, #0]
 8008904:	6962      	ldr	r2, [r4, #20]
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	429a      	cmp	r2, r3
 800890a:	d004      	beq.n	8008916 <__swbuf_r+0x6e>
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	07db      	lsls	r3, r3, #31
 8008910:	d5e1      	bpl.n	80088d6 <__swbuf_r+0x2e>
 8008912:	2e0a      	cmp	r6, #10
 8008914:	d1df      	bne.n	80088d6 <__swbuf_r+0x2e>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f7ff fd83 	bl	8008424 <_fflush_r>
 800891e:	2800      	cmp	r0, #0
 8008920:	d0d9      	beq.n	80088d6 <__swbuf_r+0x2e>
 8008922:	e7d6      	b.n	80088d2 <__swbuf_r+0x2a>

08008924 <__swsetup_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4b29      	ldr	r3, [pc, #164]	@ (80089cc <__swsetup_r+0xa8>)
 8008928:	4605      	mov	r5, r0
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	460c      	mov	r4, r1
 800892e:	b118      	cbz	r0, 8008938 <__swsetup_r+0x14>
 8008930:	6a03      	ldr	r3, [r0, #32]
 8008932:	b90b      	cbnz	r3, 8008938 <__swsetup_r+0x14>
 8008934:	f7fd ffb0 	bl	8006898 <__sinit>
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	0719      	lsls	r1, r3, #28
 800893e:	d422      	bmi.n	8008986 <__swsetup_r+0x62>
 8008940:	06da      	lsls	r2, r3, #27
 8008942:	d407      	bmi.n	8008954 <__swsetup_r+0x30>
 8008944:	2209      	movs	r2, #9
 8008946:	602a      	str	r2, [r5, #0]
 8008948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295
 8008952:	e033      	b.n	80089bc <__swsetup_r+0x98>
 8008954:	0758      	lsls	r0, r3, #29
 8008956:	d512      	bpl.n	800897e <__swsetup_r+0x5a>
 8008958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800895a:	b141      	cbz	r1, 800896e <__swsetup_r+0x4a>
 800895c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008960:	4299      	cmp	r1, r3
 8008962:	d002      	beq.n	800896a <__swsetup_r+0x46>
 8008964:	4628      	mov	r0, r5
 8008966:	f7fe feff 	bl	8007768 <_free_r>
 800896a:	2300      	movs	r3, #0
 800896c:	6363      	str	r3, [r4, #52]	@ 0x34
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	2300      	movs	r3, #0
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	b94b      	cbnz	r3, 800899e <__swsetup_r+0x7a>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008994:	d003      	beq.n	800899e <__swsetup_r+0x7a>
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f883 	bl	8008aa4 <__smakebuf_r>
 800899e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a2:	f013 0201 	ands.w	r2, r3, #1
 80089a6:	d00a      	beq.n	80089be <__swsetup_r+0x9a>
 80089a8:	2200      	movs	r2, #0
 80089aa:	60a2      	str	r2, [r4, #8]
 80089ac:	6962      	ldr	r2, [r4, #20]
 80089ae:	4252      	negs	r2, r2
 80089b0:	61a2      	str	r2, [r4, #24]
 80089b2:	6922      	ldr	r2, [r4, #16]
 80089b4:	b942      	cbnz	r2, 80089c8 <__swsetup_r+0xa4>
 80089b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ba:	d1c5      	bne.n	8008948 <__swsetup_r+0x24>
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	0799      	lsls	r1, r3, #30
 80089c0:	bf58      	it	pl
 80089c2:	6962      	ldrpl	r2, [r4, #20]
 80089c4:	60a2      	str	r2, [r4, #8]
 80089c6:	e7f4      	b.n	80089b2 <__swsetup_r+0x8e>
 80089c8:	2000      	movs	r0, #0
 80089ca:	e7f7      	b.n	80089bc <__swsetup_r+0x98>
 80089cc:	20000028 	.word	0x20000028

080089d0 <_raise_r>:
 80089d0:	291f      	cmp	r1, #31
 80089d2:	b538      	push	{r3, r4, r5, lr}
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	d904      	bls.n	80089e4 <_raise_r+0x14>
 80089da:	2316      	movs	r3, #22
 80089dc:	6003      	str	r3, [r0, #0]
 80089de:	f04f 30ff 	mov.w	r0, #4294967295
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089e6:	b112      	cbz	r2, 80089ee <_raise_r+0x1e>
 80089e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089ec:	b94b      	cbnz	r3, 8008a02 <_raise_r+0x32>
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f830 	bl	8008a54 <_getpid_r>
 80089f4:	4622      	mov	r2, r4
 80089f6:	4601      	mov	r1, r0
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089fe:	f000 b817 	b.w	8008a30 <_kill_r>
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d00a      	beq.n	8008a1c <_raise_r+0x4c>
 8008a06:	1c59      	adds	r1, r3, #1
 8008a08:	d103      	bne.n	8008a12 <_raise_r+0x42>
 8008a0a:	2316      	movs	r3, #22
 8008a0c:	6003      	str	r3, [r0, #0]
 8008a0e:	2001      	movs	r0, #1
 8008a10:	e7e7      	b.n	80089e2 <_raise_r+0x12>
 8008a12:	2100      	movs	r1, #0
 8008a14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	4798      	blx	r3
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	e7e0      	b.n	80089e2 <_raise_r+0x12>

08008a20 <raise>:
 8008a20:	4b02      	ldr	r3, [pc, #8]	@ (8008a2c <raise+0xc>)
 8008a22:	4601      	mov	r1, r0
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	f7ff bfd3 	b.w	80089d0 <_raise_r>
 8008a2a:	bf00      	nop
 8008a2c:	20000028 	.word	0x20000028

08008a30 <_kill_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	@ (8008a50 <_kill_r+0x20>)
 8008a34:	2300      	movs	r3, #0
 8008a36:	4604      	mov	r4, r0
 8008a38:	4608      	mov	r0, r1
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	602b      	str	r3, [r5, #0]
 8008a3e:	f7f9 ffe0 	bl	8002a02 <_kill>
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	d102      	bne.n	8008a4c <_kill_r+0x1c>
 8008a46:	682b      	ldr	r3, [r5, #0]
 8008a48:	b103      	cbz	r3, 8008a4c <_kill_r+0x1c>
 8008a4a:	6023      	str	r3, [r4, #0]
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
 8008a4e:	bf00      	nop
 8008a50:	200005c8 	.word	0x200005c8

08008a54 <_getpid_r>:
 8008a54:	f7f9 bfcd 	b.w	80029f2 <_getpid>

08008a58 <__swhatbuf_r>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a60:	2900      	cmp	r1, #0
 8008a62:	b096      	sub	sp, #88	@ 0x58
 8008a64:	4615      	mov	r5, r2
 8008a66:	461e      	mov	r6, r3
 8008a68:	da0d      	bge.n	8008a86 <__swhatbuf_r+0x2e>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a70:	f04f 0100 	mov.w	r1, #0
 8008a74:	bf14      	ite	ne
 8008a76:	2340      	movne	r3, #64	@ 0x40
 8008a78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	6031      	str	r1, [r6, #0]
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	b016      	add	sp, #88	@ 0x58
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
 8008a86:	466a      	mov	r2, sp
 8008a88:	f000 f848 	bl	8008b1c <_fstat_r>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	dbec      	blt.n	8008a6a <__swhatbuf_r+0x12>
 8008a90:	9901      	ldr	r1, [sp, #4]
 8008a92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a9a:	4259      	negs	r1, r3
 8008a9c:	4159      	adcs	r1, r3
 8008a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008aa2:	e7eb      	b.n	8008a7c <__swhatbuf_r+0x24>

08008aa4 <__smakebuf_r>:
 8008aa4:	898b      	ldrh	r3, [r1, #12]
 8008aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aa8:	079d      	lsls	r5, r3, #30
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460c      	mov	r4, r1
 8008aae:	d507      	bpl.n	8008ac0 <__smakebuf_r+0x1c>
 8008ab0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	6163      	str	r3, [r4, #20]
 8008abc:	b003      	add	sp, #12
 8008abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac0:	ab01      	add	r3, sp, #4
 8008ac2:	466a      	mov	r2, sp
 8008ac4:	f7ff ffc8 	bl	8008a58 <__swhatbuf_r>
 8008ac8:	9f00      	ldr	r7, [sp, #0]
 8008aca:	4605      	mov	r5, r0
 8008acc:	4639      	mov	r1, r7
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7fe febe 	bl	8007850 <_malloc_r>
 8008ad4:	b948      	cbnz	r0, 8008aea <__smakebuf_r+0x46>
 8008ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ada:	059a      	lsls	r2, r3, #22
 8008adc:	d4ee      	bmi.n	8008abc <__smakebuf_r+0x18>
 8008ade:	f023 0303 	bic.w	r3, r3, #3
 8008ae2:	f043 0302 	orr.w	r3, r3, #2
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	e7e2      	b.n	8008ab0 <__smakebuf_r+0xc>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	6020      	str	r0, [r4, #0]
 8008aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af2:	81a3      	strh	r3, [r4, #12]
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008afa:	b15b      	cbz	r3, 8008b14 <__smakebuf_r+0x70>
 8008afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 f81d 	bl	8008b40 <_isatty_r>
 8008b06:	b128      	cbz	r0, 8008b14 <__smakebuf_r+0x70>
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	431d      	orrs	r5, r3
 8008b18:	81a5      	strh	r5, [r4, #12]
 8008b1a:	e7cf      	b.n	8008abc <__smakebuf_r+0x18>

08008b1c <_fstat_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d07      	ldr	r5, [pc, #28]	@ (8008b3c <_fstat_r+0x20>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	f7f9 ffca 	bl	8002ac2 <_fstat>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d102      	bne.n	8008b38 <_fstat_r+0x1c>
 8008b32:	682b      	ldr	r3, [r5, #0]
 8008b34:	b103      	cbz	r3, 8008b38 <_fstat_r+0x1c>
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	bd38      	pop	{r3, r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200005c8 	.word	0x200005c8

08008b40 <_isatty_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d06      	ldr	r5, [pc, #24]	@ (8008b5c <_isatty_r+0x1c>)
 8008b44:	2300      	movs	r3, #0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	f7f9 ffc9 	bl	8002ae2 <_isatty>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_isatty_r+0x1a>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_isatty_r+0x1a>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	200005c8 	.word	0x200005c8

08008b60 <_init>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr

08008b6c <_fini>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr
