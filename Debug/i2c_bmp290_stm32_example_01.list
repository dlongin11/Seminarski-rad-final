
i2c_bmp290_stm32_example_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  080086a8  080086a8  000096a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c80  08008c80  0000a1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c80  08008c80  00009c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c88  08008c88  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c88  08008c88  00009c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c8c  08008c8c  00009c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08008c90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200001e4  08008e74  0000a1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08008e74  0000a590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dce5  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d8  00000000  00000000  00017ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0001a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093e  00000000  00000000  0001aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f61  00000000  00000000  0001b816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b1f  00000000  00000000  0003e777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd5de  00000000  00000000  0004f296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c874  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b4  00000000  00000000  0011c8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00120a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008690 	.word	0x08008690

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08008690 	.word	0x08008690

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <bmp280_init_default_params>:
#define BMP280_REG_HUM_CALIB   0x88

#define BMP280_RESET_VALUE     0xB6


void bmp280_init_default_params(bmp280_params_t *params) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	715a      	strb	r2, [r3, #5]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	8af9      	ldrh	r1, [r7, #22]
 8000fd0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f002 fcb3 	bl	800394c <HAL_I2C_Mem_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10b      	bne.n	8001004 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fec:	7d7b      	ldrb	r3, [r7, #21]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7d3b      	ldrb	r3, [r7, #20]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	801a      	strh	r2, [r3, #0]
		return true;
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <read_register16+0x56>
	} else
		return false;
 8001004:	2300      	movs	r3, #0

}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b08b      	sub	sp, #44	@ 0x2c
 8001012:	af04      	add	r7, sp, #16
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	72fb      	strb	r3, [r7, #11]
 800101e:	4613      	mov	r3, r2
 8001020:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	b29a      	uxth	r2, r3
 8001032:	7abb      	ldrb	r3, [r7, #10]
 8001034:	b29b      	uxth	r3, r3
 8001036:	8af9      	ldrh	r1, [r7, #22]
 8001038:	f241 3488 	movw	r4, #5000	@ 0x1388
 800103c:	9402      	str	r4, [sp, #8]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	f002 fc81 	bl	800394c <HAL_I2C_Mem_Read>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <read_data+0x46>
		return 0;
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <read_data+0x48>
	else
		return 1;
 8001054:	2301      	movs	r3, #1

}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	461a      	mov	r2, r3
 800106a:	2188      	movs	r1, #136	@ 0x88
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff9f 	bl	8000fb0 <read_register16>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d06f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3302      	adds	r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	218a      	movs	r1, #138	@ 0x8a
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff95 	bl	8000fb0 <read_register16>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d065      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	461a      	mov	r2, r3
 8001092:	218c      	movs	r1, #140	@ 0x8c
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff8b 	bl	8000fb0 <read_register16>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3306      	adds	r3, #6
 80010a4:	461a      	mov	r2, r3
 80010a6:	218e      	movs	r1, #142	@ 0x8e
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff81 	bl	8000fb0 <read_register16>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d051      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3308      	adds	r3, #8
 80010b8:	461a      	mov	r2, r3
 80010ba:	2190      	movs	r1, #144	@ 0x90
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff77 	bl	8000fb0 <read_register16>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d047      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	330a      	adds	r3, #10
 80010cc:	461a      	mov	r2, r3
 80010ce:	2192      	movs	r1, #146	@ 0x92
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff6d 	bl	8000fb0 <read_register16>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d03d      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	330c      	adds	r3, #12
 80010e0:	461a      	mov	r2, r3
 80010e2:	2194      	movs	r1, #148	@ 0x94
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff63 	bl	8000fb0 <read_register16>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d033      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	330e      	adds	r3, #14
 80010f4:	461a      	mov	r2, r3
 80010f6:	2196      	movs	r1, #150	@ 0x96
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff59 	bl	8000fb0 <read_register16>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d029      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3310      	adds	r3, #16
 8001108:	461a      	mov	r2, r3
 800110a:	2198      	movs	r1, #152	@ 0x98
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff4f 	bl	8000fb0 <read_register16>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3312      	adds	r3, #18
 800111c:	461a      	mov	r2, r3
 800111e:	219a      	movs	r1, #154	@ 0x9a
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff45 	bl	8000fb0 <read_register16>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d015      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3314      	adds	r3, #20
 8001130:	461a      	mov	r2, r3
 8001132:	219c      	movs	r1, #156	@ 0x9c
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff3b 	bl	8000fb0 <read_register16>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001144:	461a      	mov	r2, r3
 8001146:	219e      	movs	r1, #158	@ 0x9e
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff31 	bl	8000fb0 <read_register16>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <read_calibration_data+0xfa>

		return true;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <read_calibration_data+0xfc>
	}

	return false;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f103 0218 	add.w	r2, r3, #24
 8001170:	2301      	movs	r3, #1
 8001172:	21a1      	movs	r1, #161	@ 0xa1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff4a 	bl	800100e <read_data>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14b      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	331a      	adds	r3, #26
 8001184:	461a      	mov	r2, r3
 8001186:	21e1      	movs	r1, #225	@ 0xe1
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff11 	bl	8000fb0 <read_register16>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d041      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 021c 	add.w	r2, r3, #28
 800119a:	2301      	movs	r3, #1
 800119c:	21e3      	movs	r1, #227	@ 0xe3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff35 	bl	800100e <read_data>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d136      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011aa:	f107 030e 	add.w	r3, r7, #14
 80011ae:	461a      	mov	r2, r3
 80011b0:	21e4      	movs	r1, #228	@ 0xe4
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fefc 	bl	8000fb0 <read_register16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d02c      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	461a      	mov	r2, r3
 80011c4:	21e5      	movs	r1, #229	@ 0xe5
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fef2 	bl	8000fb0 <read_register16>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80011d8:	2301      	movs	r3, #1
 80011da:	21e7      	movs	r1, #231	@ 0xe7
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff16 	bl	800100e <read_data>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d117      	bne.n	8001218 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	b29b      	uxth	r3, r3
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	841a      	strh	r2, [r3, #32]

		return true;
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b088      	sub	sp, #32
 8001226:	af04      	add	r7, sp, #16
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
 800122e:	4613      	mov	r3, r2
 8001230:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	b29a      	uxth	r2, r3
 8001242:	89f9      	ldrh	r1, [r7, #14]
 8001244:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1cbb      	adds	r3, r7, #2
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	f002 fa80 	bl	8003758 <HAL_I2C_Mem_Write>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <write_register8+0x40>
		return false;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <write_register8+0x42>
	else
		return true;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b092      	sub	sp, #72	@ 0x48
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    char buffer[50];  // Buffer to hold the formatted string

    sprintf(buffer, "Beginning of init\n");
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	49b5      	ldr	r1, [pc, #724]	@ (8001550 <bmp280_init+0x2e4>)
 800127c:	4618      	mov	r0, r3
 800127e:	f005 f8db 	bl	8006438 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f812 	bl	80002b0 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	f107 0110 	add.w	r1, r7, #16
 8001294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001298:	48ae      	ldr	r0, [pc, #696]	@ (8001554 <bmp280_init+0x2e8>)
 800129a:	f003 fff7 	bl	800528c <HAL_UART_Transmit>


	if (dev->addr != BMP280_I2C_ADDRESS_0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012a2:	2b76      	cmp	r3, #118	@ 0x76
 80012a4:	d01c      	beq.n	80012e0 <bmp280_init+0x74>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012aa:	2b77      	cmp	r3, #119	@ 0x77
 80012ac:	d018      	beq.n	80012e0 <bmp280_init+0x74>
        sprintf(buffer, "Invalid address: 0x%x\n", dev->addr);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012b2:	461a      	mov	r2, r3
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	49a7      	ldr	r1, [pc, #668]	@ (8001558 <bmp280_init+0x2ec>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 f8bc 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe fff3 	bl	80002b0 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f107 0110 	add.w	r1, r7, #16
 80012d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d6:	489f      	ldr	r0, [pc, #636]	@ (8001554 <bmp280_init+0x2e8>)
 80012d8:	f003 ffd8 	bl	800528c <HAL_UART_Transmit>

		return false;
 80012dc:	2300      	movs	r3, #0
 80012de:	e182      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80012e6:	2301      	movs	r3, #1
 80012e8:	21d0      	movs	r1, #208	@ 0xd0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fe8f 	bl	800100e <read_data>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d015      	beq.n	8001322 <bmp280_init+0xb6>
        sprintf(buffer, "Failed to read device ID\n");
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4998      	ldr	r1, [pc, #608]	@ (800155c <bmp280_init+0x2f0>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f005 f89b 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ffd2 	bl	80002b0 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f107 0110 	add.w	r1, r7, #16
 8001314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001318:	488e      	ldr	r0, [pc, #568]	@ (8001554 <bmp280_init+0x2e8>)
 800131a:	f003 ffb7 	bl	800528c <HAL_UART_Transmit>


		return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e161      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001328:	2b58      	cmp	r3, #88	@ 0x58
 800132a:	d01e      	beq.n	800136a <bmp280_init+0xfe>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001332:	2b60      	cmp	r3, #96	@ 0x60
 8001334:	d019      	beq.n	800136a <bmp280_init+0xfe>
        sprintf(buffer, "Unknown device ID: 0x%x\n", dev->id);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800133c:	461a      	mov	r2, r3
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4987      	ldr	r1, [pc, #540]	@ (8001560 <bmp280_init+0x2f4>)
 8001344:	4618      	mov	r0, r3
 8001346:	f005 f877 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ffae 	bl	80002b0 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f107 0110 	add.w	r1, r7, #16
 800135c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001360:	487c      	ldr	r0, [pc, #496]	@ (8001554 <bmp280_init+0x2e8>)
 8001362:	f003 ff93 	bl	800528c <HAL_UART_Transmit>


		return false;
 8001366:	2300      	movs	r3, #0
 8001368:	e13d      	b.n	80015e6 <bmp280_init+0x37a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800136a:	22b6      	movs	r2, #182	@ 0xb6
 800136c:	21e0      	movs	r1, #224	@ 0xe0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff57 	bl	8001222 <write_register8>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <bmp280_init+0x13a>
        sprintf(buffer, "Failed to reset device\n");
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4979      	ldr	r1, [pc, #484]	@ (8001564 <bmp280_init+0x2f8>)
 8001380:	4618      	mov	r0, r3
 8001382:	f005 f859 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff90 	bl	80002b0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0110 	add.w	r1, r7, #16
 8001398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139c:	486d      	ldr	r0, [pc, #436]	@ (8001554 <bmp280_init+0x2e8>)
 800139e:	f003 ff75 	bl	800528c <HAL_UART_Transmit>


		return false;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e11f      	b.n	80015e6 <bmp280_init+0x37a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80013a6:	f107 020f 	add.w	r2, r7, #15
 80013aa:	2301      	movs	r3, #1
 80013ac:	21f3      	movs	r1, #243	@ 0xf3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fe2d 	bl	800100e <read_data>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f5      	bne.n	80013a6 <bmp280_init+0x13a>
				&& (status & 1) == 0)
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <bmp280_init+0x13a>
			break;
	}

	if (!read_calibration_data(dev)) {
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fe4a 	bl	800105e <read_calibration_data>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <bmp280_init+0x16c>
 80013d6:	e015      	b.n	8001404 <bmp280_init+0x198>
        sprintf(buffer, "Failed to read calibration data\n");
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4962      	ldr	r1, [pc, #392]	@ (8001568 <bmp280_init+0x2fc>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 f82a 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff61 	bl	80002b0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f107 0110 	add.w	r1, r7, #16
 80013f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fa:	4856      	ldr	r0, [pc, #344]	@ (8001554 <bmp280_init+0x2e8>)
 80013fc:	f003 ff46 	bl	800528c <HAL_UART_Transmit>


		return false;
 8001400:	2300      	movs	r3, #0
 8001402:	e0f0      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800140a:	2b60      	cmp	r3, #96	@ 0x60
 800140c:	d11e      	bne.n	800144c <bmp280_init+0x1e0>
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fea7 	bl	8001162 <read_hum_calibration_data>
 8001414:	4603      	mov	r3, r0
 8001416:	f083 0301 	eor.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <bmp280_init+0x1e0>
        sprintf(buffer, "Failed to read humidity calibration data\n");
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4951      	ldr	r1, [pc, #324]	@ (800156c <bmp280_init+0x300>)
 8001426:	4618      	mov	r0, r3
 8001428:	f005 f806 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe ff3d 	bl	80002b0 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	f107 0110 	add.w	r1, r7, #16
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	4844      	ldr	r0, [pc, #272]	@ (8001554 <bmp280_init+0x2e8>)
 8001444:	f003 ff22 	bl	800528c <HAL_UART_Transmit>


		return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e0cc      	b.n	80015e6 <bmp280_init+0x37a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	795b      	ldrb	r3, [r3, #5]
 8001450:	015b      	lsls	r3, r3, #5
 8001452:	b25a      	sxtb	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	b25b      	sxtb	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b25b      	sxtb	r3, r3
 8001460:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001464:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001468:	461a      	mov	r2, r3
 800146a:	21f5      	movs	r1, #245	@ 0xf5
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fed8 	bl	8001222 <write_register8>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <bmp280_init+0x238>
        sprintf(buffer, "Failed to write config register\n");
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	493c      	ldr	r1, [pc, #240]	@ (8001570 <bmp280_init+0x304>)
 800147e:	4618      	mov	r0, r3
 8001480:	f004 ffda 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ff11 	bl	80002b0 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	f107 0110 	add.w	r1, r7, #16
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	482e      	ldr	r0, [pc, #184]	@ (8001554 <bmp280_init+0x2e8>)
 800149c:	f003 fef6 	bl	800528c <HAL_UART_Transmit>


		return false;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e0a0      	b.n	80015e6 <bmp280_init+0x37a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d116      	bne.n	80014da <bmp280_init+0x26e>
        sprintf(buffer, "Setting forced mode\n");
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4930      	ldr	r1, [pc, #192]	@ (8001574 <bmp280_init+0x308>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f004 ffc0 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fef7 	bl	80002b0 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f107 0110 	add.w	r1, r7, #16
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	4821      	ldr	r0, [pc, #132]	@ (8001554 <bmp280_init+0x2e8>)
 80014d0:	f003 fedc 	bl	800528c <HAL_UART_Transmit>


		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	if (dev->id == BME280_CHIP_ID) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001502:	2b60      	cmp	r3, #96	@ 0x60
 8001504:	d13a      	bne.n	800157c <bmp280_init+0x310>
        sprintf(buffer, "Configuring humidity oversampling\n");
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	491b      	ldr	r1, [pc, #108]	@ (8001578 <bmp280_init+0x30c>)
 800150c:	4618      	mov	r0, r3
 800150e:	f004 ff93 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe feca 	bl	80002b0 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f107 0110 	add.w	r1, r7, #16
 8001524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001528:	480a      	ldr	r0, [pc, #40]	@ (8001554 <bmp280_init+0x2e8>)
 800152a:	f003 feaf 	bl	800528c <HAL_UART_Transmit>


		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001536:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800153a:	461a      	mov	r2, r3
 800153c:	21f2      	movs	r1, #242	@ 0xf2
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fe6f 	bl	8001222 <write_register8>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d018      	beq.n	800157c <bmp280_init+0x310>
			return false;
 800154a:	2300      	movs	r3, #0
 800154c:	e04b      	b.n	80015e6 <bmp280_init+0x37a>
 800154e:	bf00      	nop
 8001550:	080086a8 	.word	0x080086a8
 8001554:	200003f8 	.word	0x200003f8
 8001558:	080086bc 	.word	0x080086bc
 800155c:	080086d4 	.word	0x080086d4
 8001560:	080086f0 	.word	0x080086f0
 8001564:	0800870c 	.word	0x0800870c
 8001568:	08008724 	.word	0x08008724
 800156c:	08008748 	.word	0x08008748
 8001570:	08008774 	.word	0x08008774
 8001574:	08008798 	.word	0x08008798
 8001578:	080087b0 	.word	0x080087b0
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800157c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001580:	461a      	mov	r2, r3
 8001582:	21f4      	movs	r1, #244	@ 0xf4
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fe4c 	bl	8001222 <write_register8>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d015      	beq.n	80015bc <bmp280_init+0x350>
        sprintf(buffer, "BMP280_REG_CTRL something something\n");
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4916      	ldr	r1, [pc, #88]	@ (80015f0 <bmp280_init+0x384>)
 8001596:	4618      	mov	r0, r3
 8001598:	f004 ff4e 	bl	8006438 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fe85 	bl	80002b0 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f107 0110 	add.w	r1, r7, #16
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	4810      	ldr	r0, [pc, #64]	@ (80015f4 <bmp280_init+0x388>)
 80015b4:	f003 fe6a 	bl	800528c <HAL_UART_Transmit>


		return false;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e014      	b.n	80015e6 <bmp280_init+0x37a>
	}
    sprintf(buffer, "before returning true\n");
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <bmp280_init+0x38c>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 ff38 	bl	8006438 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fe6f 	bl	80002b0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f107 0110 	add.w	r1, r7, #16
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <bmp280_init+0x388>)
 80015e0:	f003 fe54 	bl	800528c <HAL_UART_Transmit>

	return true;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3748      	adds	r7, #72	@ 0x48
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	080087d4 	.word	0x080087d4
 80015f4:	200003f8 	.word	0x200003f8
 80015f8:	080087fc 	.word	0x080087fc

080015fc <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	10da      	asrs	r2, r3, #3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800161e:	12db      	asrs	r3, r3, #11
 8001620:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	111b      	asrs	r3, r3, #4
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	8812      	ldrh	r2, [r2, #0]
 800162a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	1112      	asrs	r2, r2, #4
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	8809      	ldrh	r1, [r1, #0]
 8001634:	1a52      	subs	r2, r2, r1
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001642:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001646:	139b      	asrs	r3, r3, #14
 8001648:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	441a      	add	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3380      	adds	r3, #128	@ 0x80
 8001660:	121b      	asrs	r3, r3, #8
}
 8001662:	4618      	mov	r0, r3
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800166e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001672:	b0cc      	sub	sp, #304	@ 0x130
 8001674:	af00      	add	r7, sp, #0
 8001676:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800167a:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800167e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001686:	17da      	asrs	r2, r3, #31
 8001688:	461c      	mov	r4, r3
 800168a:	4615      	mov	r5, r2
 800168c:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001690:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001694:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001698:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800169c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016a0:	fb03 f102 	mul.w	r1, r3, r2
 80016a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	18ca      	adds	r2, r1, r3
 80016b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016b6:	fba3 8903 	umull	r8, r9, r3, r3
 80016ba:	eb02 0309 	add.w	r3, r2, r9
 80016be:	4699      	mov	r9, r3
 80016c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	17da      	asrs	r2, r3, #31
 80016cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80016d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80016d4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016d8:	4603      	mov	r3, r0
 80016da:	fb03 f209 	mul.w	r2, r3, r9
 80016de:	460b      	mov	r3, r1
 80016e0:	fb08 f303 	mul.w	r3, r8, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	4602      	mov	r2, r0
 80016e8:	fba8 1202 	umull	r1, r2, r8, r2
 80016ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80016f0:	460a      	mov	r2, r1
 80016f2:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80016f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80016fa:	4413      	add	r3, r2
 80016fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001700:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001704:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001708:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800170c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001710:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001714:	b21b      	sxth	r3, r3
 8001716:	17da      	asrs	r2, r3, #31
 8001718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800171c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001720:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001724:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001728:	462a      	mov	r2, r5
 800172a:	fb02 f203 	mul.w	r2, r2, r3
 800172e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001732:	4621      	mov	r1, r4
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	441a      	add	r2, r3
 800173a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800173e:	4621      	mov	r1, r4
 8001740:	fba3 1301 	umull	r1, r3, r3, r1
 8001744:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001748:	460b      	mov	r3, r1
 800174a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800174e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001752:	18d3      	adds	r3, r2, r3
 8001754:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001764:	462b      	mov	r3, r5
 8001766:	0459      	lsls	r1, r3, #17
 8001768:	4623      	mov	r3, r4
 800176a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800176e:	4623      	mov	r3, r4
 8001770:	0458      	lsls	r0, r3, #17
 8001772:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001776:	1814      	adds	r4, r2, r0
 8001778:	643c      	str	r4, [r7, #64]	@ 0x40
 800177a:	414b      	adcs	r3, r1
 800177c:	647b      	str	r3, [r7, #68]	@ 0x44
 800177e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001782:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800178a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800178e:	b21b      	sxth	r3, r3
 8001790:	17da      	asrs	r2, r3, #31
 8001792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001796:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017a6:	00d9      	lsls	r1, r3, #3
 80017a8:	2000      	movs	r0, #0
 80017aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017ae:	1814      	adds	r4, r2, r0
 80017b0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80017b2:	414b      	adcs	r3, r1
 80017b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017b6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80017ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017be:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017c6:	fb03 f102 	mul.w	r1, r3, r2
 80017ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	18ca      	adds	r2, r1, r3
 80017d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017dc:	fba3 1303 	umull	r1, r3, r3, r3
 80017e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017e4:	460b      	mov	r3, r1
 80017e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80017ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017ee:	18d3      	adds	r3, r2, r3
 80017f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	17da      	asrs	r2, r3, #31
 8001800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001804:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001808:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800180c:	462b      	mov	r3, r5
 800180e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001812:	4642      	mov	r2, r8
 8001814:	fb02 f203 	mul.w	r2, r2, r3
 8001818:	464b      	mov	r3, r9
 800181a:	4621      	mov	r1, r4
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	4622      	mov	r2, r4
 8001824:	4641      	mov	r1, r8
 8001826:	fba2 1201 	umull	r1, r2, r2, r1
 800182a:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800182e:	460a      	mov	r2, r1
 8001830:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001834:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001838:	4413      	add	r3, r2
 800183a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800184a:	4623      	mov	r3, r4
 800184c:	0a18      	lsrs	r0, r3, #8
 800184e:	462b      	mov	r3, r5
 8001850:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001854:	462b      	mov	r3, r5
 8001856:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800185c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001860:	b21b      	sxth	r3, r3
 8001862:	17da      	asrs	r2, r3, #31
 8001864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001868:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800186c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001870:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001874:	464a      	mov	r2, r9
 8001876:	fb02 f203 	mul.w	r2, r2, r3
 800187a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800187e:	4644      	mov	r4, r8
 8001880:	fb04 f303 	mul.w	r3, r4, r3
 8001884:	441a      	add	r2, r3
 8001886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800188a:	4644      	mov	r4, r8
 800188c:	fba3 4304 	umull	r4, r3, r3, r4
 8001890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001894:	4623      	mov	r3, r4
 8001896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800189a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800189e:	18d3      	adds	r3, r2, r3
 80018a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80018b0:	464c      	mov	r4, r9
 80018b2:	0323      	lsls	r3, r4, #12
 80018b4:	4644      	mov	r4, r8
 80018b6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018ba:	4644      	mov	r4, r8
 80018bc:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80018be:	1884      	adds	r4, r0, r2
 80018c0:	633c      	str	r4, [r7, #48]	@ 0x30
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80018cc:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80018d0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018d4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80018d8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80018dc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80018e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018e4:	88db      	ldrh	r3, [r3, #6]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2200      	movs	r2, #0
 80018ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018ee:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018f6:	462b      	mov	r3, r5
 80018f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80018fc:	4642      	mov	r2, r8
 80018fe:	fb02 f203 	mul.w	r2, r2, r3
 8001902:	464b      	mov	r3, r9
 8001904:	4621      	mov	r1, r4
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	4622      	mov	r2, r4
 800190e:	4641      	mov	r1, r8
 8001910:	fba2 1201 	umull	r1, r2, r2, r1
 8001914:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001918:	460a      	mov	r2, r1
 800191a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800191e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001922:	4413      	add	r3, r2
 8001924:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001934:	4629      	mov	r1, r5
 8001936:	104a      	asrs	r2, r1, #1
 8001938:	4629      	mov	r1, r5
 800193a:	17cb      	asrs	r3, r1, #31
 800193c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001940:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001944:	4313      	orrs	r3, r2
 8001946:	d101      	bne.n	800194c <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001948:	2300      	movs	r3, #0
 800194a:	e148      	b.n	8001bde <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800194c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001950:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001954:	17da      	asrs	r2, r3, #31
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800195a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800195e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001962:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800196c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001970:	07db      	lsls	r3, r3, #31
 8001972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001976:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800197a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800197e:	4621      	mov	r1, r4
 8001980:	1a89      	subs	r1, r1, r2
 8001982:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001984:	4629      	mov	r1, r5
 8001986:	eb61 0303 	sbc.w	r3, r1, r3
 800198a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800198c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001990:	4622      	mov	r2, r4
 8001992:	462b      	mov	r3, r5
 8001994:	1891      	adds	r1, r2, r2
 8001996:	6239      	str	r1, [r7, #32]
 8001998:	415b      	adcs	r3, r3
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
 800199c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a0:	4621      	mov	r1, r4
 80019a2:	1851      	adds	r1, r2, r1
 80019a4:	61b9      	str	r1, [r7, #24]
 80019a6:	4629      	mov	r1, r5
 80019a8:	414b      	adcs	r3, r1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019b8:	4649      	mov	r1, r9
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	4641      	mov	r1, r8
 80019be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c2:	4641      	mov	r1, r8
 80019c4:	018a      	lsls	r2, r1, #6
 80019c6:	4641      	mov	r1, r8
 80019c8:	1889      	adds	r1, r1, r2
 80019ca:	6139      	str	r1, [r7, #16]
 80019cc:	4649      	mov	r1, r9
 80019ce:	eb43 0101 	adc.w	r1, r3, r1
 80019d2:	6179      	str	r1, [r7, #20]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019e0:	4649      	mov	r1, r9
 80019e2:	008b      	lsls	r3, r1, #2
 80019e4:	4641      	mov	r1, r8
 80019e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019ea:	4641      	mov	r1, r8
 80019ec:	008a      	lsls	r2, r1, #2
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	4622      	mov	r2, r4
 80019f6:	189b      	adds	r3, r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	460b      	mov	r3, r1
 80019fc:	462a      	mov	r2, r5
 80019fe:	eb42 0303 	adc.w	r3, r2, r3
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a10:	4649      	mov	r1, r9
 8001a12:	008b      	lsls	r3, r1, #2
 8001a14:	4641      	mov	r1, r8
 8001a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	008a      	lsls	r2, r1, #2
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	4622      	mov	r2, r4
 8001a26:	189b      	adds	r3, r3, r2
 8001a28:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	eb42 0303 	adc.w	r3, r2, r3
 8001a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a34:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a38:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a3c:	f7ff f8d4 	bl	8000be8 <__aeabi_ldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a4c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	17da      	asrs	r2, r3, #31
 8001a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a58:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0b50      	lsrs	r0, r2, #13
 8001a66:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a6a:	1359      	asrs	r1, r3, #13
 8001a6c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a70:	462b      	mov	r3, r5
 8001a72:	fb00 f203 	mul.w	r2, r0, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	fb03 f301 	mul.w	r3, r3, r1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4622      	mov	r2, r4
 8001a80:	fba2 1200 	umull	r1, r2, r2, r0
 8001a84:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a88:	460a      	mov	r2, r1
 8001a8a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a92:	4413      	add	r3, r2
 8001a94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0b50      	lsrs	r0, r2, #13
 8001aa6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001aaa:	1359      	asrs	r1, r3, #13
 8001aac:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	fb00 f203 	mul.w	r2, r0, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	fb03 f301 	mul.w	r3, r3, r1
 8001abc:	4413      	add	r3, r2
 8001abe:	4622      	mov	r2, r4
 8001ac0:	fba2 1200 	umull	r1, r2, r2, r0
 8001ac4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ac8:	460a      	mov	r2, r1
 8001aca:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001ace:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	0e4a      	lsrs	r2, r1, #25
 8001ae8:	4629      	mov	r1, r5
 8001aea:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001aee:	4629      	mov	r1, r5
 8001af0:	164b      	asrs	r3, r1, #25
 8001af2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001afa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	17da      	asrs	r2, r3, #31
 8001b02:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b04:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b06:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b0a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b0e:	462a      	mov	r2, r5
 8001b10:	fb02 f203 	mul.w	r2, r2, r3
 8001b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b18:	4621      	mov	r1, r4
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b24:	4621      	mov	r1, r4
 8001b26:	fba2 1201 	umull	r1, r2, r2, r1
 8001b2a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b2e:	460a      	mov	r2, r1
 8001b30:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b34:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b38:	4413      	add	r3, r2
 8001b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	0cca      	lsrs	r2, r1, #19
 8001b4e:	4629      	mov	r1, r5
 8001b50:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b54:	4629      	mov	r1, r5
 8001b56:	14cb      	asrs	r3, r1, #19
 8001b58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001b5c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b60:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b64:	1884      	adds	r4, r0, r2
 8001b66:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001b68:	eb41 0303 	adc.w	r3, r1, r3
 8001b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b6e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b72:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b76:	4621      	mov	r1, r4
 8001b78:	1889      	adds	r1, r1, r2
 8001b7a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb43 0101 	adc.w	r1, r3, r1
 8001b82:	6579      	str	r1, [r7, #84]	@ 0x54
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b90:	4623      	mov	r3, r4
 8001b92:	0a18      	lsrs	r0, r3, #8
 8001b94:	462b      	mov	r3, r5
 8001b96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	1219      	asrs	r1, r3, #8
 8001b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ba2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	17da      	asrs	r2, r3, #31
 8001baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001bba:	464c      	mov	r4, r9
 8001bbc:	0123      	lsls	r3, r4, #4
 8001bbe:	4644      	mov	r4, r8
 8001bc0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bc4:	4644      	mov	r4, r8
 8001bc6:	0122      	lsls	r2, r4, #4
 8001bc8:	1884      	adds	r4, r0, r2
 8001bca:	603c      	str	r4, [r7, #0]
 8001bcc:	eb41 0303 	adc.w	r3, r1, r3
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001bd6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001bda:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001bea <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001bfc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	039a      	lsls	r2, r3, #14
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c08:	051b      	lsls	r3, r3, #20
 8001c0a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c12:	4619      	mov	r1, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c20:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001c28:	4611      	mov	r1, r2
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	fb01 f202 	mul.w	r2, r1, r2
 8001c30:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	7f09      	ldrb	r1, [r1, #28]
 8001c36:	4608      	mov	r0, r1
 8001c38:	6979      	ldr	r1, [r7, #20]
 8001c3a:	fb00 f101 	mul.w	r1, r0, r1
 8001c3e:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c40:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c44:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c48:	1292      	asrs	r2, r2, #10
 8001c4a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c54:	fb01 f202 	mul.w	r2, r1, r2
 8001c58:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c5c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	13db      	asrs	r3, r3, #15
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	13d2      	asrs	r2, r2, #15
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	7e12      	ldrb	r2, [r2, #24]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c88:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001c90:	bfa8      	it	ge
 8001c92:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001c96:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	131b      	asrs	r3, r3, #12
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	@ 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cbc:	2b60      	cmp	r3, #96	@ 0x60
 8001cbe:	d007      	beq.n	8001cd0 <bmp280_read_fixed+0x28>
		if (humidity)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <bmp280_read_fixed+0x32>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	e000      	b.n	8001cdc <bmp280_read_fixed+0x34>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f107 0218 	add.w	r2, r7, #24
 8001ce6:	21f7      	movs	r1, #247	@ 0xf7
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff f990 	bl	800100e <read_data>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <bmp280_read_fixed+0x50>
		return false;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e038      	b.n	8001d6a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001cf8:	7e3b      	ldrb	r3, [r7, #24]
 8001cfa:	031a      	lsls	r2, r3, #12
 8001cfc:	7e7b      	ldrb	r3, [r7, #25]
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4313      	orrs	r3, r2
 8001d02:	7eba      	ldrb	r2, [r7, #26]
 8001d04:	0912      	lsrs	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001d0c:	7efb      	ldrb	r3, [r7, #27]
 8001d0e:	031a      	lsls	r2, r3, #12
 8001d10:	7f3b      	ldrb	r3, [r7, #28]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4313      	orrs	r3, r2
 8001d16:	7f7a      	ldrb	r2, [r7, #29]
 8001d18:	0912      	lsrs	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	461a      	mov	r2, r3
 8001d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff fc67 	bl	80015fc <compensate_temperature>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	461a      	mov	r2, r3
 8001d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff fc97 	bl	800166e <compensate_pressure>
 8001d40:	4602      	mov	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00d      	beq.n	8001d68 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001d4c:	7fbb      	ldrb	r3, [r7, #30]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	7ffa      	ldrb	r2, [r7, #31]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6a39      	ldr	r1, [r7, #32]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff ff44 	bl	8001bea <compensate_humidity>
 8001d62:	4602      	mov	r2, r0
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3730      	adds	r7, #48	@ 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <bmp280_read_float+0x1a>
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	e000      	b.n	8001d90 <bmp280_read_float+0x1c>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f107 0218 	add.w	r2, r7, #24
 8001d94:	f107 011c 	add.w	r1, r7, #28
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff ff85 	bl	8001ca8 <bmp280_read_fixed>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d028      	beq.n	8001df6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dae:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e00 <bmp280_read_float+0x8c>
 8001db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dc6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001e04 <bmp280_read_float+0x90>
 8001dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001e08 <bmp280_read_float+0x94>
 8001de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <bmp280_read_float+0x84>
	}

	return false;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	42c80000 	.word	0x42c80000
 8001e04:	43800000 	.word	0x43800000
 8001e08:	44800000 	.word	0x44800000

08001e0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <MX_GPIO_Init+0xd4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001e98:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <MX_GPIO_Init+0xd8>)
 8001e9a:	f001 fa01 	bl	80032a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ea4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <MX_GPIO_Init+0xdc>)
 8001eb6:	f001 f85f 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001eba:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <MX_GPIO_Init+0xd8>)
 8001ed4:	f001 f850 	bl	8002f78 <HAL_GPIO_Init>

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020800 	.word	0x40020800

08001eec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001ef2:	4a13      	ldr	r2, [pc, #76]	@ (8001f40 <MX_I2C1_Init+0x54>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <MX_I2C1_Init+0x58>)
 8001efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_I2C1_Init+0x50>)
 8001f2a:	f001 f9d3 	bl	80032d4 <HAL_I2C_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f34:	f000 fcd2 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000200 	.word	0x20000200
 8001f40:	40005400 	.word	0x40005400
 8001f44:	000186a0 	.word	0x000186a0

08001f48 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f4e:	4a13      	ldr	r2, [pc, #76]	@ (8001f9c <MX_I2C2_Init+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f54:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <MX_I2C2_Init+0x58>)
 8001f56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_I2C2_Init+0x50>)
 8001f86:	f001 f9a5 	bl	80032d4 <HAL_I2C_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f90:	f000 fca4 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000254 	.word	0x20000254
 8001f9c:	40005800 	.word	0x40005800
 8001fa0:	000186a0 	.word	0x000186a0

08001fa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	@ (80020cc <HAL_I2C_MspInit+0x128>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12d      	bne.n	8002022 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a40      	ldr	r2, [pc, #256]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4835      	ldr	r0, [pc, #212]	@ (80020d4 <HAL_I2C_MspInit+0x130>)
 8002000:	f000 ffba 	bl	8002f78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	4b31      	ldr	r3, [pc, #196]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a30      	ldr	r2, [pc, #192]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800200e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002020:	e050      	b.n	80020c4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2c      	ldr	r2, [pc, #176]	@ (80020d8 <HAL_I2C_MspInit+0x134>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d14b      	bne.n	80020c4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	6313      	str	r3, [r2, #48]	@ 0x30
 800203c:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a1f      	ldr	r2, [pc, #124]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002064:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206a:	2312      	movs	r3, #18
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002076:	2304      	movs	r3, #4
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4814      	ldr	r0, [pc, #80]	@ (80020d4 <HAL_I2C_MspInit+0x130>)
 8002082:	f000 ff79 	bl	8002f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208c:	2312      	movs	r3, #18
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002098:	2304      	movs	r3, #4
 800209a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	480e      	ldr	r0, [pc, #56]	@ (80020dc <HAL_I2C_MspInit+0x138>)
 80020a4:	f000 ff68 	bl	8002f78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_I2C_MspInit+0x12c>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40005400 	.word	0x40005400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40005800 	.word	0x40005800
 80020dc:	40020800 	.word	0x40020800

080020e0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80020ea:	4a38      	ldr	r2, [pc, #224]	@ (80021cc <HD44780_Init+0xec>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80020f0:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <HD44780_Init+0xf0>)
 80020f2:	2208      	movs	r2, #8
 80020f4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80020f6:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HD44780_Init+0xf4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80020fc:	4b33      	ldr	r3, [pc, #204]	@ (80021cc <HD44780_Init+0xec>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d907      	bls.n	8002114 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002104:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HD44780_Init+0xf4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HD44780_Init+0xf4>)
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e006      	b.n	8002122 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002114:	4b2f      	ldr	r3, [pc, #188]	@ (80021d4 <HD44780_Init+0xf4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HD44780_Init+0xf4>)
 8002120:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8002122:	f000 f985 	bl	8002430 <DelayInit>
  HAL_Delay(50);
 8002126:	2032      	movs	r0, #50	@ 0x32
 8002128:	f000 fe1c 	bl	8002d64 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800212c:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HD44780_Init+0xf0>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f943 	bl	80023bc <ExpanderWrite>
  HAL_Delay(1000);
 8002136:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800213a:	f000 fe13 	bl	8002d64 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800213e:	2030      	movs	r0, #48	@ 0x30
 8002140:	f000 f92b 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002144:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002148:	f000 f99c 	bl	8002484 <DelayUS>

  Write4Bits(0x03 << 4);
 800214c:	2030      	movs	r0, #48	@ 0x30
 800214e:	f000 f924 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002152:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002156:	f000 f995 	bl	8002484 <DelayUS>

  Write4Bits(0x03 << 4);
 800215a:	2030      	movs	r0, #48	@ 0x30
 800215c:	f000 f91d 	bl	800239a <Write4Bits>
  DelayUS(4500);
 8002160:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002164:	f000 f98e 	bl	8002484 <DelayUS>

  Write4Bits(0x02 << 4);
 8002168:	2020      	movs	r0, #32
 800216a:	f000 f916 	bl	800239a <Write4Bits>
  DelayUS(100);
 800216e:	2064      	movs	r0, #100	@ 0x64
 8002170:	f000 f988 	bl	8002484 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002174:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <HD44780_Init+0xf4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f8ce 	bl	8002320 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HD44780_Init+0xf8>)
 8002186:	2204      	movs	r2, #4
 8002188:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800218a:	f000 f875 	bl	8002278 <HD44780_Display>
  HD44780_Clear();
 800218e:	f000 f82b 	bl	80021e8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HD44780_Init+0xfc>)
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <HD44780_Init+0xfc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f8bc 	bl	8002320 <SendCommand>
  DelayUS(4500);
 80021a8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80021ac:	f000 f96a 	bl	8002484 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80021b0:	490b      	ldr	r1, [pc, #44]	@ (80021e0 <HD44780_Init+0x100>)
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f876 	bl	80022a4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80021b8:	490a      	ldr	r1, [pc, #40]	@ (80021e4 <HD44780_Init+0x104>)
 80021ba:	2001      	movs	r0, #1
 80021bc:	f000 f872 	bl	80022a4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80021c0:	f000 f81d 	bl	80021fe <HD44780_Home>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200002ab 	.word	0x200002ab
 80021d0:	200002ac 	.word	0x200002ac
 80021d4:	200002a8 	.word	0x200002a8
 80021d8:	200002a9 	.word	0x200002a9
 80021dc:	200002aa 	.word	0x200002aa
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000008 	.word	0x20000008

080021e8 <HD44780_Clear>:

void HD44780_Clear()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 f897 	bl	8002320 <SendCommand>
  DelayUS(2000);
 80021f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80021f6:	f000 f945 	bl	8002484 <DelayUS>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HD44780_Home>:

void HD44780_Home()
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8002202:	2002      	movs	r0, #2
 8002204:	f000 f88c 	bl	8002320 <SendCommand>
  DelayUS(2000);
 8002208:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800220c:	f000 f93a 	bl	8002484 <DelayUS>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	460a      	mov	r2, r1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HD44780_SetCursor+0x5c>)
 8002226:	f107 0408 	add.w	r4, r7, #8
 800222a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HD44780_SetCursor+0x60>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	79ba      	ldrb	r2, [r7, #6]
 8002236:	429a      	cmp	r2, r3
 8002238:	d303      	bcc.n	8002242 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HD44780_SetCursor+0x60>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	3b01      	subs	r3, #1
 8002240:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3318      	adds	r3, #24
 8002248:	443b      	add	r3, r7
 800224a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	4413      	add	r3, r2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	b25b      	sxtb	r3, r3
 8002258:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800225c:	b25b      	sxtb	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f85d 	bl	8002320 <SendCommand>
}
 8002266:	bf00      	nop
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	bf00      	nop
 8002270:	08008814 	.word	0x08008814
 8002274:	200002ab 	.word	0x200002ab

08002278 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HD44780_Display+0x28>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HD44780_Display+0x28>)
 8002288:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HD44780_Display+0x28>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f843 	bl	8002320 <SendCommand>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200002a9 	.word	0x200002a9

080022a4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f82a 	bl	8002320 <SendCommand>
  for (int i=0; i<8; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e009      	b.n	80022e6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f82e 	bl	800233c <SendChar>
  for (int i=0; i<8; i++)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b07      	cmp	r3, #7
 80022ea:	ddf2      	ble.n	80022d2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80022fe:	e006      	b.n	800230e <HD44780_PrintStr+0x18>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f817 	bl	800233c <SendChar>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f4      	bne.n	8002300 <HD44780_PrintStr+0xa>
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f812 	bl	8002358 <Send>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <SendChar>:

static void SendChar(uint8_t ch)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2101      	movs	r1, #1
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f804 	bl	8002358 <Send>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f023 030f 	bic.w	r3, r3, #15
 800236e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	79bb      	ldrb	r3, [r7, #6]
 800237a:	4313      	orrs	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f80b 	bl	800239a <Write4Bits>
  Write4Bits((lownib)|mode);
 8002384:	7bba      	ldrb	r2, [r7, #14]
 8002386:	79bb      	ldrb	r3, [r7, #6]
 8002388:	4313      	orrs	r3, r2
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f804 	bl	800239a <Write4Bits>
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f808 	bl	80023bc <ExpanderWrite>
  PulseEnable(value);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f820 	bl	80023f4 <PulseEnable>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <ExpanderWrite+0x30>)
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80023d2:	f107 020f 	add.w	r2, r7, #15
 80023d6:	230a      	movs	r3, #10
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	214e      	movs	r1, #78	@ 0x4e
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <ExpanderWrite+0x34>)
 80023e0:	f001 f8bc 	bl	800355c <HAL_I2C_Master_Transmit>
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200002ac 	.word	0x200002ac
 80023f0:	20000254 	.word	0x20000254

080023f4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffd8 	bl	80023bc <ExpanderWrite>
  DelayUS(20);
 800240c:	2014      	movs	r0, #20
 800240e:	f000 f839 	bl	8002484 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ffce 	bl	80023bc <ExpanderWrite>
  DelayUS(20);
 8002420:	2014      	movs	r0, #20
 8002422:	f000 f82f 	bl	8002484 <DelayUS>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <DelayInit>:

static void DelayInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <DelayInit+0x4c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a10      	ldr	r2, [pc, #64]	@ (800247c <DelayInit+0x4c>)
 800243a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800243e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002440:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <DelayInit+0x4c>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <DelayInit+0x4c>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800244a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <DelayInit+0x50>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <DelayInit+0x50>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <DelayInit+0x50>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a08      	ldr	r2, [pc, #32]	@ (8002480 <DelayInit+0x50>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <DelayInit+0x50>)
 8002466:	2200      	movs	r2, #0
 8002468:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800246a:	bf00      	nop
  __ASM volatile ("NOP");
 800246c:	bf00      	nop
  __ASM volatile ("NOP");
 800246e:	bf00      	nop
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000edf0 	.word	0xe000edf0
 8002480:	e0001000 	.word	0xe0001000

08002484 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <DelayUS+0x44>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0e      	ldr	r2, [pc, #56]	@ (80024cc <DelayUS+0x48>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9a      	lsrs	r2, r3, #18
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <DelayUS+0x4c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <DelayUS+0x4c>)
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f6      	bhi.n	80024a6 <DelayUS+0x22>
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000010 	.word	0x20000010
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	e0001000 	.word	0xe0001000

080024d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024da:	f000 fbd1 	bl	8002c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024de:	f000 f98f 	bl	8002800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e2:	f7ff fc93 	bl	8001e0c <MX_GPIO_Init>
  MX_I2C1_Init();
 80024e6:	f7ff fd01 	bl	8001eec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80024ea:	f000 fb2d 	bl	8002b48 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80024ee:	f7ff fd2b 	bl	8001f48 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7ff fdf4 	bl	80020e0 <HD44780_Init>
  HD44780_Clear();
 80024f8:	f7ff fe76 	bl	80021e8 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 80024fc:	2100      	movs	r1, #0
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fe88 	bl	8002214 <HD44780_SetCursor>

  bmp280_init_default_params(&bmp280.params);
 8002504:	48a7      	ldr	r0, [pc, #668]	@ (80027a4 <main+0x2d0>)
 8002506:	f7fe fd37 	bl	8000f78 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800250a:	4ba7      	ldr	r3, [pc, #668]	@ (80027a8 <main+0x2d4>)
 800250c:	2276      	movs	r2, #118	@ 0x76
 800250e:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8002510:	4ba5      	ldr	r3, [pc, #660]	@ (80027a8 <main+0x2d4>)
 8002512:	4aa6      	ldr	r2, [pc, #664]	@ (80027ac <main+0x2d8>)
 8002514:	629a      	str	r2, [r3, #40]	@ 0x28

  while (!bmp280_init(&bmp280, &bmp280.params))
 8002516:	e013      	b.n	8002540 <main+0x6c>
  {
      size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8002518:	49a5      	ldr	r1, [pc, #660]	@ (80027b0 <main+0x2dc>)
 800251a:	48a6      	ldr	r0, [pc, #664]	@ (80027b4 <main+0x2e0>)
 800251c:	f003 ff8c 	bl	8006438 <siprintf>
 8002520:	4603      	mov	r3, r0
 8002522:	b29a      	uxth	r2, r3
 8002524:	4ba4      	ldr	r3, [pc, #656]	@ (80027b8 <main+0x2e4>)
 8002526:	801a      	strh	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002528:	4ba3      	ldr	r3, [pc, #652]	@ (80027b8 <main+0x2e4>)
 800252a:	881a      	ldrh	r2, [r3, #0]
 800252c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002530:	49a0      	ldr	r1, [pc, #640]	@ (80027b4 <main+0x2e0>)
 8002532:	48a2      	ldr	r0, [pc, #648]	@ (80027bc <main+0x2e8>)
 8002534:	f002 feaa 	bl	800528c <HAL_UART_Transmit>
      HAL_Delay(2000);
 8002538:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800253c:	f000 fc12 	bl	8002d64 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params))
 8002540:	4998      	ldr	r1, [pc, #608]	@ (80027a4 <main+0x2d0>)
 8002542:	4899      	ldr	r0, [pc, #612]	@ (80027a8 <main+0x2d4>)
 8002544:	f7fe fe92 	bl	800126c <bmp280_init>
 8002548:	4603      	mov	r3, r0
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e1      	bne.n	8002518 <main+0x44>
  }

  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8002554:	4b94      	ldr	r3, [pc, #592]	@ (80027a8 <main+0x2d4>)
 8002556:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800255a:	2b60      	cmp	r3, #96	@ 0x60
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	77fb      	strb	r3, [r7, #31]
  size = sprintf((char *)Data, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 8002564:	7ffb      	ldrb	r3, [r7, #31]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <main+0x9a>
 800256a:	4b95      	ldr	r3, [pc, #596]	@ (80027c0 <main+0x2ec>)
 800256c:	e000      	b.n	8002570 <main+0x9c>
 800256e:	4b95      	ldr	r3, [pc, #596]	@ (80027c4 <main+0x2f0>)
 8002570:	461a      	mov	r2, r3
 8002572:	4995      	ldr	r1, [pc, #596]	@ (80027c8 <main+0x2f4>)
 8002574:	488f      	ldr	r0, [pc, #572]	@ (80027b4 <main+0x2e0>)
 8002576:	f003 ff5f 	bl	8006438 <siprintf>
 800257a:	4603      	mov	r3, r0
 800257c:	b29a      	uxth	r2, r3
 800257e:	4b8e      	ldr	r3, [pc, #568]	@ (80027b8 <main+0x2e4>)
 8002580:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002582:	4b8d      	ldr	r3, [pc, #564]	@ (80027b8 <main+0x2e4>)
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258a:	498a      	ldr	r1, [pc, #552]	@ (80027b4 <main+0x2e0>)
 800258c:	488b      	ldr	r0, [pc, #556]	@ (80027bc <main+0x2e8>)
 800258e:	f002 fe7d 	bl	800528c <HAL_UART_Transmit>

  // Initialize the GPIO pin for the fan (PA8)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
 80025a0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable GPIOA clock
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b89      	ldr	r3, [pc, #548]	@ (80027cc <main+0x2f8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	4a88      	ldr	r2, [pc, #544]	@ (80027cc <main+0x2f8>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b2:	4b86      	ldr	r3, [pc, #536]	@ (80027cc <main+0x2f8>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]

  // PA8 configuration
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	4619      	mov	r1, r3
 80025d6:	487e      	ldr	r0, [pc, #504]	@ (80027d0 <main+0x2fc>)
 80025d8:	f000 fcce 	bl	8002f78 <HAL_GPIO_Init>

  // PA9 configuration
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	4619      	mov	r1, r3
 80025f4:	4876      	ldr	r0, [pc, #472]	@ (80027d0 <main+0x2fc>)
 80025f6:	f000 fcbf 	bl	8002f78 <HAL_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      /* USER CODE END WHILE */
      HAL_Delay(100);
 80025fa:	2064      	movs	r0, #100	@ 0x64
 80025fc:	f000 fbb2 	bl	8002d64 <HAL_Delay>
      while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8002600:	e013      	b.n	800262a <main+0x156>
          size = sprintf((char *)Data,
 8002602:	4974      	ldr	r1, [pc, #464]	@ (80027d4 <main+0x300>)
 8002604:	486b      	ldr	r0, [pc, #428]	@ (80027b4 <main+0x2e0>)
 8002606:	f003 ff17 	bl	8006438 <siprintf>
 800260a:	4603      	mov	r3, r0
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b6a      	ldr	r3, [pc, #424]	@ (80027b8 <main+0x2e4>)
 8002610:	801a      	strh	r2, [r3, #0]
                  "Temperature/pressure reading failed\r\n");
          HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002612:	4b69      	ldr	r3, [pc, #420]	@ (80027b8 <main+0x2e4>)
 8002614:	881a      	ldrh	r2, [r3, #0]
 8002616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800261a:	4966      	ldr	r1, [pc, #408]	@ (80027b4 <main+0x2e0>)
 800261c:	4867      	ldr	r0, [pc, #412]	@ (80027bc <main+0x2e8>)
 800261e:	f002 fe35 	bl	800528c <HAL_UART_Transmit>
          HAL_Delay(2000);
 8002622:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002626:	f000 fb9d 	bl	8002d64 <HAL_Delay>
      while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800262a:	4b6b      	ldr	r3, [pc, #428]	@ (80027d8 <main+0x304>)
 800262c:	4a6b      	ldr	r2, [pc, #428]	@ (80027dc <main+0x308>)
 800262e:	496c      	ldr	r1, [pc, #432]	@ (80027e0 <main+0x30c>)
 8002630:	485d      	ldr	r0, [pc, #372]	@ (80027a8 <main+0x2d4>)
 8002632:	f7ff fb9f 	bl	8001d74 <bmp280_read_float>
 8002636:	4603      	mov	r3, r0
 8002638:	f083 0301 	eor.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1df      	bne.n	8002602 <main+0x12e>
      }

      size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C",
 8002642:	4b66      	ldr	r3, [pc, #408]	@ (80027dc <main+0x308>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff9e 	bl	8000588 <__aeabi_f2d>
 800264c:	4604      	mov	r4, r0
 800264e:	460d      	mov	r5, r1
 8002650:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <main+0x30c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff97 	bl	8000588 <__aeabi_f2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	e9cd 2300 	strd	r2, r3, [sp]
 8002662:	4622      	mov	r2, r4
 8002664:	462b      	mov	r3, r5
 8002666:	495f      	ldr	r1, [pc, #380]	@ (80027e4 <main+0x310>)
 8002668:	4852      	ldr	r0, [pc, #328]	@ (80027b4 <main+0x2e0>)
 800266a:	f003 fee5 	bl	8006438 <siprintf>
 800266e:	4603      	mov	r3, r0
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b51      	ldr	r3, [pc, #324]	@ (80027b8 <main+0x2e4>)
 8002674:	801a      	strh	r2, [r3, #0]
              pressure, temperature);
      HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002676:	4b50      	ldr	r3, [pc, #320]	@ (80027b8 <main+0x2e4>)
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267e:	494d      	ldr	r1, [pc, #308]	@ (80027b4 <main+0x2e0>)
 8002680:	484e      	ldr	r0, [pc, #312]	@ (80027bc <main+0x2e8>)
 8002682:	f002 fe03 	bl	800528c <HAL_UART_Transmit>

      HD44780_Clear();
 8002686:	f7ff fdaf 	bl	80021e8 <HD44780_Clear>

      HD44780_SetCursor(0, 0);
 800268a:	2100      	movs	r1, #0
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff fdc1 	bl	8002214 <HD44780_SetCursor>
      HD44780_PrintStr("Temp:");
 8002692:	4855      	ldr	r0, [pc, #340]	@ (80027e8 <main+0x314>)
 8002694:	f7ff fe2f 	bl	80022f6 <HD44780_PrintStr>

      HD44780_SetCursor(6, 0);
 8002698:	2100      	movs	r1, #0
 800269a:	2006      	movs	r0, #6
 800269c:	f7ff fdba 	bl	8002214 <HD44780_SetCursor>
      size = sprintf((char *)Data, "%.2f C", temperature);
 80026a0:	4b4f      	ldr	r3, [pc, #316]	@ (80027e0 <main+0x30c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff6f 	bl	8000588 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	494f      	ldr	r1, [pc, #316]	@ (80027ec <main+0x318>)
 80026b0:	4840      	ldr	r0, [pc, #256]	@ (80027b4 <main+0x2e0>)
 80026b2:	f003 fec1 	bl	8006438 <siprintf>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b3f      	ldr	r3, [pc, #252]	@ (80027b8 <main+0x2e4>)
 80026bc:	801a      	strh	r2, [r3, #0]
      HD44780_PrintStr((char *)Data);
 80026be:	483d      	ldr	r0, [pc, #244]	@ (80027b4 <main+0x2e0>)
 80026c0:	f7ff fe19 	bl	80022f6 <HD44780_PrintStr>

      HD44780_SetCursor(0, 1);
 80026c4:	2101      	movs	r1, #1
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff fda4 	bl	8002214 <HD44780_SetCursor>
      HD44780_PrintStr("Humidity:");
 80026cc:	4848      	ldr	r0, [pc, #288]	@ (80027f0 <main+0x31c>)
 80026ce:	f7ff fe12 	bl	80022f6 <HD44780_PrintStr>

      HD44780_SetCursor(10, 1);
 80026d2:	2101      	movs	r1, #1
 80026d4:	200a      	movs	r0, #10
 80026d6:	f7ff fd9d 	bl	8002214 <HD44780_SetCursor>
      size = sprintf((char *)Data, "%.2f%%", humidity);
 80026da:	4b3f      	ldr	r3, [pc, #252]	@ (80027d8 <main+0x304>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd ff52 	bl	8000588 <__aeabi_f2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4942      	ldr	r1, [pc, #264]	@ (80027f4 <main+0x320>)
 80026ea:	4832      	ldr	r0, [pc, #200]	@ (80027b4 <main+0x2e0>)
 80026ec:	f003 fea4 	bl	8006438 <siprintf>
 80026f0:	4603      	mov	r3, r0
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <main+0x2e4>)
 80026f6:	801a      	strh	r2, [r3, #0]
      HD44780_PrintStr((char *)Data);
 80026f8:	482e      	ldr	r0, [pc, #184]	@ (80027b4 <main+0x2e0>)
 80026fa:	f7ff fdfc 	bl	80022f6 <HD44780_PrintStr>

      if (temperature > 30.0f) {
 80026fe:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <main+0x30c>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002710:	dd0c      	ble.n	800272c <main+0x258>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002712:	2201      	movs	r2, #1
 8002714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002718:	482d      	ldr	r0, [pc, #180]	@ (80027d0 <main+0x2fc>)
 800271a:	f000 fdc1 	bl	80032a0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002724:	482a      	ldr	r0, [pc, #168]	@ (80027d0 <main+0x2fc>)
 8002726:	f000 fdbb 	bl	80032a0 <HAL_GPIO_WritePin>
 800272a:	e00b      	b.n	8002744 <main+0x270>
      } else {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800272c:	2200      	movs	r2, #0
 800272e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002732:	4827      	ldr	r0, [pc, #156]	@ (80027d0 <main+0x2fc>)
 8002734:	f000 fdb4 	bl	80032a0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800273e:	4824      	ldr	r0, [pc, #144]	@ (80027d0 <main+0x2fc>)
 8002740:	f000 fdae 	bl	80032a0 <HAL_GPIO_WritePin>

      }

      if (bme280p) {
 8002744:	7ffb      	ldrb	r3, [r7, #31]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d017      	beq.n	800277a <main+0x2a6>
          size = sprintf((char *)Data,", Humidity: %.2f\r\n", humidity);
 800274a:	4b23      	ldr	r3, [pc, #140]	@ (80027d8 <main+0x304>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ff1a 	bl	8000588 <__aeabi_f2d>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4927      	ldr	r1, [pc, #156]	@ (80027f8 <main+0x324>)
 800275a:	4816      	ldr	r0, [pc, #88]	@ (80027b4 <main+0x2e0>)
 800275c:	f003 fe6c 	bl	8006438 <siprintf>
 8002760:	4603      	mov	r3, r0
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <main+0x2e4>)
 8002766:	801a      	strh	r2, [r3, #0]
          HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002768:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <main+0x2e4>)
 800276a:	881a      	ldrh	r2, [r3, #0]
 800276c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002770:	4910      	ldr	r1, [pc, #64]	@ (80027b4 <main+0x2e0>)
 8002772:	4812      	ldr	r0, [pc, #72]	@ (80027bc <main+0x2e8>)
 8002774:	f002 fd8a 	bl	800528c <HAL_UART_Transmit>
 8002778:	e00f      	b.n	800279a <main+0x2c6>
      } else {
          size = sprintf((char *)Data, "\r\n");
 800277a:	4920      	ldr	r1, [pc, #128]	@ (80027fc <main+0x328>)
 800277c:	480d      	ldr	r0, [pc, #52]	@ (80027b4 <main+0x2e0>)
 800277e:	f003 fe5b 	bl	8006438 <siprintf>
 8002782:	4603      	mov	r3, r0
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <main+0x2e4>)
 8002788:	801a      	strh	r2, [r3, #0]
          HAL_UART_Transmit(&huart2, Data, size, 1000);
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <main+0x2e4>)
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002792:	4908      	ldr	r1, [pc, #32]	@ (80027b4 <main+0x2e0>)
 8002794:	4809      	ldr	r0, [pc, #36]	@ (80027bc <main+0x2e8>)
 8002796:	f002 fd79 	bl	800528c <HAL_UART_Transmit>
      }

      HAL_Delay(5000);
 800279a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800279e:	f000 fae1 	bl	8002d64 <HAL_Delay>
      HAL_Delay(100);
 80027a2:	e72a      	b.n	80025fa <main+0x126>
 80027a4:	200002dc 	.word	0x200002dc
 80027a8:	200002b0 	.word	0x200002b0
 80027ac:	20000200 	.word	0x20000200
 80027b0:	08008824 	.word	0x08008824
 80027b4:	200002f4 	.word	0x200002f4
 80027b8:	200002f0 	.word	0x200002f0
 80027bc:	200003f8 	.word	0x200003f8
 80027c0:	08008844 	.word	0x08008844
 80027c4:	0800884c 	.word	0x0800884c
 80027c8:	08008854 	.word	0x08008854
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	08008868 	.word	0x08008868
 80027d8:	200002ec 	.word	0x200002ec
 80027dc:	200002e4 	.word	0x200002e4
 80027e0:	200002e8 	.word	0x200002e8
 80027e4:	08008890 	.word	0x08008890
 80027e8:	080088b8 	.word	0x080088b8
 80027ec:	080088c0 	.word	0x080088c0
 80027f0:	080088c8 	.word	0x080088c8
 80027f4:	080088d4 	.word	0x080088d4
 80027f8:	080088dc 	.word	0x080088dc
 80027fc:	080088f0 	.word	0x080088f0

08002800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b094      	sub	sp, #80	@ 0x50
 8002804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	2234      	movs	r2, #52	@ 0x34
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fe75 	bl	80064fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <SystemClock_Config+0xd4>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	4a29      	ldr	r2, [pc, #164]	@ (80028d4 <SystemClock_Config+0xd4>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002832:	6413      	str	r3, [r2, #64]	@ 0x40
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <SystemClock_Config+0xd4>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4b24      	ldr	r3, [pc, #144]	@ (80028d8 <SystemClock_Config+0xd8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800284c:	4a22      	ldr	r2, [pc, #136]	@ (80028d8 <SystemClock_Config+0xd8>)
 800284e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <SystemClock_Config+0xd8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002860:	2302      	movs	r3, #2
 8002862:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002864:	2301      	movs	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002868:	2310      	movs	r3, #16
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800286c:	2302      	movs	r3, #2
 800286e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002870:	2300      	movs	r3, #0
 8002872:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002874:	2310      	movs	r3, #16
 8002876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002878:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800287c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800287e:	2304      	movs	r3, #4
 8002880:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002882:	2302      	movs	r3, #2
 8002884:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002886:	2302      	movs	r3, #2
 8002888:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fa0e 	bl	8004cb0 <HAL_RCC_OscConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800289a:	f000 f81f 	bl	80028dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289e:	230f      	movs	r3, #15
 80028a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a2:	2302      	movs	r3, #2
 80028a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	2102      	movs	r1, #2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 feae 	bl	800461c <HAL_RCC_ClockConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80028c6:	f000 f809 	bl	80028dc <Error_Handler>
  }
}
 80028ca:	bf00      	nop
 80028cc:	3750      	adds	r7, #80	@ 0x50
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000

080028dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <Error_Handler+0x8>

080028e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	4b10      	ldr	r3, [pc, #64]	@ (8002934 <HAL_MspInit+0x4c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002934 <HAL_MspInit+0x4c>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002934 <HAL_MspInit+0x4c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_MspInit+0x4c>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4a08      	ldr	r2, [pc, #32]	@ (8002934 <HAL_MspInit+0x4c>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	@ 0x40
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_MspInit+0x4c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002926:	2007      	movs	r0, #7
 8002928:	f000 faf2 	bl	8002f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <NMI_Handler+0x4>

08002940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <MemManage_Handler+0x4>

08002950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <BusFault_Handler+0x4>

08002958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <UsageFault_Handler+0x4>

08002960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298e:	f000 f9c9 	bl	8002d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}

08002996 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  return 1;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <_kill>:

int _kill(int pid, int sig)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029b0:	f003 fdf8 	bl	80065a4 <__errno>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2216      	movs	r2, #22
 80029b8:	601a      	str	r2, [r3, #0]
  return -1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_exit>:

void _exit (int status)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029ce:	f04f 31ff 	mov.w	r1, #4294967295
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ffe7 	bl	80029a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <_exit+0x12>

080029dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e00a      	b.n	8002a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ee:	f3af 8000 	nop.w
 80029f2:	4601      	mov	r1, r0
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	60ba      	str	r2, [r7, #8]
 80029fa:	b2ca      	uxtb	r2, r1
 80029fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dbf0      	blt.n	80029ee <_read+0x12>
  }

  return len;
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e009      	b.n	8002a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	60ba      	str	r2, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	dbf1      	blt.n	8002a28 <_write+0x12>
  }
  return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_close>:

int _close(int file)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a76:	605a      	str	r2, [r3, #4]
  return 0;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_isatty>:

int _isatty(int file)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a8e:	2301      	movs	r3, #1
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <_sbrk+0x5c>)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <_sbrk+0x60>)
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002acc:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <_sbrk+0x64>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	@ (8002b20 <_sbrk+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ada:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d207      	bcs.n	8002af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae8:	f003 fd5c 	bl	80065a4 <__errno>
 8002aec:	4603      	mov	r3, r0
 8002aee:	220c      	movs	r2, #12
 8002af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	e009      	b.n	8002b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <_sbrk+0x64>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afe:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <_sbrk+0x64>)
 8002b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20020000 	.word	0x20020000
 8002b18:	00000400 	.word	0x00000400
 8002b1c:	200003f4 	.word	0x200003f4
 8002b20:	20000590 	.word	0x20000590

08002b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <SystemInit+0x20>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2e:	4a05      	ldr	r2, [pc, #20]	@ (8002b44 <SystemInit+0x20>)
 8002b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <MX_USART2_UART_Init+0x50>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <MX_USART2_UART_Init+0x4c>)
 8002b80:	f002 fb34 	bl	80051ec <HAL_UART_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b8a:	f7ff fea7 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200003f8 	.word	0x200003f8
 8002b98:	40004400 	.word	0x40004400

08002b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	@ 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <HAL_UART_MspInit+0x84>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12b      	bne.n	8002c16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <HAL_UART_MspInit+0x88>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a17      	ldr	r2, [pc, #92]	@ (8002c24 <HAL_UART_MspInit+0x88>)
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <HAL_UART_MspInit+0x88>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <HAL_UART_MspInit+0x88>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	4a10      	ldr	r2, [pc, #64]	@ (8002c24 <HAL_UART_MspInit+0x88>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bea:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <HAL_UART_MspInit+0x88>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c06:	2307      	movs	r3, #7
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4805      	ldr	r0, [pc, #20]	@ (8002c28 <HAL_UART_MspInit+0x8c>)
 8002c12:	f000 f9b1 	bl	8002f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c16:	bf00      	nop
 8002c18:	3728      	adds	r7, #40	@ 0x28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40004400 	.word	0x40004400
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000

08002c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8002c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c30:	f7ff ff78 	bl	8002b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c34:	480c      	ldr	r0, [pc, #48]	@ (8002c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c36:	490d      	ldr	r1, [pc, #52]	@ (8002c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c38:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c3c:	e002      	b.n	8002c44 <LoopCopyDataInit>

08002c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c42:	3304      	adds	r3, #4

08002c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c48:	d3f9      	bcc.n	8002c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c50:	e001      	b.n	8002c56 <LoopFillZerobss>

08002c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c54:	3204      	adds	r2, #4

08002c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c58:	d3fb      	bcc.n	8002c52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c5a:	f003 fca9 	bl	80065b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c5e:	f7ff fc39 	bl	80024d4 <main>
  bx  lr    
 8002c62:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8002c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c6c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c70:	08008c90 	.word	0x08008c90
  ldr r2, =_sbss
 8002c74:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002c78:	20000590 	.word	0x20000590

08002c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC_IRQHandler>
	...

08002c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c84:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <HAL_Init+0x40>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc0 <HAL_Init+0x40>)
 8002c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_Init+0x40>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <HAL_Init+0x40>)
 8002c96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <HAL_Init+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <HAL_Init+0x40>)
 8002ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca8:	2003      	movs	r0, #3
 8002caa:	f000 f931 	bl	8002f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f000 f808 	bl	8002cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb4:	f7ff fe18 	bl	80028e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00

08002cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ccc:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <HAL_InitTick+0x54>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <HAL_InitTick+0x58>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f93b 	bl	8002f5e <HAL_SYSTICK_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00e      	b.n	8002d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d80a      	bhi.n	8002d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f000 f911 	bl	8002f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d04:	4a06      	ldr	r2, [pc, #24]	@ (8002d20 <HAL_InitTick+0x5c>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000010 	.word	0x20000010
 8002d1c:	20000018 	.word	0x20000018
 8002d20:	20000014 	.word	0x20000014

08002d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d28:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_IncTick+0x20>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_IncTick+0x24>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	4a04      	ldr	r2, [pc, #16]	@ (8002d48 <HAL_IncTick+0x24>)
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000018 	.word	0x20000018
 8002d48:	20000440 	.word	0x20000440

08002d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_GetTick+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000440 	.word	0x20000440

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff ffee 	bl	8002d4c <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_Delay+0x44>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d8a:	bf00      	nop
 8002d8c:	f7ff ffde 	bl	8002d4c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000018 	.word	0x20000018

08002dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dde:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	60d3      	str	r3, [r2, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df8:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <__NVIC_GetPriorityGrouping+0x18>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0307 	and.w	r3, r3, #7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db0a      	blt.n	8002e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	490c      	ldr	r1, [pc, #48]	@ (8002e5c <__NVIC_SetPriority+0x4c>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	440b      	add	r3, r1
 8002e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e38:	e00a      	b.n	8002e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4908      	ldr	r1, [pc, #32]	@ (8002e60 <__NVIC_SetPriority+0x50>)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	3b04      	subs	r3, #4
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	761a      	strb	r2, [r3, #24]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	@ 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f1c3 0307 	rsb	r3, r3, #7
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	bf28      	it	cs
 8002e82:	2304      	movcs	r3, #4
 8002e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d902      	bls.n	8002e94 <NVIC_EncodePriority+0x30>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3b03      	subs	r3, #3
 8002e92:	e000      	b.n	8002e96 <NVIC_EncodePriority+0x32>
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43d9      	mvns	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	4313      	orrs	r3, r2
         );
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	@ 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002edc:	d301      	bcc.n	8002ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00f      	b.n	8002f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <SysTick_Config+0x40>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eea:	210f      	movs	r1, #15
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f7ff ff8e 	bl	8002e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef4:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <SysTick_Config+0x40>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efa:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <SysTick_Config+0x40>)
 8002efc:	2207      	movs	r2, #7
 8002efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	e000e010 	.word	0xe000e010

08002f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff47 	bl	8002dac <__NVIC_SetPriorityGrouping>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f38:	f7ff ff5c 	bl	8002df4 <__NVIC_GetPriorityGrouping>
 8002f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	6978      	ldr	r0, [r7, #20]
 8002f44:	f7ff ff8e 	bl	8002e64 <NVIC_EncodePriority>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff5d 	bl	8002e10 <__NVIC_SetPriority>
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffb0 	bl	8002ecc <SysTick_Config>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	@ 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	e165      	b.n	8003260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f94:	2201      	movs	r2, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	f040 8154 	bne.w	800325a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d005      	beq.n	8002fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d130      	bne.n	800302c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0201 	and.w	r2, r3, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b03      	cmp	r3, #3
 8003036:	d017      	beq.n	8003068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d123      	bne.n	80030bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3208      	adds	r2, #8
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80ae 	beq.w	800325a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b5d      	ldr	r3, [pc, #372]	@ (8003278 <HAL_GPIO_Init+0x300>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	4a5c      	ldr	r2, [pc, #368]	@ (8003278 <HAL_GPIO_Init+0x300>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800310c:	6453      	str	r3, [r2, #68]	@ 0x44
 800310e:	4b5a      	ldr	r3, [pc, #360]	@ (8003278 <HAL_GPIO_Init+0x300>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311a:	4a58      	ldr	r2, [pc, #352]	@ (800327c <HAL_GPIO_Init+0x304>)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a4f      	ldr	r2, [pc, #316]	@ (8003280 <HAL_GPIO_Init+0x308>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d025      	beq.n	8003192 <HAL_GPIO_Init+0x21a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a4e      	ldr	r2, [pc, #312]	@ (8003284 <HAL_GPIO_Init+0x30c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <HAL_GPIO_Init+0x216>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4d      	ldr	r2, [pc, #308]	@ (8003288 <HAL_GPIO_Init+0x310>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x212>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4c      	ldr	r2, [pc, #304]	@ (800328c <HAL_GPIO_Init+0x314>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x20e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4b      	ldr	r2, [pc, #300]	@ (8003290 <HAL_GPIO_Init+0x318>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x20a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a4a      	ldr	r2, [pc, #296]	@ (8003294 <HAL_GPIO_Init+0x31c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x206>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a49      	ldr	r2, [pc, #292]	@ (8003298 <HAL_GPIO_Init+0x320>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x202>
 8003176:	2306      	movs	r3, #6
 8003178:	e00c      	b.n	8003194 <HAL_GPIO_Init+0x21c>
 800317a:	2307      	movs	r3, #7
 800317c:	e00a      	b.n	8003194 <HAL_GPIO_Init+0x21c>
 800317e:	2305      	movs	r3, #5
 8003180:	e008      	b.n	8003194 <HAL_GPIO_Init+0x21c>
 8003182:	2304      	movs	r3, #4
 8003184:	e006      	b.n	8003194 <HAL_GPIO_Init+0x21c>
 8003186:	2303      	movs	r3, #3
 8003188:	e004      	b.n	8003194 <HAL_GPIO_Init+0x21c>
 800318a:	2302      	movs	r3, #2
 800318c:	e002      	b.n	8003194 <HAL_GPIO_Init+0x21c>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_GPIO_Init+0x21c>
 8003192:	2300      	movs	r3, #0
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	f002 0203 	and.w	r2, r2, #3
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	4093      	lsls	r3, r2
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a4:	4935      	ldr	r1, [pc, #212]	@ (800327c <HAL_GPIO_Init+0x304>)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	3302      	adds	r3, #2
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031b2:	4b3a      	ldr	r3, [pc, #232]	@ (800329c <HAL_GPIO_Init+0x324>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d6:	4a31      	ldr	r2, [pc, #196]	@ (800329c <HAL_GPIO_Init+0x324>)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031dc:	4b2f      	ldr	r3, [pc, #188]	@ (800329c <HAL_GPIO_Init+0x324>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003200:	4a26      	ldr	r2, [pc, #152]	@ (800329c <HAL_GPIO_Init+0x324>)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003206:	4b25      	ldr	r3, [pc, #148]	@ (800329c <HAL_GPIO_Init+0x324>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800322a:	4a1c      	ldr	r2, [pc, #112]	@ (800329c <HAL_GPIO_Init+0x324>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003230:	4b1a      	ldr	r3, [pc, #104]	@ (800329c <HAL_GPIO_Init+0x324>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003254:	4a11      	ldr	r2, [pc, #68]	@ (800329c <HAL_GPIO_Init+0x324>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3301      	adds	r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	f67f ae96 	bls.w	8002f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3724      	adds	r7, #36	@ 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	40013800 	.word	0x40013800
 8003280:	40020000 	.word	0x40020000
 8003284:	40020400 	.word	0x40020400
 8003288:	40020800 	.word	0x40020800
 800328c:	40020c00 	.word	0x40020c00
 8003290:	40021000 	.word	0x40021000
 8003294:	40021400 	.word	0x40021400
 8003298:	40021800 	.word	0x40021800
 800329c:	40013c00 	.word	0x40013c00

080032a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
 80032ac:	4613      	mov	r3, r2
 80032ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b0:	787b      	ldrb	r3, [r7, #1]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032bc:	e003      	b.n	80032c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	041a      	lsls	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	619a      	str	r2, [r3, #24]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e12b      	b.n	800353e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe fe52 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	@ 0x24
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003326:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003336:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003338:	f001 fa62 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 800333c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4a81      	ldr	r2, [pc, #516]	@ (8003548 <HAL_I2C_Init+0x274>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d807      	bhi.n	8003358 <HAL_I2C_Init+0x84>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a80      	ldr	r2, [pc, #512]	@ (800354c <HAL_I2C_Init+0x278>)
 800334c:	4293      	cmp	r3, r2
 800334e:	bf94      	ite	ls
 8003350:	2301      	movls	r3, #1
 8003352:	2300      	movhi	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e006      	b.n	8003366 <HAL_I2C_Init+0x92>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a7d      	ldr	r2, [pc, #500]	@ (8003550 <HAL_I2C_Init+0x27c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	bf94      	ite	ls
 8003360:	2301      	movls	r3, #1
 8003362:	2300      	movhi	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0e7      	b.n	800353e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a78      	ldr	r2, [pc, #480]	@ (8003554 <HAL_I2C_Init+0x280>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0c9b      	lsrs	r3, r3, #18
 8003378:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a6a      	ldr	r2, [pc, #424]	@ (8003548 <HAL_I2C_Init+0x274>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d802      	bhi.n	80033a8 <HAL_I2C_Init+0xd4>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3301      	adds	r3, #1
 80033a6:	e009      	b.n	80033bc <HAL_I2C_Init+0xe8>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	4a69      	ldr	r2, [pc, #420]	@ (8003558 <HAL_I2C_Init+0x284>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	099b      	lsrs	r3, r3, #6
 80033ba:	3301      	adds	r3, #1
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	495c      	ldr	r1, [pc, #368]	@ (8003548 <HAL_I2C_Init+0x274>)
 80033d8:	428b      	cmp	r3, r1
 80033da:	d819      	bhi.n	8003410 <HAL_I2C_Init+0x13c>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e59      	subs	r1, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033f0:	400b      	ands	r3, r1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_I2C_Init+0x138>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e59      	subs	r1, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fbb1 f3f3 	udiv	r3, r1, r3
 8003404:	3301      	adds	r3, #1
 8003406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340a:	e051      	b.n	80034b0 <HAL_I2C_Init+0x1dc>
 800340c:	2304      	movs	r3, #4
 800340e:	e04f      	b.n	80034b0 <HAL_I2C_Init+0x1dc>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d111      	bne.n	800343c <HAL_I2C_Init+0x168>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e58      	subs	r0, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	440b      	add	r3, r1
 8003426:	fbb0 f3f3 	udiv	r3, r0, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e012      	b.n	8003462 <HAL_I2C_Init+0x18e>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	0099      	lsls	r1, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003452:	3301      	adds	r3, #1
 8003454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_Init+0x196>
 8003466:	2301      	movs	r3, #1
 8003468:	e022      	b.n	80034b0 <HAL_I2C_Init+0x1dc>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10e      	bne.n	8003490 <HAL_I2C_Init+0x1bc>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1e58      	subs	r0, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	440b      	add	r3, r1
 8003480:	fbb0 f3f3 	udiv	r3, r0, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800348e:	e00f      	b.n	80034b0 <HAL_I2C_Init+0x1dc>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	0099      	lsls	r1, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	6809      	ldr	r1, [r1, #0]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6911      	ldr	r1, [r2, #16]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68d2      	ldr	r2, [r2, #12]
 80034ea:	4311      	orrs	r1, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	000186a0 	.word	0x000186a0
 800354c:	001e847f 	.word	0x001e847f
 8003550:	003d08ff 	.word	0x003d08ff
 8003554:	431bde83 	.word	0x431bde83
 8003558:	10624dd3 	.word	0x10624dd3

0800355c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	460b      	mov	r3, r1
 800356a:	817b      	strh	r3, [r7, #10]
 800356c:	4613      	mov	r3, r2
 800356e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003570:	f7ff fbec 	bl	8002d4c <HAL_GetTick>
 8003574:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b20      	cmp	r3, #32
 8003580:	f040 80e0 	bne.w	8003744 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2319      	movs	r3, #25
 800358a:	2201      	movs	r2, #1
 800358c:	4970      	ldr	r1, [pc, #448]	@ (8003750 <HAL_I2C_Master_Transmit+0x1f4>)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fe0e 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
 800359c:	e0d3      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_I2C_Master_Transmit+0x50>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0cc      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d007      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2221      	movs	r2, #33	@ 0x21
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2210      	movs	r2, #16
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	893a      	ldrh	r2, [r7, #8]
 8003602:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a50      	ldr	r2, [pc, #320]	@ (8003754 <HAL_I2C_Master_Transmit+0x1f8>)
 8003612:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003614:	8979      	ldrh	r1, [r7, #10]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fbc8 	bl	8003db0 <I2C_MasterRequestWrite>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e08d      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003640:	e066      	b.n	8003710 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	6a39      	ldr	r1, [r7, #32]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fecc 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	2b04      	cmp	r3, #4
 8003658:	d107      	bne.n	800366a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003668:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06b      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d11b      	bne.n	80036e4 <HAL_I2C_Master_Transmit+0x188>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d017      	beq.n	80036e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	6a39      	ldr	r1, [r7, #32]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fec3 	bl	8004474 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e01a      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	d194      	bne.n	8003642 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	00100002 	.word	0x00100002
 8003754:	ffff0000 	.word	0xffff0000

08003758 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	817b      	strh	r3, [r7, #10]
 800376a:	460b      	mov	r3, r1
 800376c:	813b      	strh	r3, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003772:	f7ff faeb 	bl	8002d4c <HAL_GetTick>
 8003776:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b20      	cmp	r3, #32
 8003782:	f040 80d9 	bne.w	8003938 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2319      	movs	r3, #25
 800378c:	2201      	movs	r2, #1
 800378e:	496d      	ldr	r1, [pc, #436]	@ (8003944 <HAL_I2C_Mem_Write+0x1ec>)
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fd0d 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
 800379e:	e0cc      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_I2C_Mem_Write+0x56>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e0c5      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d007      	beq.n	80037d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2221      	movs	r2, #33	@ 0x21
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a4d      	ldr	r2, [pc, #308]	@ (8003948 <HAL_I2C_Mem_Write+0x1f0>)
 8003814:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003816:	88f8      	ldrh	r0, [r7, #6]
 8003818:	893a      	ldrh	r2, [r7, #8]
 800381a:	8979      	ldrh	r1, [r7, #10]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4603      	mov	r3, r0
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fb44 	bl	8003eb4 <I2C_RequestMemoryWrite>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d052      	beq.n	80038d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e081      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fdd2 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	2b04      	cmp	r3, #4
 800384c:	d107      	bne.n	800385e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06b      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d11b      	bne.n	80038d8 <HAL_I2C_Mem_Write+0x180>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1aa      	bne.n	8003836 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fdc5 	bl	8004474 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d107      	bne.n	8003908 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003906:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e016      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	e000      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003938:	2302      	movs	r3, #2
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	00100002 	.word	0x00100002
 8003948:	ffff0000 	.word	0xffff0000

0800394c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08c      	sub	sp, #48	@ 0x30
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	461a      	mov	r2, r3
 800395a:	4603      	mov	r3, r0
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	460b      	mov	r3, r1
 8003960:	813b      	strh	r3, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003966:	f7ff f9f1 	bl	8002d4c <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b20      	cmp	r3, #32
 8003976:	f040 8214 	bne.w	8003da2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2319      	movs	r3, #25
 8003980:	2201      	movs	r2, #1
 8003982:	497b      	ldr	r1, [pc, #492]	@ (8003b70 <HAL_I2C_Mem_Read+0x224>)
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fc13 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
 8003992:	e207      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_I2C_Mem_Read+0x56>
 800399e:	2302      	movs	r3, #2
 80039a0:	e200      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d007      	beq.n	80039c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2222      	movs	r2, #34	@ 0x22
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2240      	movs	r2, #64	@ 0x40
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80039f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a5b      	ldr	r2, [pc, #364]	@ (8003b74 <HAL_I2C_Mem_Read+0x228>)
 8003a08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a0a:	88f8      	ldrh	r0, [r7, #6]
 8003a0c:	893a      	ldrh	r2, [r7, #8]
 8003a0e:	8979      	ldrh	r1, [r7, #10]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fae0 	bl	8003fe0 <I2C_RequestMemoryRead>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e1bc      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d113      	bne.n	8003a5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	623b      	str	r3, [r7, #32]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e190      	b.n	8003d7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d11b      	bne.n	8003a9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e170      	b.n	8003d7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d11b      	bne.n	8003ada <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	e150      	b.n	8003d7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003af0:	e144      	b.n	8003d7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	f200 80f1 	bhi.w	8003cde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d123      	bne.n	8003b4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fcfb 	bl	8004504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e145      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b4a:	e117      	b.n	8003d7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d14e      	bne.n	8003bf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4906      	ldr	r1, [pc, #24]	@ (8003b78 <HAL_I2C_Mem_Read+0x22c>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fb26 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e11a      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
 8003b6e:	bf00      	nop
 8003b70:	00100002 	.word	0x00100002
 8003b74:	ffff0000 	.word	0xffff0000
 8003b78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bf0:	e0c4      	b.n	8003d7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	496c      	ldr	r1, [pc, #432]	@ (8003dac <HAL_I2C_Mem_Read+0x460>)
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fad7 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0cb      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	2200      	movs	r2, #0
 8003c56:	4955      	ldr	r1, [pc, #340]	@ (8003dac <HAL_I2C_Mem_Read+0x460>)
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 faa9 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e09d      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cdc:	e04e      	b.n	8003d7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fc0e 	bl	8004504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e058      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d124      	bne.n	8003d7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f aeb6 	bne.w	8003af2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3728      	adds	r7, #40	@ 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	00010004 	.word	0x00010004

08003db0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d006      	beq.n	8003dda <I2C_MasterRequestWrite+0x2a>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d003      	beq.n	8003dda <I2C_MasterRequestWrite+0x2a>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dd8:	d108      	bne.n	8003dec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e00b      	b.n	8003e04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	2b12      	cmp	r3, #18
 8003df2:	d107      	bne.n	8003e04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f9cd 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00d      	beq.n	8003e38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2a:	d103      	bne.n	8003e34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e035      	b.n	8003ea4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e40:	d108      	bne.n	8003e54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e50:	611a      	str	r2, [r3, #16]
 8003e52:	e01b      	b.n	8003e8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e54:	897b      	ldrh	r3, [r7, #10]
 8003e56:	11db      	asrs	r3, r3, #7
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 0306 	and.w	r3, r3, #6
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f063 030f 	orn	r3, r3, #15
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	490e      	ldr	r1, [pc, #56]	@ (8003eac <I2C_MasterRequestWrite+0xfc>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa16 	bl	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e010      	b.n	8003ea4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e82:	897b      	ldrh	r3, [r7, #10]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4907      	ldr	r1, [pc, #28]	@ (8003eb0 <I2C_MasterRequestWrite+0x100>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa06 	bl	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	00010008 	.word	0x00010008
 8003eb0:	00010002 	.word	0x00010002

08003eb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	817b      	strh	r3, [r7, #10]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	813b      	strh	r3, [r7, #8]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003edc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f960 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00d      	beq.n	8003f12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f04:	d103      	bne.n	8003f0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e05f      	b.n	8003fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f12:	897b      	ldrh	r3, [r7, #10]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	492d      	ldr	r1, [pc, #180]	@ (8003fdc <I2C_RequestMemoryWrite+0x128>)
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f9bb 	bl	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04c      	b.n	8003fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fa46 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e02b      	b.n	8003fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d105      	bne.n	8003f8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f80:	893b      	ldrh	r3, [r7, #8]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]
 8003f8a:	e021      	b.n	8003fd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f8c:	893b      	ldrh	r3, [r7, #8]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9c:	6a39      	ldr	r1, [r7, #32]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa20 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d107      	bne.n	8003fc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e005      	b.n	8003fd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc6:	893b      	ldrh	r3, [r7, #8]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	00010002 	.word	0x00010002

08003fe0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	817b      	strh	r3, [r7, #10]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	813b      	strh	r3, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004008:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	2200      	movs	r2, #0
 8004022:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f8c2 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004040:	d103      	bne.n	800404a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0aa      	b.n	80041a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800405c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	6a3a      	ldr	r2, [r7, #32]
 8004062:	4952      	ldr	r1, [pc, #328]	@ (80041ac <I2C_RequestMemoryRead+0x1cc>)
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f91d 	bl	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e097      	b.n	80041a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408c:	6a39      	ldr	r1, [r7, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f9a8 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d107      	bne.n	80040b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e076      	b.n	80041a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040bc:	893b      	ldrh	r3, [r7, #8]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]
 80040c6:	e021      	b.n	800410c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040c8:	893b      	ldrh	r3, [r7, #8]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d8:	6a39      	ldr	r1, [r7, #32]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f982 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00d      	beq.n	8004102 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d107      	bne.n	80040fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e050      	b.n	80041a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004102:	893b      	ldrh	r3, [r7, #8]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410e:	6a39      	ldr	r1, [r7, #32]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f967 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	2b04      	cmp	r3, #4
 8004122:	d107      	bne.n	8004134 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004132:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e035      	b.n	80041a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004146:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	2200      	movs	r2, #0
 8004150:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f82b 	bl	80041b0 <I2C_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416e:	d103      	bne.n	8004178 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004176:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e013      	b.n	80041a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800417c:	897b      	ldrh	r3, [r7, #10]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	b2da      	uxtb	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	6a3a      	ldr	r2, [r7, #32]
 8004190:	4906      	ldr	r1, [pc, #24]	@ (80041ac <I2C_RequestMemoryRead+0x1cc>)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f886 	bl	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	00010002 	.word	0x00010002

080041b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c0:	e048      	b.n	8004254 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d044      	beq.n	8004254 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fe fdbf 	bl	8002d4c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d139      	bne.n	8004254 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d10d      	bne.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x56>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	43da      	mvns	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	e00c      	b.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	43da      	mvns	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	429a      	cmp	r2, r3
 8004224:	d116      	bne.n	8004254 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e023      	b.n	800429c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10d      	bne.n	800427a <I2C_WaitOnFlagUntilTimeout+0xca>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	43da      	mvns	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	e00c      	b.n	8004294 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	43da      	mvns	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	429a      	cmp	r2, r3
 8004298:	d093      	beq.n	80041c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b2:	e071      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d123      	bne.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	f043 0204 	orr.w	r2, r3, #4
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e067      	b.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d041      	beq.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004314:	f7fe fd1a 	bl	8002d4c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d136      	bne.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10c      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	e00b      	b.n	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	43da      	mvns	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4013      	ands	r3, r2
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e021      	b.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	0c1b      	lsrs	r3, r3, #16
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10c      	bne.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	43da      	mvns	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4013      	ands	r3, r2
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e00b      	b.n	80043d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	43da      	mvns	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f47f af6d 	bne.w	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f0:	e034      	b.n	800445c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f8e3 	bl	80045be <I2C_IsAcknowledgeFailed>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e034      	b.n	800446c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d028      	beq.n	800445c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440a:	f7fe fc9f 	bl	8002d4c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11d      	bne.n	800445c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442a:	2b80      	cmp	r3, #128	@ 0x80
 800442c:	d016      	beq.n	800445c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	f043 0220 	orr.w	r2, r3, #32
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e007      	b.n	800446c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b80      	cmp	r3, #128	@ 0x80
 8004468:	d1c3      	bne.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004480:	e034      	b.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f89b 	bl	80045be <I2C_IsAcknowledgeFailed>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e034      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d028      	beq.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fe fc57 	bl	8002d4c <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11d      	bne.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d016      	beq.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d1c3      	bne.n	8004482 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004510:	e049      	b.n	80045a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d119      	bne.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0210 	mvn.w	r2, #16
 8004528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e030      	b.n	80045b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004554:	f7fe fbfa 	bl	8002d4c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	d302      	bcc.n	800456a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11d      	bne.n	80045a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b40      	cmp	r3, #64	@ 0x40
 8004576:	d016      	beq.n	80045a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f043 0220 	orr.w	r2, r3, #32
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e007      	b.n	80045b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b40      	cmp	r3, #64	@ 0x40
 80045b2:	d1ae      	bne.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d4:	d11b      	bne.n	800460e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	f043 0204 	orr.w	r2, r3, #4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0cc      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004630:	4b68      	ldr	r3, [pc, #416]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d90c      	bls.n	8004658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b65      	ldr	r3, [pc, #404]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	4b63      	ldr	r3, [pc, #396]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0b8      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d020      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004670:	4b59      	ldr	r3, [pc, #356]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a58      	ldr	r2, [pc, #352]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800467a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004688:	4b53      	ldr	r3, [pc, #332]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4a52      	ldr	r2, [pc, #328]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004694:	4b50      	ldr	r3, [pc, #320]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	494d      	ldr	r1, [pc, #308]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d044      	beq.n	800473c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	4b47      	ldr	r3, [pc, #284]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d119      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e07f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d003      	beq.n	80046da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046da:	4b3f      	ldr	r3, [pc, #252]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e06f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ea:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e067      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046fa:	4b37      	ldr	r3, [pc, #220]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4934      	ldr	r1, [pc, #208]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800470c:	f7fe fb1e 	bl	8002d4c <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fe fb1a 	bl	8002d4c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e04f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 020c 	and.w	r2, r3, #12
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	429a      	cmp	r2, r3
 800473a:	d1eb      	bne.n	8004714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800473c:	4b25      	ldr	r3, [pc, #148]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d20c      	bcs.n	8004764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474a:	4b22      	ldr	r3, [pc, #136]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b20      	ldr	r3, [pc, #128]	@ (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e032      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004770:	4b19      	ldr	r3, [pc, #100]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4916      	ldr	r1, [pc, #88]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800478e:	4b12      	ldr	r3, [pc, #72]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	490e      	ldr	r1, [pc, #56]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047a2:	f000 f855 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 80047a6:	4602      	mov	r2, r0
 80047a8:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	490a      	ldr	r1, [pc, #40]	@ (80047dc <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	5ccb      	ldrb	r3, [r1, r3]
 80047b6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ba:	4a09      	ldr	r2, [pc, #36]	@ (80047e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047be:	4b09      	ldr	r3, [pc, #36]	@ (80047e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fa7e 	bl	8002cc4 <HAL_InitTick>

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40023c00 	.word	0x40023c00
 80047d8:	40023800 	.word	0x40023800
 80047dc:	080088f4 	.word	0x080088f4
 80047e0:	20000010 	.word	0x20000010
 80047e4:	20000014 	.word	0x20000014

080047e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ec:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000010 	.word	0x20000010

08004800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004804:	f7ff fff0 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4903      	ldr	r1, [pc, #12]	@ (8004824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40023800 	.word	0x40023800
 8004824:	08008904 	.word	0x08008904

08004828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800482c:	f7ff ffdc 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	0b5b      	lsrs	r3, r3, #13
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	4903      	ldr	r1, [pc, #12]	@ (800484c <HAL_RCC_GetPCLK2Freq+0x24>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40023800 	.word	0x40023800
 800484c:	08008904 	.word	0x08008904

08004850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b0ae      	sub	sp, #184	@ 0xb8
 8004856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004876:	4bcb      	ldr	r3, [pc, #812]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b0c      	cmp	r3, #12
 8004880:	f200 8206 	bhi.w	8004c90 <HAL_RCC_GetSysClockFreq+0x440>
 8004884:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048c1 	.word	0x080048c1
 8004890:	08004c91 	.word	0x08004c91
 8004894:	08004c91 	.word	0x08004c91
 8004898:	08004c91 	.word	0x08004c91
 800489c:	080048c9 	.word	0x080048c9
 80048a0:	08004c91 	.word	0x08004c91
 80048a4:	08004c91 	.word	0x08004c91
 80048a8:	08004c91 	.word	0x08004c91
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	08004c91 	.word	0x08004c91
 80048b4:	08004c91 	.word	0x08004c91
 80048b8:	08004c91 	.word	0x08004c91
 80048bc:	08004ac1 	.word	0x08004ac1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4bb9      	ldr	r3, [pc, #740]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x358>)
 80048c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80048c6:	e1e7      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c8:	4bb8      	ldr	r3, [pc, #736]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x35c>)
 80048ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048ce:	e1e3      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d0:	4bb4      	ldr	r3, [pc, #720]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048dc:	4bb1      	ldr	r3, [pc, #708]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d071      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4bae      	ldr	r3, [pc, #696]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80048f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004900:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800490a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f04f 0100 	mov.w	r1, #0
 800491a:	0159      	lsls	r1, r3, #5
 800491c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004920:	0150      	lsls	r0, r2, #5
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4621      	mov	r1, r4
 8004928:	1a51      	subs	r1, r2, r1
 800492a:	6439      	str	r1, [r7, #64]	@ 0x40
 800492c:	4629      	mov	r1, r5
 800492e:	eb63 0301 	sbc.w	r3, r3, r1
 8004932:	647b      	str	r3, [r7, #68]	@ 0x44
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004940:	4649      	mov	r1, r9
 8004942:	018b      	lsls	r3, r1, #6
 8004944:	4641      	mov	r1, r8
 8004946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800494a:	4641      	mov	r1, r8
 800494c:	018a      	lsls	r2, r1, #6
 800494e:	4641      	mov	r1, r8
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004954:	4649      	mov	r1, r9
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004968:	4649      	mov	r1, r9
 800496a:	00cb      	lsls	r3, r1, #3
 800496c:	4641      	mov	r1, r8
 800496e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004972:	4641      	mov	r1, r8
 8004974:	00ca      	lsls	r2, r1, #3
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	4603      	mov	r3, r0
 800497c:	4622      	mov	r2, r4
 800497e:	189b      	adds	r3, r3, r2
 8004980:	633b      	str	r3, [r7, #48]	@ 0x30
 8004982:	462b      	mov	r3, r5
 8004984:	460a      	mov	r2, r1
 8004986:	eb42 0303 	adc.w	r3, r2, r3
 800498a:	637b      	str	r3, [r7, #52]	@ 0x34
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004998:	4629      	mov	r1, r5
 800499a:	024b      	lsls	r3, r1, #9
 800499c:	4621      	mov	r1, r4
 800499e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a2:	4621      	mov	r1, r4
 80049a4:	024a      	lsls	r2, r1, #9
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80049bc:	f7fc f964 	bl	8000c88 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049ca:	e067      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049cc:	4b75      	ldr	r3, [pc, #468]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	099b      	lsrs	r3, r3, #6
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80049dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049e6:	2300      	movs	r3, #0
 80049e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a00:	0150      	lsls	r0, r2, #5
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4621      	mov	r1, r4
 8004a08:	1a51      	subs	r1, r2, r1
 8004a0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004a20:	4649      	mov	r1, r9
 8004a22:	018b      	lsls	r3, r1, #6
 8004a24:	4641      	mov	r1, r8
 8004a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	018a      	lsls	r2, r1, #6
 8004a2e:	4641      	mov	r1, r8
 8004a30:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a34:	4649      	mov	r1, r9
 8004a36:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a4e:	4692      	mov	sl, r2
 8004a50:	469b      	mov	fp, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	eb1a 0303 	adds.w	r3, sl, r3
 8004a58:	623b      	str	r3, [r7, #32]
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	028b      	lsls	r3, r1, #10
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a78:	4621      	mov	r1, r4
 8004a7a:	028a      	lsls	r2, r1, #10
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a84:	2200      	movs	r2, #0
 8004a86:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a88:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004a8e:	f7fc f8fb 	bl	8000c88 <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4613      	mov	r3, r2
 8004a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a9c:	4b41      	ldr	r3, [pc, #260]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004abe:	e0eb      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac0:	4b38      	ldr	r3, [pc, #224]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004acc:	4b35      	ldr	r3, [pc, #212]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d06b      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad8:	4b32      	ldr	r3, [pc, #200]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	2200      	movs	r2, #0
 8004ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aec:	2300      	movs	r3, #0
 8004aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8004af0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004af4:	4622      	mov	r2, r4
 8004af6:	462b      	mov	r3, r5
 8004af8:	f04f 0000 	mov.w	r0, #0
 8004afc:	f04f 0100 	mov.w	r1, #0
 8004b00:	0159      	lsls	r1, r3, #5
 8004b02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b06:	0150      	lsls	r0, r2, #5
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	1a51      	subs	r1, r2, r1
 8004b10:	61b9      	str	r1, [r7, #24]
 8004b12:	4629      	mov	r1, r5
 8004b14:	eb63 0301 	sbc.w	r3, r3, r1
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004b26:	4659      	mov	r1, fp
 8004b28:	018b      	lsls	r3, r1, #6
 8004b2a:	4651      	mov	r1, sl
 8004b2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b30:	4651      	mov	r1, sl
 8004b32:	018a      	lsls	r2, r1, #6
 8004b34:	4651      	mov	r1, sl
 8004b36:	ebb2 0801 	subs.w	r8, r2, r1
 8004b3a:	4659      	mov	r1, fp
 8004b3c:	eb63 0901 	sbc.w	r9, r3, r1
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b54:	4690      	mov	r8, r2
 8004b56:	4699      	mov	r9, r3
 8004b58:	4623      	mov	r3, r4
 8004b5a:	eb18 0303 	adds.w	r3, r8, r3
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	462b      	mov	r3, r5
 8004b62:	eb49 0303 	adc.w	r3, r9, r3
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b74:	4629      	mov	r1, r5
 8004b76:	024b      	lsls	r3, r1, #9
 8004b78:	4621      	mov	r1, r4
 8004b7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b7e:	4621      	mov	r1, r4
 8004b80:	024a      	lsls	r2, r1, #9
 8004b82:	4610      	mov	r0, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004b90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b94:	f7fc f878 	bl	8000c88 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ba2:	e065      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x420>
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	00f42400 	.word	0x00f42400
 8004bac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	4611      	mov	r1, r2
 8004bbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004bca:	4642      	mov	r2, r8
 8004bcc:	464b      	mov	r3, r9
 8004bce:	f04f 0000 	mov.w	r0, #0
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	0159      	lsls	r1, r3, #5
 8004bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bdc:	0150      	lsls	r0, r2, #5
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4641      	mov	r1, r8
 8004be4:	1a51      	subs	r1, r2, r1
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	4649      	mov	r1, r9
 8004bea:	eb63 0301 	sbc.w	r3, r3, r1
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	018b      	lsls	r3, r1, #6
 8004c00:	4651      	mov	r1, sl
 8004c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c06:	4651      	mov	r1, sl
 8004c08:	018a      	lsls	r2, r1, #6
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	1a54      	subs	r4, r2, r1
 8004c0e:	4659      	mov	r1, fp
 8004c10:	eb63 0501 	sbc.w	r5, r3, r1
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	00eb      	lsls	r3, r5, #3
 8004c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c22:	00e2      	lsls	r2, r4, #3
 8004c24:	4614      	mov	r4, r2
 8004c26:	461d      	mov	r5, r3
 8004c28:	4643      	mov	r3, r8
 8004c2a:	18e3      	adds	r3, r4, r3
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	464b      	mov	r3, r9
 8004c30:	eb45 0303 	adc.w	r3, r5, r3
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c42:	4629      	mov	r1, r5
 8004c44:	028b      	lsls	r3, r1, #10
 8004c46:	4621      	mov	r1, r4
 8004c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	028a      	lsls	r2, r1, #10
 8004c50:	4610      	mov	r0, r2
 8004c52:	4619      	mov	r1, r3
 8004c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c58:	2200      	movs	r2, #0
 8004c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c62:	f7fc f811 	bl	8000c88 <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c70:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	0f1b      	lsrs	r3, r3, #28
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c8e:	e003      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	37b8      	adds	r7, #184	@ 0xb8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e28d      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8083 	beq.w	8004dd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cd0:	4b94      	ldr	r3, [pc, #592]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d019      	beq.n	8004d10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cdc:	4b91      	ldr	r3, [pc, #580]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ce8:	4b8e      	ldr	r3, [pc, #568]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cf4:	d00c      	beq.n	8004d10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d112      	bne.n	8004d28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d02:	4b88      	ldr	r3, [pc, #544]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d0e:	d10b      	bne.n	8004d28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	4b84      	ldr	r3, [pc, #528]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d05b      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x124>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d157      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e25a      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d30:	d106      	bne.n	8004d40 <HAL_RCC_OscConfig+0x90>
 8004d32:	4b7c      	ldr	r3, [pc, #496]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a7b      	ldr	r2, [pc, #492]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e01d      	b.n	8004d7c <HAL_RCC_OscConfig+0xcc>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCC_OscConfig+0xb4>
 8004d4a:	4b76      	ldr	r3, [pc, #472]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a75      	ldr	r2, [pc, #468]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	4b73      	ldr	r3, [pc, #460]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a72      	ldr	r2, [pc, #456]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e00b      	b.n	8004d7c <HAL_RCC_OscConfig+0xcc>
 8004d64:	4b6f      	ldr	r3, [pc, #444]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a6e      	ldr	r2, [pc, #440]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	4b6c      	ldr	r3, [pc, #432]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a6b      	ldr	r2, [pc, #428]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d013      	beq.n	8004dac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd ffe2 	bl	8002d4c <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fd ffde 	bl	8002d4c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	@ 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e21f      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	4b61      	ldr	r3, [pc, #388]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0xdc>
 8004daa:	e014      	b.n	8004dd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd ffce 	bl	8002d4c <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db4:	f7fd ffca 	bl	8002d4c <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	@ 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e20b      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc6:	4b57      	ldr	r3, [pc, #348]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x104>
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d06f      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004de2:	4b50      	ldr	r3, [pc, #320]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d017      	beq.n	8004e1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dee:	4b4d      	ldr	r3, [pc, #308]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d105      	bne.n	8004e06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e06:	4b47      	ldr	r3, [pc, #284]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e0e:	2b0c      	cmp	r3, #12
 8004e10:	d11c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e12:	4b44      	ldr	r3, [pc, #272]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d116      	bne.n	8004e4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1e:	4b41      	ldr	r3, [pc, #260]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_RCC_OscConfig+0x186>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d001      	beq.n	8004e36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e1d3      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e36:	4b3b      	ldr	r3, [pc, #236]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4937      	ldr	r1, [pc, #220]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	e03a      	b.n	8004ec2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d020      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e54:	4b34      	ldr	r3, [pc, #208]	@ (8004f28 <HAL_RCC_OscConfig+0x278>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fd ff77 	bl	8002d4c <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e62:	f7fd ff73 	bl	8002d4c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e1b4      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e74:	4b2b      	ldr	r3, [pc, #172]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e80:	4b28      	ldr	r3, [pc, #160]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4925      	ldr	r1, [pc, #148]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]
 8004e94:	e015      	b.n	8004ec2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e96:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <HAL_RCC_OscConfig+0x278>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fd ff56 	bl	8002d4c <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ea4:	f7fd ff52 	bl	8002d4c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e193      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d036      	beq.n	8004f3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed6:	4b15      	ldr	r3, [pc, #84]	@ (8004f2c <HAL_RCC_OscConfig+0x27c>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fd ff36 	bl	8002d4c <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ee4:	f7fd ff32 	bl	8002d4c <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e173      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x234>
 8004f02:	e01b      	b.n	8004f3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f04:	4b09      	ldr	r3, [pc, #36]	@ (8004f2c <HAL_RCC_OscConfig+0x27c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fd ff1f 	bl	8002d4c <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	e00e      	b.n	8004f30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fd ff1b 	bl	8002d4c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d907      	bls.n	8004f30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e15c      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
 8004f24:	40023800 	.word	0x40023800
 8004f28:	42470000 	.word	0x42470000
 8004f2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	4b8a      	ldr	r3, [pc, #552]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ea      	bne.n	8004f12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8097 	beq.w	8005078 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4e:	4b83      	ldr	r3, [pc, #524]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	4a7e      	ldr	r2, [pc, #504]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7a:	4b79      	ldr	r3, [pc, #484]	@ (8005160 <HAL_RCC_OscConfig+0x4b0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d118      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f86:	4b76      	ldr	r3, [pc, #472]	@ (8005160 <HAL_RCC_OscConfig+0x4b0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a75      	ldr	r2, [pc, #468]	@ (8005160 <HAL_RCC_OscConfig+0x4b0>)
 8004f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f92:	f7fd fedb 	bl	8002d4c <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9a:	f7fd fed7 	bl	8002d4c <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e118      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fac:	4b6c      	ldr	r3, [pc, #432]	@ (8005160 <HAL_RCC_OscConfig+0x4b0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x31e>
 8004fc0:	4b66      	ldr	r3, [pc, #408]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc4:	4a65      	ldr	r2, [pc, #404]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fcc:	e01c      	b.n	8005008 <HAL_RCC_OscConfig+0x358>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x340>
 8004fd6:	4b61      	ldr	r3, [pc, #388]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	4a60      	ldr	r2, [pc, #384]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004fdc:	f043 0304 	orr.w	r3, r3, #4
 8004fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe2:	4b5e      	ldr	r3, [pc, #376]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	4a5d      	ldr	r2, [pc, #372]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fee:	e00b      	b.n	8005008 <HAL_RCC_OscConfig+0x358>
 8004ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff4:	4a59      	ldr	r2, [pc, #356]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ffc:	4b57      	ldr	r3, [pc, #348]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005000:	4a56      	ldr	r2, [pc, #344]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8005002:	f023 0304 	bic.w	r3, r3, #4
 8005006:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fd fe9c 	bl	8002d4c <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005016:	e00a      	b.n	800502e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fd fe98 	bl	8002d4c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e0d7      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502e:	4b4b      	ldr	r3, [pc, #300]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0ee      	beq.n	8005018 <HAL_RCC_OscConfig+0x368>
 800503a:	e014      	b.n	8005066 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503c:	f7fd fe86 	bl	8002d4c <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005042:	e00a      	b.n	800505a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fd fe82 	bl	8002d4c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0c1      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505a:	4b40      	ldr	r3, [pc, #256]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1ee      	bne.n	8005044 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d105      	bne.n	8005078 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800506c:	4b3b      	ldr	r3, [pc, #236]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	4a3a      	ldr	r2, [pc, #232]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8005072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005076:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80ad 	beq.w	80051dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005082:	4b36      	ldr	r3, [pc, #216]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b08      	cmp	r3, #8
 800508c:	d060      	beq.n	8005150 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d145      	bne.n	8005122 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005096:	4b33      	ldr	r3, [pc, #204]	@ (8005164 <HAL_RCC_OscConfig+0x4b4>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fd fe56 	bl	8002d4c <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fd fe52 	bl	8002d4c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e093      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b6:	4b29      	ldr	r3, [pc, #164]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69da      	ldr	r2, [r3, #28]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	3b01      	subs	r3, #1
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	071b      	lsls	r3, r3, #28
 80050ee:	491b      	ldr	r1, [pc, #108]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005164 <HAL_RCC_OscConfig+0x4b4>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd fe27 	bl	8002d4c <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005102:	f7fd fe23 	bl	8002d4c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e064      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005114:	4b11      	ldr	r3, [pc, #68]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x452>
 8005120:	e05c      	b.n	80051dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <HAL_RCC_OscConfig+0x4b4>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fd fe10 	bl	8002d4c <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005130:	f7fd fe0c 	bl	8002d4c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e04d      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005142:	4b06      	ldr	r3, [pc, #24]	@ (800515c <HAL_RCC_OscConfig+0x4ac>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x480>
 800514e:	e045      	b.n	80051dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e040      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
 800515c:	40023800 	.word	0x40023800
 8005160:	40007000 	.word	0x40007000
 8005164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005168:	4b1f      	ldr	r3, [pc, #124]	@ (80051e8 <HAL_RCC_OscConfig+0x538>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d030      	beq.n	80051d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d129      	bne.n	80051d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	429a      	cmp	r2, r3
 8005190:	d122      	bne.n	80051d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005198:	4013      	ands	r3, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800519e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d119      	bne.n	80051d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	3b01      	subs	r3, #1
 80051b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d10f      	bne.n	80051d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800

080051ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e042      	b.n	8005284 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fd fcc2 	bl	8002b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2224      	movs	r2, #36	@ 0x24
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800522e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f973 	bl	800551c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	@ 0x28
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d175      	bne.n	8005398 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_UART_Transmit+0x2c>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e06e      	b.n	800539a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2221      	movs	r2, #33	@ 0x21
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ca:	f7fd fd3f 	bl	8002d4c <HAL_GetTick>
 80052ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e4:	d108      	bne.n	80052f8 <HAL_UART_Transmit+0x6c>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	e003      	b.n	8005300 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005300:	e02e      	b.n	8005360 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2200      	movs	r2, #0
 800530a:	2180      	movs	r1, #128	@ 0x80
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f848 	bl	80053a2 <UART_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e03a      	b.n	800539a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005338:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	3302      	adds	r3, #2
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	e007      	b.n	8005352 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	781a      	ldrb	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	3301      	adds	r3, #1
 8005350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1cb      	bne.n	8005302 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2200      	movs	r2, #0
 8005372:	2140      	movs	r1, #64	@ 0x40
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f814 	bl	80053a2 <UART_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e006      	b.n	800539a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e000      	b.n	800539a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b2:	e03b      	b.n	800542c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d037      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053bc:	f7fd fcc6 	bl	8002d4c <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	6a3a      	ldr	r2, [r7, #32]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e03a      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d023      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b80      	cmp	r3, #128	@ 0x80
 80053e8:	d020      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0x8a>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b40      	cmp	r3, #64	@ 0x40
 80053ee:	d01d      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d116      	bne.n	800542c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f81d 	bl	8005454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2208      	movs	r2, #8
 800541e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e00f      	b.n	800544c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	429a      	cmp	r2, r3
 8005448:	d0b4      	beq.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b095      	sub	sp, #84	@ 0x54
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800547c:	643a      	str	r2, [r7, #64]	@ 0x40
 800547e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3314      	adds	r3, #20
 8005496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3314      	adds	r3, #20
 80054ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d119      	bne.n	8005500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	60bb      	str	r3, [r7, #8]
   return(result);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f023 0310 	bic.w	r3, r3, #16
 80054e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ec:	61ba      	str	r2, [r7, #24]
 80054ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6979      	ldr	r1, [r7, #20]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	613b      	str	r3, [r7, #16]
   return(result);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800550e:	bf00      	nop
 8005510:	3754      	adds	r7, #84	@ 0x54
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800551c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005520:	b0c0      	sub	sp, #256	@ 0x100
 8005522:	af00      	add	r7, sp, #0
 8005524:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005538:	68d9      	ldr	r1, [r3, #12]
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	ea40 0301 	orr.w	r3, r0, r1
 8005544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	431a      	orrs	r2, r3
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	431a      	orrs	r2, r3
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005574:	f021 010c 	bic.w	r1, r1, #12
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005582:	430b      	orrs	r3, r1
 8005584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005596:	6999      	ldr	r1, [r3, #24]
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	ea40 0301 	orr.w	r3, r0, r1
 80055a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b8f      	ldr	r3, [pc, #572]	@ (80057e8 <UART_SetConfig+0x2cc>)
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d005      	beq.n	80055bc <UART_SetConfig+0xa0>
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b8d      	ldr	r3, [pc, #564]	@ (80057ec <UART_SetConfig+0x2d0>)
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d104      	bne.n	80055c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055bc:	f7ff f934 	bl	8004828 <HAL_RCC_GetPCLK2Freq>
 80055c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055c4:	e003      	b.n	80055ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055c6:	f7ff f91b 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 80055ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d8:	f040 810c 	bne.w	80057f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e0:	2200      	movs	r2, #0
 80055e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055ee:	4622      	mov	r2, r4
 80055f0:	462b      	mov	r3, r5
 80055f2:	1891      	adds	r1, r2, r2
 80055f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055f6:	415b      	adcs	r3, r3
 80055f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055fe:	4621      	mov	r1, r4
 8005600:	eb12 0801 	adds.w	r8, r2, r1
 8005604:	4629      	mov	r1, r5
 8005606:	eb43 0901 	adc.w	r9, r3, r1
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561e:	4690      	mov	r8, r2
 8005620:	4699      	mov	r9, r3
 8005622:	4623      	mov	r3, r4
 8005624:	eb18 0303 	adds.w	r3, r8, r3
 8005628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800562c:	462b      	mov	r3, r5
 800562e:	eb49 0303 	adc.w	r3, r9, r3
 8005632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005642:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800564a:	460b      	mov	r3, r1
 800564c:	18db      	adds	r3, r3, r3
 800564e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005650:	4613      	mov	r3, r2
 8005652:	eb42 0303 	adc.w	r3, r2, r3
 8005656:	657b      	str	r3, [r7, #84]	@ 0x54
 8005658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800565c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005660:	f7fb fb12 	bl	8000c88 <__aeabi_uldivmod>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4b61      	ldr	r3, [pc, #388]	@ (80057f0 <UART_SetConfig+0x2d4>)
 800566a:	fba3 2302 	umull	r2, r3, r3, r2
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	011c      	lsls	r4, r3, #4
 8005672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005676:	2200      	movs	r2, #0
 8005678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800567c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	1891      	adds	r1, r2, r2
 800568a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800568c:	415b      	adcs	r3, r3
 800568e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005694:	4641      	mov	r1, r8
 8005696:	eb12 0a01 	adds.w	sl, r2, r1
 800569a:	4649      	mov	r1, r9
 800569c:	eb43 0b01 	adc.w	fp, r3, r1
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b4:	4692      	mov	sl, r2
 80056b6:	469b      	mov	fp, r3
 80056b8:	4643      	mov	r3, r8
 80056ba:	eb1a 0303 	adds.w	r3, sl, r3
 80056be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056c2:	464b      	mov	r3, r9
 80056c4:	eb4b 0303 	adc.w	r3, fp, r3
 80056c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056e0:	460b      	mov	r3, r1
 80056e2:	18db      	adds	r3, r3, r3
 80056e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e6:	4613      	mov	r3, r2
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056f6:	f7fb fac7 	bl	8000c88 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4611      	mov	r1, r2
 8005700:	4b3b      	ldr	r3, [pc, #236]	@ (80057f0 <UART_SetConfig+0x2d4>)
 8005702:	fba3 2301 	umull	r2, r3, r3, r1
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2264      	movs	r2, #100	@ 0x64
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	1acb      	subs	r3, r1, r3
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005716:	4b36      	ldr	r3, [pc, #216]	@ (80057f0 <UART_SetConfig+0x2d4>)
 8005718:	fba3 2302 	umull	r2, r3, r3, r2
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005724:	441c      	add	r4, r3
 8005726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572a:	2200      	movs	r2, #0
 800572c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005730:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005738:	4642      	mov	r2, r8
 800573a:	464b      	mov	r3, r9
 800573c:	1891      	adds	r1, r2, r2
 800573e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005740:	415b      	adcs	r3, r3
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005748:	4641      	mov	r1, r8
 800574a:	1851      	adds	r1, r2, r1
 800574c:	6339      	str	r1, [r7, #48]	@ 0x30
 800574e:	4649      	mov	r1, r9
 8005750:	414b      	adcs	r3, r1
 8005752:	637b      	str	r3, [r7, #52]	@ 0x34
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005760:	4659      	mov	r1, fp
 8005762:	00cb      	lsls	r3, r1, #3
 8005764:	4651      	mov	r1, sl
 8005766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576a:	4651      	mov	r1, sl
 800576c:	00ca      	lsls	r2, r1, #3
 800576e:	4610      	mov	r0, r2
 8005770:	4619      	mov	r1, r3
 8005772:	4603      	mov	r3, r0
 8005774:	4642      	mov	r2, r8
 8005776:	189b      	adds	r3, r3, r2
 8005778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800577c:	464b      	mov	r3, r9
 800577e:	460a      	mov	r2, r1
 8005780:	eb42 0303 	adc.w	r3, r2, r3
 8005784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005794:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800579c:	460b      	mov	r3, r1
 800579e:	18db      	adds	r3, r3, r3
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057a2:	4613      	mov	r3, r2
 80057a4:	eb42 0303 	adc.w	r3, r2, r3
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057b2:	f7fb fa69 	bl	8000c88 <__aeabi_uldivmod>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <UART_SetConfig+0x2d4>)
 80057bc:	fba3 1302 	umull	r1, r3, r3, r2
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	2164      	movs	r1, #100	@ 0x64
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	3332      	adds	r3, #50	@ 0x32
 80057ce:	4a08      	ldr	r2, [pc, #32]	@ (80057f0 <UART_SetConfig+0x2d4>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	f003 0207 	and.w	r2, r3, #7
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4422      	add	r2, r4
 80057e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057e4:	e106      	b.n	80059f4 <UART_SetConfig+0x4d8>
 80057e6:	bf00      	nop
 80057e8:	40011000 	.word	0x40011000
 80057ec:	40011400 	.word	0x40011400
 80057f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005806:	4642      	mov	r2, r8
 8005808:	464b      	mov	r3, r9
 800580a:	1891      	adds	r1, r2, r2
 800580c:	6239      	str	r1, [r7, #32]
 800580e:	415b      	adcs	r3, r3
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
 8005812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005816:	4641      	mov	r1, r8
 8005818:	1854      	adds	r4, r2, r1
 800581a:	4649      	mov	r1, r9
 800581c:	eb43 0501 	adc.w	r5, r3, r1
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	00eb      	lsls	r3, r5, #3
 800582a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800582e:	00e2      	lsls	r2, r4, #3
 8005830:	4614      	mov	r4, r2
 8005832:	461d      	mov	r5, r3
 8005834:	4643      	mov	r3, r8
 8005836:	18e3      	adds	r3, r4, r3
 8005838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800583c:	464b      	mov	r3, r9
 800583e:	eb45 0303 	adc.w	r3, r5, r3
 8005842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005862:	4629      	mov	r1, r5
 8005864:	008b      	lsls	r3, r1, #2
 8005866:	4621      	mov	r1, r4
 8005868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800586c:	4621      	mov	r1, r4
 800586e:	008a      	lsls	r2, r1, #2
 8005870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005874:	f7fb fa08 	bl	8000c88 <__aeabi_uldivmod>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4b60      	ldr	r3, [pc, #384]	@ (8005a00 <UART_SetConfig+0x4e4>)
 800587e:	fba3 2302 	umull	r2, r3, r3, r2
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	011c      	lsls	r4, r3, #4
 8005886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005898:	4642      	mov	r2, r8
 800589a:	464b      	mov	r3, r9
 800589c:	1891      	adds	r1, r2, r2
 800589e:	61b9      	str	r1, [r7, #24]
 80058a0:	415b      	adcs	r3, r3
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a8:	4641      	mov	r1, r8
 80058aa:	1851      	adds	r1, r2, r1
 80058ac:	6139      	str	r1, [r7, #16]
 80058ae:	4649      	mov	r1, r9
 80058b0:	414b      	adcs	r3, r1
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058c0:	4659      	mov	r1, fp
 80058c2:	00cb      	lsls	r3, r1, #3
 80058c4:	4651      	mov	r1, sl
 80058c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ca:	4651      	mov	r1, sl
 80058cc:	00ca      	lsls	r2, r1, #3
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	4642      	mov	r2, r8
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058dc:	464b      	mov	r3, r9
 80058de:	460a      	mov	r2, r1
 80058e0:	eb42 0303 	adc.w	r3, r2, r3
 80058e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005900:	4649      	mov	r1, r9
 8005902:	008b      	lsls	r3, r1, #2
 8005904:	4641      	mov	r1, r8
 8005906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590a:	4641      	mov	r1, r8
 800590c:	008a      	lsls	r2, r1, #2
 800590e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005912:	f7fb f9b9 	bl	8000c88 <__aeabi_uldivmod>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4611      	mov	r1, r2
 800591c:	4b38      	ldr	r3, [pc, #224]	@ (8005a00 <UART_SetConfig+0x4e4>)
 800591e:	fba3 2301 	umull	r2, r3, r3, r1
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	2264      	movs	r2, #100	@ 0x64
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	1acb      	subs	r3, r1, r3
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	3332      	adds	r3, #50	@ 0x32
 8005930:	4a33      	ldr	r2, [pc, #204]	@ (8005a00 <UART_SetConfig+0x4e4>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800593c:	441c      	add	r4, r3
 800593e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005942:	2200      	movs	r2, #0
 8005944:	673b      	str	r3, [r7, #112]	@ 0x70
 8005946:	677a      	str	r2, [r7, #116]	@ 0x74
 8005948:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	1891      	adds	r1, r2, r2
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	415b      	adcs	r3, r3
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800595c:	4641      	mov	r1, r8
 800595e:	1851      	adds	r1, r2, r1
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	4649      	mov	r1, r9
 8005964:	414b      	adcs	r3, r1
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005974:	4659      	mov	r1, fp
 8005976:	00cb      	lsls	r3, r1, #3
 8005978:	4651      	mov	r1, sl
 800597a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800597e:	4651      	mov	r1, sl
 8005980:	00ca      	lsls	r2, r1, #3
 8005982:	4610      	mov	r0, r2
 8005984:	4619      	mov	r1, r3
 8005986:	4603      	mov	r3, r0
 8005988:	4642      	mov	r2, r8
 800598a:	189b      	adds	r3, r3, r2
 800598c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800598e:	464b      	mov	r3, r9
 8005990:	460a      	mov	r2, r1
 8005992:	eb42 0303 	adc.w	r3, r2, r3
 8005996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80059a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059b0:	4649      	mov	r1, r9
 80059b2:	008b      	lsls	r3, r1, #2
 80059b4:	4641      	mov	r1, r8
 80059b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ba:	4641      	mov	r1, r8
 80059bc:	008a      	lsls	r2, r1, #2
 80059be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059c2:	f7fb f961 	bl	8000c88 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005a00 <UART_SetConfig+0x4e4>)
 80059cc:	fba3 1302 	umull	r1, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	2164      	movs	r1, #100	@ 0x64
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	3332      	adds	r3, #50	@ 0x32
 80059de:	4a08      	ldr	r2, [pc, #32]	@ (8005a00 <UART_SetConfig+0x4e4>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4422      	add	r2, r4
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	bf00      	nop
 80059f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059fa:	46bd      	mov	sp, r7
 80059fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a00:	51eb851f 	.word	0x51eb851f

08005a04 <__cvt>:
 8005a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	ec57 6b10 	vmov	r6, r7, d0
 8005a0c:	2f00      	cmp	r7, #0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	4619      	mov	r1, r3
 8005a12:	463b      	mov	r3, r7
 8005a14:	bfbb      	ittet	lt
 8005a16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a1a:	461f      	movlt	r7, r3
 8005a1c:	2300      	movge	r3, #0
 8005a1e:	232d      	movlt	r3, #45	@ 0x2d
 8005a20:	700b      	strb	r3, [r1, #0]
 8005a22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a28:	4691      	mov	r9, r2
 8005a2a:	f023 0820 	bic.w	r8, r3, #32
 8005a2e:	bfbc      	itt	lt
 8005a30:	4632      	movlt	r2, r6
 8005a32:	4616      	movlt	r6, r2
 8005a34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a38:	d005      	beq.n	8005a46 <__cvt+0x42>
 8005a3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a3e:	d100      	bne.n	8005a42 <__cvt+0x3e>
 8005a40:	3401      	adds	r4, #1
 8005a42:	2102      	movs	r1, #2
 8005a44:	e000      	b.n	8005a48 <__cvt+0x44>
 8005a46:	2103      	movs	r1, #3
 8005a48:	ab03      	add	r3, sp, #12
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	ab02      	add	r3, sp, #8
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	ec47 6b10 	vmov	d0, r6, r7
 8005a54:	4653      	mov	r3, sl
 8005a56:	4622      	mov	r2, r4
 8005a58:	f000 fe5a 	bl	8006710 <_dtoa_r>
 8005a5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a60:	4605      	mov	r5, r0
 8005a62:	d119      	bne.n	8005a98 <__cvt+0x94>
 8005a64:	f019 0f01 	tst.w	r9, #1
 8005a68:	d00e      	beq.n	8005a88 <__cvt+0x84>
 8005a6a:	eb00 0904 	add.w	r9, r0, r4
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2300      	movs	r3, #0
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	f7fb f847 	bl	8000b08 <__aeabi_dcmpeq>
 8005a7a:	b108      	cbz	r0, 8005a80 <__cvt+0x7c>
 8005a7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a80:	2230      	movs	r2, #48	@ 0x30
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	454b      	cmp	r3, r9
 8005a86:	d31e      	bcc.n	8005ac6 <__cvt+0xc2>
 8005a88:	9b03      	ldr	r3, [sp, #12]
 8005a8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a8c:	1b5b      	subs	r3, r3, r5
 8005a8e:	4628      	mov	r0, r5
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	b004      	add	sp, #16
 8005a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a9c:	eb00 0904 	add.w	r9, r0, r4
 8005aa0:	d1e5      	bne.n	8005a6e <__cvt+0x6a>
 8005aa2:	7803      	ldrb	r3, [r0, #0]
 8005aa4:	2b30      	cmp	r3, #48	@ 0x30
 8005aa6:	d10a      	bne.n	8005abe <__cvt+0xba>
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4630      	mov	r0, r6
 8005aae:	4639      	mov	r1, r7
 8005ab0:	f7fb f82a 	bl	8000b08 <__aeabi_dcmpeq>
 8005ab4:	b918      	cbnz	r0, 8005abe <__cvt+0xba>
 8005ab6:	f1c4 0401 	rsb	r4, r4, #1
 8005aba:	f8ca 4000 	str.w	r4, [sl]
 8005abe:	f8da 3000 	ldr.w	r3, [sl]
 8005ac2:	4499      	add	r9, r3
 8005ac4:	e7d3      	b.n	8005a6e <__cvt+0x6a>
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	9103      	str	r1, [sp, #12]
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	e7d9      	b.n	8005a82 <__cvt+0x7e>

08005ace <__exponent>:
 8005ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	bfba      	itte	lt
 8005ad4:	4249      	neglt	r1, r1
 8005ad6:	232d      	movlt	r3, #45	@ 0x2d
 8005ad8:	232b      	movge	r3, #43	@ 0x2b
 8005ada:	2909      	cmp	r1, #9
 8005adc:	7002      	strb	r2, [r0, #0]
 8005ade:	7043      	strb	r3, [r0, #1]
 8005ae0:	dd29      	ble.n	8005b36 <__exponent+0x68>
 8005ae2:	f10d 0307 	add.w	r3, sp, #7
 8005ae6:	461d      	mov	r5, r3
 8005ae8:	270a      	movs	r7, #10
 8005aea:	461a      	mov	r2, r3
 8005aec:	fbb1 f6f7 	udiv	r6, r1, r7
 8005af0:	fb07 1416 	mls	r4, r7, r6, r1
 8005af4:	3430      	adds	r4, #48	@ 0x30
 8005af6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005afa:	460c      	mov	r4, r1
 8005afc:	2c63      	cmp	r4, #99	@ 0x63
 8005afe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b02:	4631      	mov	r1, r6
 8005b04:	dcf1      	bgt.n	8005aea <__exponent+0x1c>
 8005b06:	3130      	adds	r1, #48	@ 0x30
 8005b08:	1e94      	subs	r4, r2, #2
 8005b0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b0e:	1c41      	adds	r1, r0, #1
 8005b10:	4623      	mov	r3, r4
 8005b12:	42ab      	cmp	r3, r5
 8005b14:	d30a      	bcc.n	8005b2c <__exponent+0x5e>
 8005b16:	f10d 0309 	add.w	r3, sp, #9
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	42ac      	cmp	r4, r5
 8005b1e:	bf88      	it	hi
 8005b20:	2300      	movhi	r3, #0
 8005b22:	3302      	adds	r3, #2
 8005b24:	4403      	add	r3, r0
 8005b26:	1a18      	subs	r0, r3, r0
 8005b28:	b003      	add	sp, #12
 8005b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b30:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b34:	e7ed      	b.n	8005b12 <__exponent+0x44>
 8005b36:	2330      	movs	r3, #48	@ 0x30
 8005b38:	3130      	adds	r1, #48	@ 0x30
 8005b3a:	7083      	strb	r3, [r0, #2]
 8005b3c:	70c1      	strb	r1, [r0, #3]
 8005b3e:	1d03      	adds	r3, r0, #4
 8005b40:	e7f1      	b.n	8005b26 <__exponent+0x58>
	...

08005b44 <_printf_float>:
 8005b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b48:	b08d      	sub	sp, #52	@ 0x34
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b50:	4616      	mov	r6, r2
 8005b52:	461f      	mov	r7, r3
 8005b54:	4605      	mov	r5, r0
 8005b56:	f000 fcdb 	bl	8006510 <_localeconv_r>
 8005b5a:	6803      	ldr	r3, [r0, #0]
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fa fba6 	bl	80002b0 <strlen>
 8005b64:	2300      	movs	r3, #0
 8005b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b68:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6c:	9005      	str	r0, [sp, #20]
 8005b6e:	3307      	adds	r3, #7
 8005b70:	f023 0307 	bic.w	r3, r3, #7
 8005b74:	f103 0208 	add.w	r2, r3, #8
 8005b78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b7c:	f8d4 b000 	ldr.w	fp, [r4]
 8005b80:	f8c8 2000 	str.w	r2, [r8]
 8005b84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b8c:	9307      	str	r3, [sp, #28]
 8005b8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e0c <_printf_float+0x2c8>)
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba0:	f7fa ffe4 	bl	8000b6c <__aeabi_dcmpun>
 8005ba4:	bb70      	cbnz	r0, 8005c04 <_printf_float+0xc0>
 8005ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005baa:	4b98      	ldr	r3, [pc, #608]	@ (8005e0c <_printf_float+0x2c8>)
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	f7fa ffbe 	bl	8000b30 <__aeabi_dcmple>
 8005bb4:	bb30      	cbnz	r0, 8005c04 <_printf_float+0xc0>
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4640      	mov	r0, r8
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	f7fa ffad 	bl	8000b1c <__aeabi_dcmplt>
 8005bc2:	b110      	cbz	r0, 8005bca <_printf_float+0x86>
 8005bc4:	232d      	movs	r3, #45	@ 0x2d
 8005bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bca:	4a91      	ldr	r2, [pc, #580]	@ (8005e10 <_printf_float+0x2cc>)
 8005bcc:	4b91      	ldr	r3, [pc, #580]	@ (8005e14 <_printf_float+0x2d0>)
 8005bce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bd2:	bf94      	ite	ls
 8005bd4:	4690      	movls	r8, r2
 8005bd6:	4698      	movhi	r8, r3
 8005bd8:	2303      	movs	r3, #3
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	f02b 0304 	bic.w	r3, fp, #4
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	f04f 0900 	mov.w	r9, #0
 8005be6:	9700      	str	r7, [sp, #0]
 8005be8:	4633      	mov	r3, r6
 8005bea:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005bec:	4621      	mov	r1, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 f9d2 	bl	8005f98 <_printf_common>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	f040 808d 	bne.w	8005d14 <_printf_float+0x1d0>
 8005bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfe:	b00d      	add	sp, #52	@ 0x34
 8005c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	f7fa ffae 	bl	8000b6c <__aeabi_dcmpun>
 8005c10:	b140      	cbz	r0, 8005c24 <_printf_float+0xe0>
 8005c12:	464b      	mov	r3, r9
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bfbc      	itt	lt
 8005c18:	232d      	movlt	r3, #45	@ 0x2d
 8005c1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e18 <_printf_float+0x2d4>)
 8005c20:	4b7e      	ldr	r3, [pc, #504]	@ (8005e1c <_printf_float+0x2d8>)
 8005c22:	e7d4      	b.n	8005bce <_printf_float+0x8a>
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c2a:	9206      	str	r2, [sp, #24]
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	d13b      	bne.n	8005ca8 <_printf_float+0x164>
 8005c30:	2306      	movs	r3, #6
 8005c32:	6063      	str	r3, [r4, #4]
 8005c34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6022      	str	r2, [r4, #0]
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c40:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c44:	ab09      	add	r3, sp, #36	@ 0x24
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	6861      	ldr	r1, [r4, #4]
 8005c4a:	ec49 8b10 	vmov	d0, r8, r9
 8005c4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7ff fed6 	bl	8005a04 <__cvt>
 8005c58:	9b06      	ldr	r3, [sp, #24]
 8005c5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c5c:	2b47      	cmp	r3, #71	@ 0x47
 8005c5e:	4680      	mov	r8, r0
 8005c60:	d129      	bne.n	8005cb6 <_printf_float+0x172>
 8005c62:	1cc8      	adds	r0, r1, #3
 8005c64:	db02      	blt.n	8005c6c <_printf_float+0x128>
 8005c66:	6863      	ldr	r3, [r4, #4]
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	dd41      	ble.n	8005cf0 <_printf_float+0x1ac>
 8005c6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c70:	fa5f fa8a 	uxtb.w	sl, sl
 8005c74:	3901      	subs	r1, #1
 8005c76:	4652      	mov	r2, sl
 8005c78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c7e:	f7ff ff26 	bl	8005ace <__exponent>
 8005c82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c84:	1813      	adds	r3, r2, r0
 8005c86:	2a01      	cmp	r2, #1
 8005c88:	4681      	mov	r9, r0
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	dc02      	bgt.n	8005c94 <_printf_float+0x150>
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	07d2      	lsls	r2, r2, #31
 8005c92:	d501      	bpl.n	8005c98 <_printf_float+0x154>
 8005c94:	3301      	adds	r3, #1
 8005c96:	6123      	str	r3, [r4, #16]
 8005c98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0a2      	beq.n	8005be6 <_printf_float+0xa2>
 8005ca0:	232d      	movs	r3, #45	@ 0x2d
 8005ca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ca6:	e79e      	b.n	8005be6 <_printf_float+0xa2>
 8005ca8:	9a06      	ldr	r2, [sp, #24]
 8005caa:	2a47      	cmp	r2, #71	@ 0x47
 8005cac:	d1c2      	bne.n	8005c34 <_printf_float+0xf0>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1c0      	bne.n	8005c34 <_printf_float+0xf0>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e7bd      	b.n	8005c32 <_printf_float+0xee>
 8005cb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cba:	d9db      	bls.n	8005c74 <_printf_float+0x130>
 8005cbc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cc0:	d118      	bne.n	8005cf4 <_printf_float+0x1b0>
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	dd0b      	ble.n	8005ce0 <_printf_float+0x19c>
 8005cc8:	6121      	str	r1, [r4, #16]
 8005cca:	b913      	cbnz	r3, 8005cd2 <_printf_float+0x18e>
 8005ccc:	6822      	ldr	r2, [r4, #0]
 8005cce:	07d0      	lsls	r0, r2, #31
 8005cd0:	d502      	bpl.n	8005cd8 <_printf_float+0x194>
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	440b      	add	r3, r1
 8005cd6:	6123      	str	r3, [r4, #16]
 8005cd8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cda:	f04f 0900 	mov.w	r9, #0
 8005cde:	e7db      	b.n	8005c98 <_printf_float+0x154>
 8005ce0:	b913      	cbnz	r3, 8005ce8 <_printf_float+0x1a4>
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	07d2      	lsls	r2, r2, #31
 8005ce6:	d501      	bpl.n	8005cec <_printf_float+0x1a8>
 8005ce8:	3302      	adds	r3, #2
 8005cea:	e7f4      	b.n	8005cd6 <_printf_float+0x192>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e7f2      	b.n	8005cd6 <_printf_float+0x192>
 8005cf0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cf6:	4299      	cmp	r1, r3
 8005cf8:	db05      	blt.n	8005d06 <_printf_float+0x1c2>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	6121      	str	r1, [r4, #16]
 8005cfe:	07d8      	lsls	r0, r3, #31
 8005d00:	d5ea      	bpl.n	8005cd8 <_printf_float+0x194>
 8005d02:	1c4b      	adds	r3, r1, #1
 8005d04:	e7e7      	b.n	8005cd6 <_printf_float+0x192>
 8005d06:	2900      	cmp	r1, #0
 8005d08:	bfd4      	ite	le
 8005d0a:	f1c1 0202 	rsble	r2, r1, #2
 8005d0e:	2201      	movgt	r2, #1
 8005d10:	4413      	add	r3, r2
 8005d12:	e7e0      	b.n	8005cd6 <_printf_float+0x192>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	055a      	lsls	r2, r3, #21
 8005d18:	d407      	bmi.n	8005d2a <_printf_float+0x1e6>
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4628      	mov	r0, r5
 8005d22:	47b8      	blx	r7
 8005d24:	3001      	adds	r0, #1
 8005d26:	d12b      	bne.n	8005d80 <_printf_float+0x23c>
 8005d28:	e767      	b.n	8005bfa <_printf_float+0xb6>
 8005d2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d2e:	f240 80dd 	bls.w	8005eec <_printf_float+0x3a8>
 8005d32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d36:	2200      	movs	r2, #0
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f7fa fee5 	bl	8000b08 <__aeabi_dcmpeq>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d033      	beq.n	8005daa <_printf_float+0x266>
 8005d42:	4a37      	ldr	r2, [pc, #220]	@ (8005e20 <_printf_float+0x2dc>)
 8005d44:	2301      	movs	r3, #1
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f af54 	beq.w	8005bfa <_printf_float+0xb6>
 8005d52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d56:	4543      	cmp	r3, r8
 8005d58:	db02      	blt.n	8005d60 <_printf_float+0x21c>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	07d8      	lsls	r0, r3, #31
 8005d5e:	d50f      	bpl.n	8005d80 <_printf_float+0x23c>
 8005d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f43f af45 	beq.w	8005bfa <_printf_float+0xb6>
 8005d70:	f04f 0900 	mov.w	r9, #0
 8005d74:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d78:	f104 0a1a 	add.w	sl, r4, #26
 8005d7c:	45c8      	cmp	r8, r9
 8005d7e:	dc09      	bgt.n	8005d94 <_printf_float+0x250>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	079b      	lsls	r3, r3, #30
 8005d84:	f100 8103 	bmi.w	8005f8e <_printf_float+0x44a>
 8005d88:	68e0      	ldr	r0, [r4, #12]
 8005d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d8c:	4298      	cmp	r0, r3
 8005d8e:	bfb8      	it	lt
 8005d90:	4618      	movlt	r0, r3
 8005d92:	e734      	b.n	8005bfe <_printf_float+0xba>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4652      	mov	r2, sl
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f43f af2b 	beq.w	8005bfa <_printf_float+0xb6>
 8005da4:	f109 0901 	add.w	r9, r9, #1
 8005da8:	e7e8      	b.n	8005d7c <_printf_float+0x238>
 8005daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dc39      	bgt.n	8005e24 <_printf_float+0x2e0>
 8005db0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e20 <_printf_float+0x2dc>)
 8005db2:	2301      	movs	r3, #1
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f af1d 	beq.w	8005bfa <_printf_float+0xb6>
 8005dc0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005dc4:	ea59 0303 	orrs.w	r3, r9, r3
 8005dc8:	d102      	bne.n	8005dd0 <_printf_float+0x28c>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	07d9      	lsls	r1, r3, #31
 8005dce:	d5d7      	bpl.n	8005d80 <_printf_float+0x23c>
 8005dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b8      	blx	r7
 8005dda:	3001      	adds	r0, #1
 8005ddc:	f43f af0d 	beq.w	8005bfa <_printf_float+0xb6>
 8005de0:	f04f 0a00 	mov.w	sl, #0
 8005de4:	f104 0b1a 	add.w	fp, r4, #26
 8005de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dea:	425b      	negs	r3, r3
 8005dec:	4553      	cmp	r3, sl
 8005dee:	dc01      	bgt.n	8005df4 <_printf_float+0x2b0>
 8005df0:	464b      	mov	r3, r9
 8005df2:	e793      	b.n	8005d1c <_printf_float+0x1d8>
 8005df4:	2301      	movs	r3, #1
 8005df6:	465a      	mov	r2, fp
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f aefb 	beq.w	8005bfa <_printf_float+0xb6>
 8005e04:	f10a 0a01 	add.w	sl, sl, #1
 8005e08:	e7ee      	b.n	8005de8 <_printf_float+0x2a4>
 8005e0a:	bf00      	nop
 8005e0c:	7fefffff 	.word	0x7fefffff
 8005e10:	0800890c 	.word	0x0800890c
 8005e14:	08008910 	.word	0x08008910
 8005e18:	08008914 	.word	0x08008914
 8005e1c:	08008918 	.word	0x08008918
 8005e20:	0800891c 	.word	0x0800891c
 8005e24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e2a:	4553      	cmp	r3, sl
 8005e2c:	bfa8      	it	ge
 8005e2e:	4653      	movge	r3, sl
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	4699      	mov	r9, r3
 8005e34:	dc36      	bgt.n	8005ea4 <_printf_float+0x360>
 8005e36:	f04f 0b00 	mov.w	fp, #0
 8005e3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e3e:	f104 021a 	add.w	r2, r4, #26
 8005e42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e44:	9306      	str	r3, [sp, #24]
 8005e46:	eba3 0309 	sub.w	r3, r3, r9
 8005e4a:	455b      	cmp	r3, fp
 8005e4c:	dc31      	bgt.n	8005eb2 <_printf_float+0x36e>
 8005e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e50:	459a      	cmp	sl, r3
 8005e52:	dc3a      	bgt.n	8005eca <_printf_float+0x386>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	07da      	lsls	r2, r3, #31
 8005e58:	d437      	bmi.n	8005eca <_printf_float+0x386>
 8005e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e5c:	ebaa 0903 	sub.w	r9, sl, r3
 8005e60:	9b06      	ldr	r3, [sp, #24]
 8005e62:	ebaa 0303 	sub.w	r3, sl, r3
 8005e66:	4599      	cmp	r9, r3
 8005e68:	bfa8      	it	ge
 8005e6a:	4699      	movge	r9, r3
 8005e6c:	f1b9 0f00 	cmp.w	r9, #0
 8005e70:	dc33      	bgt.n	8005eda <_printf_float+0x396>
 8005e72:	f04f 0800 	mov.w	r8, #0
 8005e76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e7a:	f104 0b1a 	add.w	fp, r4, #26
 8005e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e80:	ebaa 0303 	sub.w	r3, sl, r3
 8005e84:	eba3 0309 	sub.w	r3, r3, r9
 8005e88:	4543      	cmp	r3, r8
 8005e8a:	f77f af79 	ble.w	8005d80 <_printf_float+0x23c>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	465a      	mov	r2, fp
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f43f aeae 	beq.w	8005bfa <_printf_float+0xb6>
 8005e9e:	f108 0801 	add.w	r8, r8, #1
 8005ea2:	e7ec      	b.n	8005e7e <_printf_float+0x33a>
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	d1c2      	bne.n	8005e36 <_printf_float+0x2f2>
 8005eb0:	e6a3      	b.n	8005bfa <_printf_float+0xb6>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	9206      	str	r2, [sp, #24]
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f ae9c 	beq.w	8005bfa <_printf_float+0xb6>
 8005ec2:	9a06      	ldr	r2, [sp, #24]
 8005ec4:	f10b 0b01 	add.w	fp, fp, #1
 8005ec8:	e7bb      	b.n	8005e42 <_printf_float+0x2fe>
 8005eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b8      	blx	r7
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d1c0      	bne.n	8005e5a <_printf_float+0x316>
 8005ed8:	e68f      	b.n	8005bfa <_printf_float+0xb6>
 8005eda:	9a06      	ldr	r2, [sp, #24]
 8005edc:	464b      	mov	r3, r9
 8005ede:	4442      	add	r2, r8
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d1c3      	bne.n	8005e72 <_printf_float+0x32e>
 8005eea:	e686      	b.n	8005bfa <_printf_float+0xb6>
 8005eec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ef0:	f1ba 0f01 	cmp.w	sl, #1
 8005ef4:	dc01      	bgt.n	8005efa <_printf_float+0x3b6>
 8005ef6:	07db      	lsls	r3, r3, #31
 8005ef8:	d536      	bpl.n	8005f68 <_printf_float+0x424>
 8005efa:	2301      	movs	r3, #1
 8005efc:	4642      	mov	r2, r8
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	f43f ae78 	beq.w	8005bfa <_printf_float+0xb6>
 8005f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f ae70 	beq.w	8005bfa <_printf_float+0xb6>
 8005f1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2300      	movs	r3, #0
 8005f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f26:	f7fa fdef 	bl	8000b08 <__aeabi_dcmpeq>
 8005f2a:	b9c0      	cbnz	r0, 8005f5e <_printf_float+0x41a>
 8005f2c:	4653      	mov	r3, sl
 8005f2e:	f108 0201 	add.w	r2, r8, #1
 8005f32:	4631      	mov	r1, r6
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b8      	blx	r7
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d10c      	bne.n	8005f56 <_printf_float+0x412>
 8005f3c:	e65d      	b.n	8005bfa <_printf_float+0xb6>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	465a      	mov	r2, fp
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	47b8      	blx	r7
 8005f48:	3001      	adds	r0, #1
 8005f4a:	f43f ae56 	beq.w	8005bfa <_printf_float+0xb6>
 8005f4e:	f108 0801 	add.w	r8, r8, #1
 8005f52:	45d0      	cmp	r8, sl
 8005f54:	dbf3      	blt.n	8005f3e <_printf_float+0x3fa>
 8005f56:	464b      	mov	r3, r9
 8005f58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f5c:	e6df      	b.n	8005d1e <_printf_float+0x1da>
 8005f5e:	f04f 0800 	mov.w	r8, #0
 8005f62:	f104 0b1a 	add.w	fp, r4, #26
 8005f66:	e7f4      	b.n	8005f52 <_printf_float+0x40e>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	e7e1      	b.n	8005f32 <_printf_float+0x3ee>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	464a      	mov	r2, r9
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f ae3e 	beq.w	8005bfa <_printf_float+0xb6>
 8005f7e:	f108 0801 	add.w	r8, r8, #1
 8005f82:	68e3      	ldr	r3, [r4, #12]
 8005f84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f86:	1a5b      	subs	r3, r3, r1
 8005f88:	4543      	cmp	r3, r8
 8005f8a:	dcf0      	bgt.n	8005f6e <_printf_float+0x42a>
 8005f8c:	e6fc      	b.n	8005d88 <_printf_float+0x244>
 8005f8e:	f04f 0800 	mov.w	r8, #0
 8005f92:	f104 0919 	add.w	r9, r4, #25
 8005f96:	e7f4      	b.n	8005f82 <_printf_float+0x43e>

08005f98 <_printf_common>:
 8005f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f9c:	4616      	mov	r6, r2
 8005f9e:	4698      	mov	r8, r3
 8005fa0:	688a      	ldr	r2, [r1, #8]
 8005fa2:	690b      	ldr	r3, [r1, #16]
 8005fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	bfb8      	it	lt
 8005fac:	4613      	movlt	r3, r2
 8005fae:	6033      	str	r3, [r6, #0]
 8005fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	b10a      	cbz	r2, 8005fbe <_printf_common+0x26>
 8005fba:	3301      	adds	r3, #1
 8005fbc:	6033      	str	r3, [r6, #0]
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	0699      	lsls	r1, r3, #26
 8005fc2:	bf42      	ittt	mi
 8005fc4:	6833      	ldrmi	r3, [r6, #0]
 8005fc6:	3302      	addmi	r3, #2
 8005fc8:	6033      	strmi	r3, [r6, #0]
 8005fca:	6825      	ldr	r5, [r4, #0]
 8005fcc:	f015 0506 	ands.w	r5, r5, #6
 8005fd0:	d106      	bne.n	8005fe0 <_printf_common+0x48>
 8005fd2:	f104 0a19 	add.w	sl, r4, #25
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	6832      	ldr	r2, [r6, #0]
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	42ab      	cmp	r3, r5
 8005fde:	dc26      	bgt.n	800602e <_printf_common+0x96>
 8005fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	3b00      	subs	r3, #0
 8005fe8:	bf18      	it	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	0692      	lsls	r2, r2, #26
 8005fee:	d42b      	bmi.n	8006048 <_printf_common+0xb0>
 8005ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	47c8      	blx	r9
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d01e      	beq.n	800603c <_printf_common+0xa4>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	f003 0306 	and.w	r3, r3, #6
 8006006:	2b04      	cmp	r3, #4
 8006008:	bf02      	ittt	eq
 800600a:	68e5      	ldreq	r5, [r4, #12]
 800600c:	6833      	ldreq	r3, [r6, #0]
 800600e:	1aed      	subeq	r5, r5, r3
 8006010:	68a3      	ldr	r3, [r4, #8]
 8006012:	bf0c      	ite	eq
 8006014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006018:	2500      	movne	r5, #0
 800601a:	4293      	cmp	r3, r2
 800601c:	bfc4      	itt	gt
 800601e:	1a9b      	subgt	r3, r3, r2
 8006020:	18ed      	addgt	r5, r5, r3
 8006022:	2600      	movs	r6, #0
 8006024:	341a      	adds	r4, #26
 8006026:	42b5      	cmp	r5, r6
 8006028:	d11a      	bne.n	8006060 <_printf_common+0xc8>
 800602a:	2000      	movs	r0, #0
 800602c:	e008      	b.n	8006040 <_printf_common+0xa8>
 800602e:	2301      	movs	r3, #1
 8006030:	4652      	mov	r2, sl
 8006032:	4641      	mov	r1, r8
 8006034:	4638      	mov	r0, r7
 8006036:	47c8      	blx	r9
 8006038:	3001      	adds	r0, #1
 800603a:	d103      	bne.n	8006044 <_printf_common+0xac>
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006044:	3501      	adds	r5, #1
 8006046:	e7c6      	b.n	8005fd6 <_printf_common+0x3e>
 8006048:	18e1      	adds	r1, r4, r3
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	2030      	movs	r0, #48	@ 0x30
 800604e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006052:	4422      	add	r2, r4
 8006054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800605c:	3302      	adds	r3, #2
 800605e:	e7c7      	b.n	8005ff0 <_printf_common+0x58>
 8006060:	2301      	movs	r3, #1
 8006062:	4622      	mov	r2, r4
 8006064:	4641      	mov	r1, r8
 8006066:	4638      	mov	r0, r7
 8006068:	47c8      	blx	r9
 800606a:	3001      	adds	r0, #1
 800606c:	d0e6      	beq.n	800603c <_printf_common+0xa4>
 800606e:	3601      	adds	r6, #1
 8006070:	e7d9      	b.n	8006026 <_printf_common+0x8e>
	...

08006074 <_printf_i>:
 8006074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	7e0f      	ldrb	r7, [r1, #24]
 800607a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800607c:	2f78      	cmp	r7, #120	@ 0x78
 800607e:	4691      	mov	r9, r2
 8006080:	4680      	mov	r8, r0
 8006082:	460c      	mov	r4, r1
 8006084:	469a      	mov	sl, r3
 8006086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800608a:	d807      	bhi.n	800609c <_printf_i+0x28>
 800608c:	2f62      	cmp	r7, #98	@ 0x62
 800608e:	d80a      	bhi.n	80060a6 <_printf_i+0x32>
 8006090:	2f00      	cmp	r7, #0
 8006092:	f000 80d2 	beq.w	800623a <_printf_i+0x1c6>
 8006096:	2f58      	cmp	r7, #88	@ 0x58
 8006098:	f000 80b9 	beq.w	800620e <_printf_i+0x19a>
 800609c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060a4:	e03a      	b.n	800611c <_printf_i+0xa8>
 80060a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060aa:	2b15      	cmp	r3, #21
 80060ac:	d8f6      	bhi.n	800609c <_printf_i+0x28>
 80060ae:	a101      	add	r1, pc, #4	@ (adr r1, 80060b4 <_printf_i+0x40>)
 80060b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060b4:	0800610d 	.word	0x0800610d
 80060b8:	08006121 	.word	0x08006121
 80060bc:	0800609d 	.word	0x0800609d
 80060c0:	0800609d 	.word	0x0800609d
 80060c4:	0800609d 	.word	0x0800609d
 80060c8:	0800609d 	.word	0x0800609d
 80060cc:	08006121 	.word	0x08006121
 80060d0:	0800609d 	.word	0x0800609d
 80060d4:	0800609d 	.word	0x0800609d
 80060d8:	0800609d 	.word	0x0800609d
 80060dc:	0800609d 	.word	0x0800609d
 80060e0:	08006221 	.word	0x08006221
 80060e4:	0800614b 	.word	0x0800614b
 80060e8:	080061db 	.word	0x080061db
 80060ec:	0800609d 	.word	0x0800609d
 80060f0:	0800609d 	.word	0x0800609d
 80060f4:	08006243 	.word	0x08006243
 80060f8:	0800609d 	.word	0x0800609d
 80060fc:	0800614b 	.word	0x0800614b
 8006100:	0800609d 	.word	0x0800609d
 8006104:	0800609d 	.word	0x0800609d
 8006108:	080061e3 	.word	0x080061e3
 800610c:	6833      	ldr	r3, [r6, #0]
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6032      	str	r2, [r6, #0]
 8006114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800611c:	2301      	movs	r3, #1
 800611e:	e09d      	b.n	800625c <_printf_i+0x1e8>
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	6820      	ldr	r0, [r4, #0]
 8006124:	1d19      	adds	r1, r3, #4
 8006126:	6031      	str	r1, [r6, #0]
 8006128:	0606      	lsls	r6, r0, #24
 800612a:	d501      	bpl.n	8006130 <_printf_i+0xbc>
 800612c:	681d      	ldr	r5, [r3, #0]
 800612e:	e003      	b.n	8006138 <_printf_i+0xc4>
 8006130:	0645      	lsls	r5, r0, #25
 8006132:	d5fb      	bpl.n	800612c <_printf_i+0xb8>
 8006134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006138:	2d00      	cmp	r5, #0
 800613a:	da03      	bge.n	8006144 <_printf_i+0xd0>
 800613c:	232d      	movs	r3, #45	@ 0x2d
 800613e:	426d      	negs	r5, r5
 8006140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006144:	4859      	ldr	r0, [pc, #356]	@ (80062ac <_printf_i+0x238>)
 8006146:	230a      	movs	r3, #10
 8006148:	e011      	b.n	800616e <_printf_i+0xfa>
 800614a:	6821      	ldr	r1, [r4, #0]
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	0608      	lsls	r0, r1, #24
 8006150:	f853 5b04 	ldr.w	r5, [r3], #4
 8006154:	d402      	bmi.n	800615c <_printf_i+0xe8>
 8006156:	0649      	lsls	r1, r1, #25
 8006158:	bf48      	it	mi
 800615a:	b2ad      	uxthmi	r5, r5
 800615c:	2f6f      	cmp	r7, #111	@ 0x6f
 800615e:	4853      	ldr	r0, [pc, #332]	@ (80062ac <_printf_i+0x238>)
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	bf14      	ite	ne
 8006164:	230a      	movne	r3, #10
 8006166:	2308      	moveq	r3, #8
 8006168:	2100      	movs	r1, #0
 800616a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800616e:	6866      	ldr	r6, [r4, #4]
 8006170:	60a6      	str	r6, [r4, #8]
 8006172:	2e00      	cmp	r6, #0
 8006174:	bfa2      	ittt	ge
 8006176:	6821      	ldrge	r1, [r4, #0]
 8006178:	f021 0104 	bicge.w	r1, r1, #4
 800617c:	6021      	strge	r1, [r4, #0]
 800617e:	b90d      	cbnz	r5, 8006184 <_printf_i+0x110>
 8006180:	2e00      	cmp	r6, #0
 8006182:	d04b      	beq.n	800621c <_printf_i+0x1a8>
 8006184:	4616      	mov	r6, r2
 8006186:	fbb5 f1f3 	udiv	r1, r5, r3
 800618a:	fb03 5711 	mls	r7, r3, r1, r5
 800618e:	5dc7      	ldrb	r7, [r0, r7]
 8006190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006194:	462f      	mov	r7, r5
 8006196:	42bb      	cmp	r3, r7
 8006198:	460d      	mov	r5, r1
 800619a:	d9f4      	bls.n	8006186 <_printf_i+0x112>
 800619c:	2b08      	cmp	r3, #8
 800619e:	d10b      	bne.n	80061b8 <_printf_i+0x144>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	07df      	lsls	r7, r3, #31
 80061a4:	d508      	bpl.n	80061b8 <_printf_i+0x144>
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	6861      	ldr	r1, [r4, #4]
 80061aa:	4299      	cmp	r1, r3
 80061ac:	bfde      	ittt	le
 80061ae:	2330      	movle	r3, #48	@ 0x30
 80061b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061b8:	1b92      	subs	r2, r2, r6
 80061ba:	6122      	str	r2, [r4, #16]
 80061bc:	f8cd a000 	str.w	sl, [sp]
 80061c0:	464b      	mov	r3, r9
 80061c2:	aa03      	add	r2, sp, #12
 80061c4:	4621      	mov	r1, r4
 80061c6:	4640      	mov	r0, r8
 80061c8:	f7ff fee6 	bl	8005f98 <_printf_common>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d14a      	bne.n	8006266 <_printf_i+0x1f2>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	b004      	add	sp, #16
 80061d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	f043 0320 	orr.w	r3, r3, #32
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	4833      	ldr	r0, [pc, #204]	@ (80062b0 <_printf_i+0x23c>)
 80061e4:	2778      	movs	r7, #120	@ 0x78
 80061e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	6831      	ldr	r1, [r6, #0]
 80061ee:	061f      	lsls	r7, r3, #24
 80061f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80061f4:	d402      	bmi.n	80061fc <_printf_i+0x188>
 80061f6:	065f      	lsls	r7, r3, #25
 80061f8:	bf48      	it	mi
 80061fa:	b2ad      	uxthmi	r5, r5
 80061fc:	6031      	str	r1, [r6, #0]
 80061fe:	07d9      	lsls	r1, r3, #31
 8006200:	bf44      	itt	mi
 8006202:	f043 0320 	orrmi.w	r3, r3, #32
 8006206:	6023      	strmi	r3, [r4, #0]
 8006208:	b11d      	cbz	r5, 8006212 <_printf_i+0x19e>
 800620a:	2310      	movs	r3, #16
 800620c:	e7ac      	b.n	8006168 <_printf_i+0xf4>
 800620e:	4827      	ldr	r0, [pc, #156]	@ (80062ac <_printf_i+0x238>)
 8006210:	e7e9      	b.n	80061e6 <_printf_i+0x172>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f023 0320 	bic.w	r3, r3, #32
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	e7f6      	b.n	800620a <_printf_i+0x196>
 800621c:	4616      	mov	r6, r2
 800621e:	e7bd      	b.n	800619c <_printf_i+0x128>
 8006220:	6833      	ldr	r3, [r6, #0]
 8006222:	6825      	ldr	r5, [r4, #0]
 8006224:	6961      	ldr	r1, [r4, #20]
 8006226:	1d18      	adds	r0, r3, #4
 8006228:	6030      	str	r0, [r6, #0]
 800622a:	062e      	lsls	r6, r5, #24
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	d501      	bpl.n	8006234 <_printf_i+0x1c0>
 8006230:	6019      	str	r1, [r3, #0]
 8006232:	e002      	b.n	800623a <_printf_i+0x1c6>
 8006234:	0668      	lsls	r0, r5, #25
 8006236:	d5fb      	bpl.n	8006230 <_printf_i+0x1bc>
 8006238:	8019      	strh	r1, [r3, #0]
 800623a:	2300      	movs	r3, #0
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	4616      	mov	r6, r2
 8006240:	e7bc      	b.n	80061bc <_printf_i+0x148>
 8006242:	6833      	ldr	r3, [r6, #0]
 8006244:	1d1a      	adds	r2, r3, #4
 8006246:	6032      	str	r2, [r6, #0]
 8006248:	681e      	ldr	r6, [r3, #0]
 800624a:	6862      	ldr	r2, [r4, #4]
 800624c:	2100      	movs	r1, #0
 800624e:	4630      	mov	r0, r6
 8006250:	f7f9 ffde 	bl	8000210 <memchr>
 8006254:	b108      	cbz	r0, 800625a <_printf_i+0x1e6>
 8006256:	1b80      	subs	r0, r0, r6
 8006258:	6060      	str	r0, [r4, #4]
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	2300      	movs	r3, #0
 8006260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006264:	e7aa      	b.n	80061bc <_printf_i+0x148>
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	4632      	mov	r2, r6
 800626a:	4649      	mov	r1, r9
 800626c:	4640      	mov	r0, r8
 800626e:	47d0      	blx	sl
 8006270:	3001      	adds	r0, #1
 8006272:	d0ad      	beq.n	80061d0 <_printf_i+0x15c>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	d413      	bmi.n	80062a2 <_printf_i+0x22e>
 800627a:	68e0      	ldr	r0, [r4, #12]
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	4298      	cmp	r0, r3
 8006280:	bfb8      	it	lt
 8006282:	4618      	movlt	r0, r3
 8006284:	e7a6      	b.n	80061d4 <_printf_i+0x160>
 8006286:	2301      	movs	r3, #1
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d09d      	beq.n	80061d0 <_printf_i+0x15c>
 8006294:	3501      	adds	r5, #1
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	9903      	ldr	r1, [sp, #12]
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	42ab      	cmp	r3, r5
 800629e:	dcf2      	bgt.n	8006286 <_printf_i+0x212>
 80062a0:	e7eb      	b.n	800627a <_printf_i+0x206>
 80062a2:	2500      	movs	r5, #0
 80062a4:	f104 0619 	add.w	r6, r4, #25
 80062a8:	e7f5      	b.n	8006296 <_printf_i+0x222>
 80062aa:	bf00      	nop
 80062ac:	0800891e 	.word	0x0800891e
 80062b0:	0800892f 	.word	0x0800892f

080062b4 <std>:
 80062b4:	2300      	movs	r3, #0
 80062b6:	b510      	push	{r4, lr}
 80062b8:	4604      	mov	r4, r0
 80062ba:	e9c0 3300 	strd	r3, r3, [r0]
 80062be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062c2:	6083      	str	r3, [r0, #8]
 80062c4:	8181      	strh	r1, [r0, #12]
 80062c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80062c8:	81c2      	strh	r2, [r0, #14]
 80062ca:	6183      	str	r3, [r0, #24]
 80062cc:	4619      	mov	r1, r3
 80062ce:	2208      	movs	r2, #8
 80062d0:	305c      	adds	r0, #92	@ 0x5c
 80062d2:	f000 f914 	bl	80064fe <memset>
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <std+0x58>)
 80062d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80062da:	4b0d      	ldr	r3, [pc, #52]	@ (8006310 <std+0x5c>)
 80062dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062de:	4b0d      	ldr	r3, [pc, #52]	@ (8006314 <std+0x60>)
 80062e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006318 <std+0x64>)
 80062e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <std+0x68>)
 80062e8:	6224      	str	r4, [r4, #32]
 80062ea:	429c      	cmp	r4, r3
 80062ec:	d006      	beq.n	80062fc <std+0x48>
 80062ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062f2:	4294      	cmp	r4, r2
 80062f4:	d002      	beq.n	80062fc <std+0x48>
 80062f6:	33d0      	adds	r3, #208	@ 0xd0
 80062f8:	429c      	cmp	r4, r3
 80062fa:	d105      	bne.n	8006308 <std+0x54>
 80062fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006304:	f000 b978 	b.w	80065f8 <__retarget_lock_init_recursive>
 8006308:	bd10      	pop	{r4, pc}
 800630a:	bf00      	nop
 800630c:	08006479 	.word	0x08006479
 8006310:	0800649b 	.word	0x0800649b
 8006314:	080064d3 	.word	0x080064d3
 8006318:	080064f7 	.word	0x080064f7
 800631c:	20000444 	.word	0x20000444

08006320 <stdio_exit_handler>:
 8006320:	4a02      	ldr	r2, [pc, #8]	@ (800632c <stdio_exit_handler+0xc>)
 8006322:	4903      	ldr	r1, [pc, #12]	@ (8006330 <stdio_exit_handler+0x10>)
 8006324:	4803      	ldr	r0, [pc, #12]	@ (8006334 <stdio_exit_handler+0x14>)
 8006326:	f000 b869 	b.w	80063fc <_fwalk_sglue>
 800632a:	bf00      	nop
 800632c:	2000001c 	.word	0x2000001c
 8006330:	08007f55 	.word	0x08007f55
 8006334:	2000002c 	.word	0x2000002c

08006338 <cleanup_stdio>:
 8006338:	6841      	ldr	r1, [r0, #4]
 800633a:	4b0c      	ldr	r3, [pc, #48]	@ (800636c <cleanup_stdio+0x34>)
 800633c:	4299      	cmp	r1, r3
 800633e:	b510      	push	{r4, lr}
 8006340:	4604      	mov	r4, r0
 8006342:	d001      	beq.n	8006348 <cleanup_stdio+0x10>
 8006344:	f001 fe06 	bl	8007f54 <_fflush_r>
 8006348:	68a1      	ldr	r1, [r4, #8]
 800634a:	4b09      	ldr	r3, [pc, #36]	@ (8006370 <cleanup_stdio+0x38>)
 800634c:	4299      	cmp	r1, r3
 800634e:	d002      	beq.n	8006356 <cleanup_stdio+0x1e>
 8006350:	4620      	mov	r0, r4
 8006352:	f001 fdff 	bl	8007f54 <_fflush_r>
 8006356:	68e1      	ldr	r1, [r4, #12]
 8006358:	4b06      	ldr	r3, [pc, #24]	@ (8006374 <cleanup_stdio+0x3c>)
 800635a:	4299      	cmp	r1, r3
 800635c:	d004      	beq.n	8006368 <cleanup_stdio+0x30>
 800635e:	4620      	mov	r0, r4
 8006360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006364:	f001 bdf6 	b.w	8007f54 <_fflush_r>
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	20000444 	.word	0x20000444
 8006370:	200004ac 	.word	0x200004ac
 8006374:	20000514 	.word	0x20000514

08006378 <global_stdio_init.part.0>:
 8006378:	b510      	push	{r4, lr}
 800637a:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <global_stdio_init.part.0+0x30>)
 800637c:	4c0b      	ldr	r4, [pc, #44]	@ (80063ac <global_stdio_init.part.0+0x34>)
 800637e:	4a0c      	ldr	r2, [pc, #48]	@ (80063b0 <global_stdio_init.part.0+0x38>)
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	4620      	mov	r0, r4
 8006384:	2200      	movs	r2, #0
 8006386:	2104      	movs	r1, #4
 8006388:	f7ff ff94 	bl	80062b4 <std>
 800638c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006390:	2201      	movs	r2, #1
 8006392:	2109      	movs	r1, #9
 8006394:	f7ff ff8e 	bl	80062b4 <std>
 8006398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800639c:	2202      	movs	r2, #2
 800639e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063a2:	2112      	movs	r1, #18
 80063a4:	f7ff bf86 	b.w	80062b4 <std>
 80063a8:	2000057c 	.word	0x2000057c
 80063ac:	20000444 	.word	0x20000444
 80063b0:	08006321 	.word	0x08006321

080063b4 <__sfp_lock_acquire>:
 80063b4:	4801      	ldr	r0, [pc, #4]	@ (80063bc <__sfp_lock_acquire+0x8>)
 80063b6:	f000 b920 	b.w	80065fa <__retarget_lock_acquire_recursive>
 80063ba:	bf00      	nop
 80063bc:	20000585 	.word	0x20000585

080063c0 <__sfp_lock_release>:
 80063c0:	4801      	ldr	r0, [pc, #4]	@ (80063c8 <__sfp_lock_release+0x8>)
 80063c2:	f000 b91b 	b.w	80065fc <__retarget_lock_release_recursive>
 80063c6:	bf00      	nop
 80063c8:	20000585 	.word	0x20000585

080063cc <__sinit>:
 80063cc:	b510      	push	{r4, lr}
 80063ce:	4604      	mov	r4, r0
 80063d0:	f7ff fff0 	bl	80063b4 <__sfp_lock_acquire>
 80063d4:	6a23      	ldr	r3, [r4, #32]
 80063d6:	b11b      	cbz	r3, 80063e0 <__sinit+0x14>
 80063d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063dc:	f7ff bff0 	b.w	80063c0 <__sfp_lock_release>
 80063e0:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <__sinit+0x28>)
 80063e2:	6223      	str	r3, [r4, #32]
 80063e4:	4b04      	ldr	r3, [pc, #16]	@ (80063f8 <__sinit+0x2c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f5      	bne.n	80063d8 <__sinit+0xc>
 80063ec:	f7ff ffc4 	bl	8006378 <global_stdio_init.part.0>
 80063f0:	e7f2      	b.n	80063d8 <__sinit+0xc>
 80063f2:	bf00      	nop
 80063f4:	08006339 	.word	0x08006339
 80063f8:	2000057c 	.word	0x2000057c

080063fc <_fwalk_sglue>:
 80063fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006400:	4607      	mov	r7, r0
 8006402:	4688      	mov	r8, r1
 8006404:	4614      	mov	r4, r2
 8006406:	2600      	movs	r6, #0
 8006408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800640c:	f1b9 0901 	subs.w	r9, r9, #1
 8006410:	d505      	bpl.n	800641e <_fwalk_sglue+0x22>
 8006412:	6824      	ldr	r4, [r4, #0]
 8006414:	2c00      	cmp	r4, #0
 8006416:	d1f7      	bne.n	8006408 <_fwalk_sglue+0xc>
 8006418:	4630      	mov	r0, r6
 800641a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800641e:	89ab      	ldrh	r3, [r5, #12]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d907      	bls.n	8006434 <_fwalk_sglue+0x38>
 8006424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006428:	3301      	adds	r3, #1
 800642a:	d003      	beq.n	8006434 <_fwalk_sglue+0x38>
 800642c:	4629      	mov	r1, r5
 800642e:	4638      	mov	r0, r7
 8006430:	47c0      	blx	r8
 8006432:	4306      	orrs	r6, r0
 8006434:	3568      	adds	r5, #104	@ 0x68
 8006436:	e7e9      	b.n	800640c <_fwalk_sglue+0x10>

08006438 <siprintf>:
 8006438:	b40e      	push	{r1, r2, r3}
 800643a:	b500      	push	{lr}
 800643c:	b09c      	sub	sp, #112	@ 0x70
 800643e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006440:	9002      	str	r0, [sp, #8]
 8006442:	9006      	str	r0, [sp, #24]
 8006444:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006448:	4809      	ldr	r0, [pc, #36]	@ (8006470 <siprintf+0x38>)
 800644a:	9107      	str	r1, [sp, #28]
 800644c:	9104      	str	r1, [sp, #16]
 800644e:	4909      	ldr	r1, [pc, #36]	@ (8006474 <siprintf+0x3c>)
 8006450:	f853 2b04 	ldr.w	r2, [r3], #4
 8006454:	9105      	str	r1, [sp, #20]
 8006456:	6800      	ldr	r0, [r0, #0]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	a902      	add	r1, sp, #8
 800645c:	f001 fbfa 	bl	8007c54 <_svfiprintf_r>
 8006460:	9b02      	ldr	r3, [sp, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	b01c      	add	sp, #112	@ 0x70
 8006468:	f85d eb04 	ldr.w	lr, [sp], #4
 800646c:	b003      	add	sp, #12
 800646e:	4770      	bx	lr
 8006470:	20000028 	.word	0x20000028
 8006474:	ffff0208 	.word	0xffff0208

08006478 <__sread>:
 8006478:	b510      	push	{r4, lr}
 800647a:	460c      	mov	r4, r1
 800647c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006480:	f000 f86c 	bl	800655c <_read_r>
 8006484:	2800      	cmp	r0, #0
 8006486:	bfab      	itete	ge
 8006488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800648a:	89a3      	ldrhlt	r3, [r4, #12]
 800648c:	181b      	addge	r3, r3, r0
 800648e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006492:	bfac      	ite	ge
 8006494:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006496:	81a3      	strhlt	r3, [r4, #12]
 8006498:	bd10      	pop	{r4, pc}

0800649a <__swrite>:
 800649a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649e:	461f      	mov	r7, r3
 80064a0:	898b      	ldrh	r3, [r1, #12]
 80064a2:	05db      	lsls	r3, r3, #23
 80064a4:	4605      	mov	r5, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	4616      	mov	r6, r2
 80064aa:	d505      	bpl.n	80064b8 <__swrite+0x1e>
 80064ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b0:	2302      	movs	r3, #2
 80064b2:	2200      	movs	r2, #0
 80064b4:	f000 f840 	bl	8006538 <_lseek_r>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	4632      	mov	r2, r6
 80064c6:	463b      	mov	r3, r7
 80064c8:	4628      	mov	r0, r5
 80064ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ce:	f000 b857 	b.w	8006580 <_write_r>

080064d2 <__sseek>:
 80064d2:	b510      	push	{r4, lr}
 80064d4:	460c      	mov	r4, r1
 80064d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064da:	f000 f82d 	bl	8006538 <_lseek_r>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	bf15      	itete	ne
 80064e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064ee:	81a3      	strheq	r3, [r4, #12]
 80064f0:	bf18      	it	ne
 80064f2:	81a3      	strhne	r3, [r4, #12]
 80064f4:	bd10      	pop	{r4, pc}

080064f6 <__sclose>:
 80064f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fa:	f000 b80d 	b.w	8006518 <_close_r>

080064fe <memset>:
 80064fe:	4402      	add	r2, r0
 8006500:	4603      	mov	r3, r0
 8006502:	4293      	cmp	r3, r2
 8006504:	d100      	bne.n	8006508 <memset+0xa>
 8006506:	4770      	bx	lr
 8006508:	f803 1b01 	strb.w	r1, [r3], #1
 800650c:	e7f9      	b.n	8006502 <memset+0x4>
	...

08006510 <_localeconv_r>:
 8006510:	4800      	ldr	r0, [pc, #0]	@ (8006514 <_localeconv_r+0x4>)
 8006512:	4770      	bx	lr
 8006514:	20000168 	.word	0x20000168

08006518 <_close_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d06      	ldr	r5, [pc, #24]	@ (8006534 <_close_r+0x1c>)
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	f7fc fa93 	bl	8002a4e <_close>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_close_r+0x1a>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_close_r+0x1a>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	20000580 	.word	0x20000580

08006538 <_lseek_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d07      	ldr	r5, [pc, #28]	@ (8006558 <_lseek_r+0x20>)
 800653c:	4604      	mov	r4, r0
 800653e:	4608      	mov	r0, r1
 8006540:	4611      	mov	r1, r2
 8006542:	2200      	movs	r2, #0
 8006544:	602a      	str	r2, [r5, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	f7fc faa8 	bl	8002a9c <_lseek>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_lseek_r+0x1e>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_lseek_r+0x1e>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	20000580 	.word	0x20000580

0800655c <_read_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d07      	ldr	r5, [pc, #28]	@ (800657c <_read_r+0x20>)
 8006560:	4604      	mov	r4, r0
 8006562:	4608      	mov	r0, r1
 8006564:	4611      	mov	r1, r2
 8006566:	2200      	movs	r2, #0
 8006568:	602a      	str	r2, [r5, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	f7fc fa36 	bl	80029dc <_read>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_read_r+0x1e>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_read_r+0x1e>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	20000580 	.word	0x20000580

08006580 <_write_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d07      	ldr	r5, [pc, #28]	@ (80065a0 <_write_r+0x20>)
 8006584:	4604      	mov	r4, r0
 8006586:	4608      	mov	r0, r1
 8006588:	4611      	mov	r1, r2
 800658a:	2200      	movs	r2, #0
 800658c:	602a      	str	r2, [r5, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	f7fc fa41 	bl	8002a16 <_write>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_write_r+0x1e>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	b103      	cbz	r3, 800659e <_write_r+0x1e>
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	20000580 	.word	0x20000580

080065a4 <__errno>:
 80065a4:	4b01      	ldr	r3, [pc, #4]	@ (80065ac <__errno+0x8>)
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	20000028 	.word	0x20000028

080065b0 <__libc_init_array>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4d0d      	ldr	r5, [pc, #52]	@ (80065e8 <__libc_init_array+0x38>)
 80065b4:	4c0d      	ldr	r4, [pc, #52]	@ (80065ec <__libc_init_array+0x3c>)
 80065b6:	1b64      	subs	r4, r4, r5
 80065b8:	10a4      	asrs	r4, r4, #2
 80065ba:	2600      	movs	r6, #0
 80065bc:	42a6      	cmp	r6, r4
 80065be:	d109      	bne.n	80065d4 <__libc_init_array+0x24>
 80065c0:	4d0b      	ldr	r5, [pc, #44]	@ (80065f0 <__libc_init_array+0x40>)
 80065c2:	4c0c      	ldr	r4, [pc, #48]	@ (80065f4 <__libc_init_array+0x44>)
 80065c4:	f002 f864 	bl	8008690 <_init>
 80065c8:	1b64      	subs	r4, r4, r5
 80065ca:	10a4      	asrs	r4, r4, #2
 80065cc:	2600      	movs	r6, #0
 80065ce:	42a6      	cmp	r6, r4
 80065d0:	d105      	bne.n	80065de <__libc_init_array+0x2e>
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d8:	4798      	blx	r3
 80065da:	3601      	adds	r6, #1
 80065dc:	e7ee      	b.n	80065bc <__libc_init_array+0xc>
 80065de:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e2:	4798      	blx	r3
 80065e4:	3601      	adds	r6, #1
 80065e6:	e7f2      	b.n	80065ce <__libc_init_array+0x1e>
 80065e8:	08008c88 	.word	0x08008c88
 80065ec:	08008c88 	.word	0x08008c88
 80065f0:	08008c88 	.word	0x08008c88
 80065f4:	08008c8c 	.word	0x08008c8c

080065f8 <__retarget_lock_init_recursive>:
 80065f8:	4770      	bx	lr

080065fa <__retarget_lock_acquire_recursive>:
 80065fa:	4770      	bx	lr

080065fc <__retarget_lock_release_recursive>:
 80065fc:	4770      	bx	lr

080065fe <quorem>:
 80065fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006602:	6903      	ldr	r3, [r0, #16]
 8006604:	690c      	ldr	r4, [r1, #16]
 8006606:	42a3      	cmp	r3, r4
 8006608:	4607      	mov	r7, r0
 800660a:	db7e      	blt.n	800670a <quorem+0x10c>
 800660c:	3c01      	subs	r4, #1
 800660e:	f101 0814 	add.w	r8, r1, #20
 8006612:	00a3      	lsls	r3, r4, #2
 8006614:	f100 0514 	add.w	r5, r0, #20
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006628:	3301      	adds	r3, #1
 800662a:	429a      	cmp	r2, r3
 800662c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006630:	fbb2 f6f3 	udiv	r6, r2, r3
 8006634:	d32e      	bcc.n	8006694 <quorem+0x96>
 8006636:	f04f 0a00 	mov.w	sl, #0
 800663a:	46c4      	mov	ip, r8
 800663c:	46ae      	mov	lr, r5
 800663e:	46d3      	mov	fp, sl
 8006640:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006644:	b298      	uxth	r0, r3
 8006646:	fb06 a000 	mla	r0, r6, r0, sl
 800664a:	0c02      	lsrs	r2, r0, #16
 800664c:	0c1b      	lsrs	r3, r3, #16
 800664e:	fb06 2303 	mla	r3, r6, r3, r2
 8006652:	f8de 2000 	ldr.w	r2, [lr]
 8006656:	b280      	uxth	r0, r0
 8006658:	b292      	uxth	r2, r2
 800665a:	1a12      	subs	r2, r2, r0
 800665c:	445a      	add	r2, fp
 800665e:	f8de 0000 	ldr.w	r0, [lr]
 8006662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006666:	b29b      	uxth	r3, r3
 8006668:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800666c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006670:	b292      	uxth	r2, r2
 8006672:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006676:	45e1      	cmp	r9, ip
 8006678:	f84e 2b04 	str.w	r2, [lr], #4
 800667c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006680:	d2de      	bcs.n	8006640 <quorem+0x42>
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	58eb      	ldr	r3, [r5, r3]
 8006686:	b92b      	cbnz	r3, 8006694 <quorem+0x96>
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	3b04      	subs	r3, #4
 800668c:	429d      	cmp	r5, r3
 800668e:	461a      	mov	r2, r3
 8006690:	d32f      	bcc.n	80066f2 <quorem+0xf4>
 8006692:	613c      	str	r4, [r7, #16]
 8006694:	4638      	mov	r0, r7
 8006696:	f001 f979 	bl	800798c <__mcmp>
 800669a:	2800      	cmp	r0, #0
 800669c:	db25      	blt.n	80066ea <quorem+0xec>
 800669e:	4629      	mov	r1, r5
 80066a0:	2000      	movs	r0, #0
 80066a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80066a6:	f8d1 c000 	ldr.w	ip, [r1]
 80066aa:	fa1f fe82 	uxth.w	lr, r2
 80066ae:	fa1f f38c 	uxth.w	r3, ip
 80066b2:	eba3 030e 	sub.w	r3, r3, lr
 80066b6:	4403      	add	r3, r0
 80066b8:	0c12      	lsrs	r2, r2, #16
 80066ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80066be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066c8:	45c1      	cmp	r9, r8
 80066ca:	f841 3b04 	str.w	r3, [r1], #4
 80066ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066d2:	d2e6      	bcs.n	80066a2 <quorem+0xa4>
 80066d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066dc:	b922      	cbnz	r2, 80066e8 <quorem+0xea>
 80066de:	3b04      	subs	r3, #4
 80066e0:	429d      	cmp	r5, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	d30b      	bcc.n	80066fe <quorem+0x100>
 80066e6:	613c      	str	r4, [r7, #16]
 80066e8:	3601      	adds	r6, #1
 80066ea:	4630      	mov	r0, r6
 80066ec:	b003      	add	sp, #12
 80066ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	3b04      	subs	r3, #4
 80066f6:	2a00      	cmp	r2, #0
 80066f8:	d1cb      	bne.n	8006692 <quorem+0x94>
 80066fa:	3c01      	subs	r4, #1
 80066fc:	e7c6      	b.n	800668c <quorem+0x8e>
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	3b04      	subs	r3, #4
 8006702:	2a00      	cmp	r2, #0
 8006704:	d1ef      	bne.n	80066e6 <quorem+0xe8>
 8006706:	3c01      	subs	r4, #1
 8006708:	e7ea      	b.n	80066e0 <quorem+0xe2>
 800670a:	2000      	movs	r0, #0
 800670c:	e7ee      	b.n	80066ec <quorem+0xee>
	...

08006710 <_dtoa_r>:
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	69c7      	ldr	r7, [r0, #28]
 8006716:	b099      	sub	sp, #100	@ 0x64
 8006718:	ed8d 0b02 	vstr	d0, [sp, #8]
 800671c:	ec55 4b10 	vmov	r4, r5, d0
 8006720:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006722:	9109      	str	r1, [sp, #36]	@ 0x24
 8006724:	4683      	mov	fp, r0
 8006726:	920e      	str	r2, [sp, #56]	@ 0x38
 8006728:	9313      	str	r3, [sp, #76]	@ 0x4c
 800672a:	b97f      	cbnz	r7, 800674c <_dtoa_r+0x3c>
 800672c:	2010      	movs	r0, #16
 800672e:	f000 fdfd 	bl	800732c <malloc>
 8006732:	4602      	mov	r2, r0
 8006734:	f8cb 001c 	str.w	r0, [fp, #28]
 8006738:	b920      	cbnz	r0, 8006744 <_dtoa_r+0x34>
 800673a:	4ba7      	ldr	r3, [pc, #668]	@ (80069d8 <_dtoa_r+0x2c8>)
 800673c:	21ef      	movs	r1, #239	@ 0xef
 800673e:	48a7      	ldr	r0, [pc, #668]	@ (80069dc <_dtoa_r+0x2cc>)
 8006740:	f001 fc68 	bl	8008014 <__assert_func>
 8006744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006748:	6007      	str	r7, [r0, #0]
 800674a:	60c7      	str	r7, [r0, #12]
 800674c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	b159      	cbz	r1, 800676c <_dtoa_r+0x5c>
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	604a      	str	r2, [r1, #4]
 8006758:	2301      	movs	r3, #1
 800675a:	4093      	lsls	r3, r2
 800675c:	608b      	str	r3, [r1, #8]
 800675e:	4658      	mov	r0, fp
 8006760:	f000 feda 	bl	8007518 <_Bfree>
 8006764:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	1e2b      	subs	r3, r5, #0
 800676e:	bfb9      	ittee	lt
 8006770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006774:	9303      	strlt	r3, [sp, #12]
 8006776:	2300      	movge	r3, #0
 8006778:	6033      	strge	r3, [r6, #0]
 800677a:	9f03      	ldr	r7, [sp, #12]
 800677c:	4b98      	ldr	r3, [pc, #608]	@ (80069e0 <_dtoa_r+0x2d0>)
 800677e:	bfbc      	itt	lt
 8006780:	2201      	movlt	r2, #1
 8006782:	6032      	strlt	r2, [r6, #0]
 8006784:	43bb      	bics	r3, r7
 8006786:	d112      	bne.n	80067ae <_dtoa_r+0x9e>
 8006788:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800678a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006794:	4323      	orrs	r3, r4
 8006796:	f000 854d 	beq.w	8007234 <_dtoa_r+0xb24>
 800679a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800679c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80069f4 <_dtoa_r+0x2e4>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 854f 	beq.w	8007244 <_dtoa_r+0xb34>
 80067a6:	f10a 0303 	add.w	r3, sl, #3
 80067aa:	f000 bd49 	b.w	8007240 <_dtoa_r+0xb30>
 80067ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	ec51 0b17 	vmov	r0, r1, d7
 80067b8:	2300      	movs	r3, #0
 80067ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80067be:	f7fa f9a3 	bl	8000b08 <__aeabi_dcmpeq>
 80067c2:	4680      	mov	r8, r0
 80067c4:	b158      	cbz	r0, 80067de <_dtoa_r+0xce>
 80067c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067c8:	2301      	movs	r3, #1
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067ce:	b113      	cbz	r3, 80067d6 <_dtoa_r+0xc6>
 80067d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80067d2:	4b84      	ldr	r3, [pc, #528]	@ (80069e4 <_dtoa_r+0x2d4>)
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80069f8 <_dtoa_r+0x2e8>
 80067da:	f000 bd33 	b.w	8007244 <_dtoa_r+0xb34>
 80067de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80067e2:	aa16      	add	r2, sp, #88	@ 0x58
 80067e4:	a917      	add	r1, sp, #92	@ 0x5c
 80067e6:	4658      	mov	r0, fp
 80067e8:	f001 f980 	bl	8007aec <__d2b>
 80067ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80067f0:	4681      	mov	r9, r0
 80067f2:	2e00      	cmp	r6, #0
 80067f4:	d077      	beq.n	80068e6 <_dtoa_r+0x1d6>
 80067f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80067fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800680c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006810:	4619      	mov	r1, r3
 8006812:	2200      	movs	r2, #0
 8006814:	4b74      	ldr	r3, [pc, #464]	@ (80069e8 <_dtoa_r+0x2d8>)
 8006816:	f7f9 fd57 	bl	80002c8 <__aeabi_dsub>
 800681a:	a369      	add	r3, pc, #420	@ (adr r3, 80069c0 <_dtoa_r+0x2b0>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f7f9 ff0a 	bl	8000638 <__aeabi_dmul>
 8006824:	a368      	add	r3, pc, #416	@ (adr r3, 80069c8 <_dtoa_r+0x2b8>)
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	f7f9 fd4f 	bl	80002cc <__adddf3>
 800682e:	4604      	mov	r4, r0
 8006830:	4630      	mov	r0, r6
 8006832:	460d      	mov	r5, r1
 8006834:	f7f9 fe96 	bl	8000564 <__aeabi_i2d>
 8006838:	a365      	add	r3, pc, #404	@ (adr r3, 80069d0 <_dtoa_r+0x2c0>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fefb 	bl	8000638 <__aeabi_dmul>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7f9 fd3f 	bl	80002cc <__adddf3>
 800684e:	4604      	mov	r4, r0
 8006850:	460d      	mov	r5, r1
 8006852:	f7fa f9a1 	bl	8000b98 <__aeabi_d2iz>
 8006856:	2200      	movs	r2, #0
 8006858:	4607      	mov	r7, r0
 800685a:	2300      	movs	r3, #0
 800685c:	4620      	mov	r0, r4
 800685e:	4629      	mov	r1, r5
 8006860:	f7fa f95c 	bl	8000b1c <__aeabi_dcmplt>
 8006864:	b140      	cbz	r0, 8006878 <_dtoa_r+0x168>
 8006866:	4638      	mov	r0, r7
 8006868:	f7f9 fe7c 	bl	8000564 <__aeabi_i2d>
 800686c:	4622      	mov	r2, r4
 800686e:	462b      	mov	r3, r5
 8006870:	f7fa f94a 	bl	8000b08 <__aeabi_dcmpeq>
 8006874:	b900      	cbnz	r0, 8006878 <_dtoa_r+0x168>
 8006876:	3f01      	subs	r7, #1
 8006878:	2f16      	cmp	r7, #22
 800687a:	d851      	bhi.n	8006920 <_dtoa_r+0x210>
 800687c:	4b5b      	ldr	r3, [pc, #364]	@ (80069ec <_dtoa_r+0x2dc>)
 800687e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800688a:	f7fa f947 	bl	8000b1c <__aeabi_dcmplt>
 800688e:	2800      	cmp	r0, #0
 8006890:	d048      	beq.n	8006924 <_dtoa_r+0x214>
 8006892:	3f01      	subs	r7, #1
 8006894:	2300      	movs	r3, #0
 8006896:	9312      	str	r3, [sp, #72]	@ 0x48
 8006898:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800689a:	1b9b      	subs	r3, r3, r6
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	bf44      	itt	mi
 80068a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80068a4:	2300      	movmi	r3, #0
 80068a6:	9208      	str	r2, [sp, #32]
 80068a8:	bf54      	ite	pl
 80068aa:	f04f 0800 	movpl.w	r8, #0
 80068ae:	9308      	strmi	r3, [sp, #32]
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	db39      	blt.n	8006928 <_dtoa_r+0x218>
 80068b4:	9b08      	ldr	r3, [sp, #32]
 80068b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80068b8:	443b      	add	r3, r7
 80068ba:	9308      	str	r3, [sp, #32]
 80068bc:	2300      	movs	r3, #0
 80068be:	930a      	str	r3, [sp, #40]	@ 0x28
 80068c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d864      	bhi.n	8006990 <_dtoa_r+0x280>
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	bfc4      	itt	gt
 80068ca:	3b04      	subgt	r3, #4
 80068cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80068ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d0:	f1a3 0302 	sub.w	r3, r3, #2
 80068d4:	bfcc      	ite	gt
 80068d6:	2400      	movgt	r4, #0
 80068d8:	2401      	movle	r4, #1
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d863      	bhi.n	80069a6 <_dtoa_r+0x296>
 80068de:	e8df f003 	tbb	[pc, r3]
 80068e2:	372a      	.short	0x372a
 80068e4:	5535      	.short	0x5535
 80068e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80068ea:	441e      	add	r6, r3
 80068ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	bfc1      	itttt	gt
 80068f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80068f8:	409f      	lslgt	r7, r3
 80068fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80068fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006902:	bfd6      	itet	le
 8006904:	f1c3 0320 	rsble	r3, r3, #32
 8006908:	ea47 0003 	orrgt.w	r0, r7, r3
 800690c:	fa04 f003 	lslle.w	r0, r4, r3
 8006910:	f7f9 fe18 	bl	8000544 <__aeabi_ui2d>
 8006914:	2201      	movs	r2, #1
 8006916:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800691a:	3e01      	subs	r6, #1
 800691c:	9214      	str	r2, [sp, #80]	@ 0x50
 800691e:	e777      	b.n	8006810 <_dtoa_r+0x100>
 8006920:	2301      	movs	r3, #1
 8006922:	e7b8      	b.n	8006896 <_dtoa_r+0x186>
 8006924:	9012      	str	r0, [sp, #72]	@ 0x48
 8006926:	e7b7      	b.n	8006898 <_dtoa_r+0x188>
 8006928:	427b      	negs	r3, r7
 800692a:	930a      	str	r3, [sp, #40]	@ 0x28
 800692c:	2300      	movs	r3, #0
 800692e:	eba8 0807 	sub.w	r8, r8, r7
 8006932:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006934:	e7c4      	b.n	80068c0 <_dtoa_r+0x1b0>
 8006936:	2300      	movs	r3, #0
 8006938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800693a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	dc35      	bgt.n	80069ac <_dtoa_r+0x29c>
 8006940:	2301      	movs	r3, #1
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	9307      	str	r3, [sp, #28]
 8006946:	461a      	mov	r2, r3
 8006948:	920e      	str	r2, [sp, #56]	@ 0x38
 800694a:	e00b      	b.n	8006964 <_dtoa_r+0x254>
 800694c:	2301      	movs	r3, #1
 800694e:	e7f3      	b.n	8006938 <_dtoa_r+0x228>
 8006950:	2300      	movs	r3, #0
 8006952:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006956:	18fb      	adds	r3, r7, r3
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	2b01      	cmp	r3, #1
 800695e:	9307      	str	r3, [sp, #28]
 8006960:	bfb8      	it	lt
 8006962:	2301      	movlt	r3, #1
 8006964:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006968:	2100      	movs	r1, #0
 800696a:	2204      	movs	r2, #4
 800696c:	f102 0514 	add.w	r5, r2, #20
 8006970:	429d      	cmp	r5, r3
 8006972:	d91f      	bls.n	80069b4 <_dtoa_r+0x2a4>
 8006974:	6041      	str	r1, [r0, #4]
 8006976:	4658      	mov	r0, fp
 8006978:	f000 fd8e 	bl	8007498 <_Balloc>
 800697c:	4682      	mov	sl, r0
 800697e:	2800      	cmp	r0, #0
 8006980:	d13c      	bne.n	80069fc <_dtoa_r+0x2ec>
 8006982:	4b1b      	ldr	r3, [pc, #108]	@ (80069f0 <_dtoa_r+0x2e0>)
 8006984:	4602      	mov	r2, r0
 8006986:	f240 11af 	movw	r1, #431	@ 0x1af
 800698a:	e6d8      	b.n	800673e <_dtoa_r+0x2e>
 800698c:	2301      	movs	r3, #1
 800698e:	e7e0      	b.n	8006952 <_dtoa_r+0x242>
 8006990:	2401      	movs	r4, #1
 8006992:	2300      	movs	r3, #0
 8006994:	9309      	str	r3, [sp, #36]	@ 0x24
 8006996:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006998:	f04f 33ff 	mov.w	r3, #4294967295
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	2200      	movs	r2, #0
 80069a2:	2312      	movs	r3, #18
 80069a4:	e7d0      	b.n	8006948 <_dtoa_r+0x238>
 80069a6:	2301      	movs	r3, #1
 80069a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069aa:	e7f5      	b.n	8006998 <_dtoa_r+0x288>
 80069ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	9307      	str	r3, [sp, #28]
 80069b2:	e7d7      	b.n	8006964 <_dtoa_r+0x254>
 80069b4:	3101      	adds	r1, #1
 80069b6:	0052      	lsls	r2, r2, #1
 80069b8:	e7d8      	b.n	800696c <_dtoa_r+0x25c>
 80069ba:	bf00      	nop
 80069bc:	f3af 8000 	nop.w
 80069c0:	636f4361 	.word	0x636f4361
 80069c4:	3fd287a7 	.word	0x3fd287a7
 80069c8:	8b60c8b3 	.word	0x8b60c8b3
 80069cc:	3fc68a28 	.word	0x3fc68a28
 80069d0:	509f79fb 	.word	0x509f79fb
 80069d4:	3fd34413 	.word	0x3fd34413
 80069d8:	0800894d 	.word	0x0800894d
 80069dc:	08008964 	.word	0x08008964
 80069e0:	7ff00000 	.word	0x7ff00000
 80069e4:	0800891d 	.word	0x0800891d
 80069e8:	3ff80000 	.word	0x3ff80000
 80069ec:	08008a60 	.word	0x08008a60
 80069f0:	080089bc 	.word	0x080089bc
 80069f4:	08008949 	.word	0x08008949
 80069f8:	0800891c 	.word	0x0800891c
 80069fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	9b07      	ldr	r3, [sp, #28]
 8006a04:	2b0e      	cmp	r3, #14
 8006a06:	f200 80a4 	bhi.w	8006b52 <_dtoa_r+0x442>
 8006a0a:	2c00      	cmp	r4, #0
 8006a0c:	f000 80a1 	beq.w	8006b52 <_dtoa_r+0x442>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	dd33      	ble.n	8006a7c <_dtoa_r+0x36c>
 8006a14:	4bad      	ldr	r3, [pc, #692]	@ (8006ccc <_dtoa_r+0x5bc>)
 8006a16:	f007 020f 	and.w	r2, r7, #15
 8006a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a1e:	ed93 7b00 	vldr	d7, [r3]
 8006a22:	05f8      	lsls	r0, r7, #23
 8006a24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a2c:	d516      	bpl.n	8006a5c <_dtoa_r+0x34c>
 8006a2e:	4ba8      	ldr	r3, [pc, #672]	@ (8006cd0 <_dtoa_r+0x5c0>)
 8006a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a38:	f7f9 ff28 	bl	800088c <__aeabi_ddiv>
 8006a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a40:	f004 040f 	and.w	r4, r4, #15
 8006a44:	2603      	movs	r6, #3
 8006a46:	4da2      	ldr	r5, [pc, #648]	@ (8006cd0 <_dtoa_r+0x5c0>)
 8006a48:	b954      	cbnz	r4, 8006a60 <_dtoa_r+0x350>
 8006a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a52:	f7f9 ff1b 	bl	800088c <__aeabi_ddiv>
 8006a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a5a:	e028      	b.n	8006aae <_dtoa_r+0x39e>
 8006a5c:	2602      	movs	r6, #2
 8006a5e:	e7f2      	b.n	8006a46 <_dtoa_r+0x336>
 8006a60:	07e1      	lsls	r1, r4, #31
 8006a62:	d508      	bpl.n	8006a76 <_dtoa_r+0x366>
 8006a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a6c:	f7f9 fde4 	bl	8000638 <__aeabi_dmul>
 8006a70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a74:	3601      	adds	r6, #1
 8006a76:	1064      	asrs	r4, r4, #1
 8006a78:	3508      	adds	r5, #8
 8006a7a:	e7e5      	b.n	8006a48 <_dtoa_r+0x338>
 8006a7c:	f000 80d2 	beq.w	8006c24 <_dtoa_r+0x514>
 8006a80:	427c      	negs	r4, r7
 8006a82:	4b92      	ldr	r3, [pc, #584]	@ (8006ccc <_dtoa_r+0x5bc>)
 8006a84:	4d92      	ldr	r5, [pc, #584]	@ (8006cd0 <_dtoa_r+0x5c0>)
 8006a86:	f004 020f 	and.w	r2, r4, #15
 8006a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a96:	f7f9 fdcf 	bl	8000638 <__aeabi_dmul>
 8006a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a9e:	1124      	asrs	r4, r4, #4
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2602      	movs	r6, #2
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	f040 80b2 	bne.w	8006c0e <_dtoa_r+0x4fe>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1d3      	bne.n	8006a56 <_dtoa_r+0x346>
 8006aae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ab0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80b7 	beq.w	8006c28 <_dtoa_r+0x518>
 8006aba:	4b86      	ldr	r3, [pc, #536]	@ (8006cd4 <_dtoa_r+0x5c4>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	4620      	mov	r0, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7fa f82b 	bl	8000b1c <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f000 80ae 	beq.w	8006c28 <_dtoa_r+0x518>
 8006acc:	9b07      	ldr	r3, [sp, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80aa 	beq.w	8006c28 <_dtoa_r+0x518>
 8006ad4:	9b00      	ldr	r3, [sp, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dd37      	ble.n	8006b4a <_dtoa_r+0x43a>
 8006ada:	1e7b      	subs	r3, r7, #1
 8006adc:	9304      	str	r3, [sp, #16]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4b7d      	ldr	r3, [pc, #500]	@ (8006cd8 <_dtoa_r+0x5c8>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	f7f9 fda7 	bl	8000638 <__aeabi_dmul>
 8006aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aee:	9c00      	ldr	r4, [sp, #0]
 8006af0:	3601      	adds	r6, #1
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7f9 fd36 	bl	8000564 <__aeabi_i2d>
 8006af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006afc:	f7f9 fd9c 	bl	8000638 <__aeabi_dmul>
 8006b00:	4b76      	ldr	r3, [pc, #472]	@ (8006cdc <_dtoa_r+0x5cc>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	f7f9 fbe2 	bl	80002cc <__adddf3>
 8006b08:	4605      	mov	r5, r0
 8006b0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	f040 808d 	bne.w	8006c2e <_dtoa_r+0x51e>
 8006b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b18:	4b71      	ldr	r3, [pc, #452]	@ (8006ce0 <_dtoa_r+0x5d0>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f7f9 fbd4 	bl	80002c8 <__aeabi_dsub>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b28:	462a      	mov	r2, r5
 8006b2a:	4633      	mov	r3, r6
 8006b2c:	f7fa f814 	bl	8000b58 <__aeabi_dcmpgt>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f040 828b 	bne.w	800704c <_dtoa_r+0x93c>
 8006b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b40:	f7f9 ffec 	bl	8000b1c <__aeabi_dcmplt>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f040 8128 	bne.w	8006d9a <_dtoa_r+0x68a>
 8006b4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006b52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f2c0 815a 	blt.w	8006e0e <_dtoa_r+0x6fe>
 8006b5a:	2f0e      	cmp	r7, #14
 8006b5c:	f300 8157 	bgt.w	8006e0e <_dtoa_r+0x6fe>
 8006b60:	4b5a      	ldr	r3, [pc, #360]	@ (8006ccc <_dtoa_r+0x5bc>)
 8006b62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b66:	ed93 7b00 	vldr	d7, [r3]
 8006b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	ed8d 7b00 	vstr	d7, [sp]
 8006b72:	da03      	bge.n	8006b7c <_dtoa_r+0x46c>
 8006b74:	9b07      	ldr	r3, [sp, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f340 8101 	ble.w	8006d7e <_dtoa_r+0x66e>
 8006b7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b80:	4656      	mov	r6, sl
 8006b82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f7f9 fe7f 	bl	800088c <__aeabi_ddiv>
 8006b8e:	f7fa f803 	bl	8000b98 <__aeabi_d2iz>
 8006b92:	4680      	mov	r8, r0
 8006b94:	f7f9 fce6 	bl	8000564 <__aeabi_i2d>
 8006b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b9c:	f7f9 fd4c 	bl	8000638 <__aeabi_dmul>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bac:	f7f9 fb8c 	bl	80002c8 <__aeabi_dsub>
 8006bb0:	f806 4b01 	strb.w	r4, [r6], #1
 8006bb4:	9d07      	ldr	r5, [sp, #28]
 8006bb6:	eba6 040a 	sub.w	r4, r6, sl
 8006bba:	42a5      	cmp	r5, r4
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	f040 8117 	bne.w	8006df2 <_dtoa_r+0x6e2>
 8006bc4:	f7f9 fb82 	bl	80002cc <__adddf3>
 8006bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	f7f9 ffc2 	bl	8000b58 <__aeabi_dcmpgt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f040 80f9 	bne.w	8006dcc <_dtoa_r+0x6bc>
 8006bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 ff91 	bl	8000b08 <__aeabi_dcmpeq>
 8006be6:	b118      	cbz	r0, 8006bf0 <_dtoa_r+0x4e0>
 8006be8:	f018 0f01 	tst.w	r8, #1
 8006bec:	f040 80ee 	bne.w	8006dcc <_dtoa_r+0x6bc>
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	4658      	mov	r0, fp
 8006bf4:	f000 fc90 	bl	8007518 <_Bfree>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	7033      	strb	r3, [r6, #0]
 8006bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bfe:	3701      	adds	r7, #1
 8006c00:	601f      	str	r7, [r3, #0]
 8006c02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 831d 	beq.w	8007244 <_dtoa_r+0xb34>
 8006c0a:	601e      	str	r6, [r3, #0]
 8006c0c:	e31a      	b.n	8007244 <_dtoa_r+0xb34>
 8006c0e:	07e2      	lsls	r2, r4, #31
 8006c10:	d505      	bpl.n	8006c1e <_dtoa_r+0x50e>
 8006c12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c16:	f7f9 fd0f 	bl	8000638 <__aeabi_dmul>
 8006c1a:	3601      	adds	r6, #1
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	1064      	asrs	r4, r4, #1
 8006c20:	3508      	adds	r5, #8
 8006c22:	e73f      	b.n	8006aa4 <_dtoa_r+0x394>
 8006c24:	2602      	movs	r6, #2
 8006c26:	e742      	b.n	8006aae <_dtoa_r+0x39e>
 8006c28:	9c07      	ldr	r4, [sp, #28]
 8006c2a:	9704      	str	r7, [sp, #16]
 8006c2c:	e761      	b.n	8006af2 <_dtoa_r+0x3e2>
 8006c2e:	4b27      	ldr	r3, [pc, #156]	@ (8006ccc <_dtoa_r+0x5bc>)
 8006c30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c3a:	4454      	add	r4, sl
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d053      	beq.n	8006ce8 <_dtoa_r+0x5d8>
 8006c40:	4928      	ldr	r1, [pc, #160]	@ (8006ce4 <_dtoa_r+0x5d4>)
 8006c42:	2000      	movs	r0, #0
 8006c44:	f7f9 fe22 	bl	800088c <__aeabi_ddiv>
 8006c48:	4633      	mov	r3, r6
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	f7f9 fb3c 	bl	80002c8 <__aeabi_dsub>
 8006c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c54:	4656      	mov	r6, sl
 8006c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c5a:	f7f9 ff9d 	bl	8000b98 <__aeabi_d2iz>
 8006c5e:	4605      	mov	r5, r0
 8006c60:	f7f9 fc80 	bl	8000564 <__aeabi_i2d>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c6c:	f7f9 fb2c 	bl	80002c8 <__aeabi_dsub>
 8006c70:	3530      	adds	r5, #48	@ 0x30
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c7a:	f806 5b01 	strb.w	r5, [r6], #1
 8006c7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c82:	f7f9 ff4b 	bl	8000b1c <__aeabi_dcmplt>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d171      	bne.n	8006d6e <_dtoa_r+0x65e>
 8006c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c8e:	4911      	ldr	r1, [pc, #68]	@ (8006cd4 <_dtoa_r+0x5c4>)
 8006c90:	2000      	movs	r0, #0
 8006c92:	f7f9 fb19 	bl	80002c8 <__aeabi_dsub>
 8006c96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c9a:	f7f9 ff3f 	bl	8000b1c <__aeabi_dcmplt>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f040 8095 	bne.w	8006dce <_dtoa_r+0x6be>
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	f43f af50 	beq.w	8006b4a <_dtoa_r+0x43a>
 8006caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cae:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <_dtoa_r+0x5c8>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f7f9 fcc1 	bl	8000638 <__aeabi_dmul>
 8006cb6:	4b08      	ldr	r3, [pc, #32]	@ (8006cd8 <_dtoa_r+0x5c8>)
 8006cb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc2:	f7f9 fcb9 	bl	8000638 <__aeabi_dmul>
 8006cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cca:	e7c4      	b.n	8006c56 <_dtoa_r+0x546>
 8006ccc:	08008a60 	.word	0x08008a60
 8006cd0:	08008a38 	.word	0x08008a38
 8006cd4:	3ff00000 	.word	0x3ff00000
 8006cd8:	40240000 	.word	0x40240000
 8006cdc:	401c0000 	.word	0x401c0000
 8006ce0:	40140000 	.word	0x40140000
 8006ce4:	3fe00000 	.word	0x3fe00000
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7f9 fca4 	bl	8000638 <__aeabi_dmul>
 8006cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cf4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006cf6:	4656      	mov	r6, sl
 8006cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cfc:	f7f9 ff4c 	bl	8000b98 <__aeabi_d2iz>
 8006d00:	4605      	mov	r5, r0
 8006d02:	f7f9 fc2f 	bl	8000564 <__aeabi_i2d>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d0e:	f7f9 fadb 	bl	80002c8 <__aeabi_dsub>
 8006d12:	3530      	adds	r5, #48	@ 0x30
 8006d14:	f806 5b01 	strb.w	r5, [r6], #1
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	42a6      	cmp	r6, r4
 8006d1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	d124      	bne.n	8006d72 <_dtoa_r+0x662>
 8006d28:	4bac      	ldr	r3, [pc, #688]	@ (8006fdc <_dtoa_r+0x8cc>)
 8006d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d2e:	f7f9 facd 	bl	80002cc <__adddf3>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3a:	f7f9 ff0d 	bl	8000b58 <__aeabi_dcmpgt>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d145      	bne.n	8006dce <_dtoa_r+0x6be>
 8006d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d46:	49a5      	ldr	r1, [pc, #660]	@ (8006fdc <_dtoa_r+0x8cc>)
 8006d48:	2000      	movs	r0, #0
 8006d4a:	f7f9 fabd 	bl	80002c8 <__aeabi_dsub>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d56:	f7f9 fee1 	bl	8000b1c <__aeabi_dcmplt>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	f43f aef5 	beq.w	8006b4a <_dtoa_r+0x43a>
 8006d60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006d62:	1e73      	subs	r3, r6, #1
 8006d64:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d6a:	2b30      	cmp	r3, #48	@ 0x30
 8006d6c:	d0f8      	beq.n	8006d60 <_dtoa_r+0x650>
 8006d6e:	9f04      	ldr	r7, [sp, #16]
 8006d70:	e73e      	b.n	8006bf0 <_dtoa_r+0x4e0>
 8006d72:	4b9b      	ldr	r3, [pc, #620]	@ (8006fe0 <_dtoa_r+0x8d0>)
 8006d74:	f7f9 fc60 	bl	8000638 <__aeabi_dmul>
 8006d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d7c:	e7bc      	b.n	8006cf8 <_dtoa_r+0x5e8>
 8006d7e:	d10c      	bne.n	8006d9a <_dtoa_r+0x68a>
 8006d80:	4b98      	ldr	r3, [pc, #608]	@ (8006fe4 <_dtoa_r+0x8d4>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d88:	f7f9 fc56 	bl	8000638 <__aeabi_dmul>
 8006d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d90:	f7f9 fed8 	bl	8000b44 <__aeabi_dcmpge>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f000 8157 	beq.w	8007048 <_dtoa_r+0x938>
 8006d9a:	2400      	movs	r4, #0
 8006d9c:	4625      	mov	r5, r4
 8006d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006da0:	43db      	mvns	r3, r3
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	4656      	mov	r6, sl
 8006da6:	2700      	movs	r7, #0
 8006da8:	4621      	mov	r1, r4
 8006daa:	4658      	mov	r0, fp
 8006dac:	f000 fbb4 	bl	8007518 <_Bfree>
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	d0dc      	beq.n	8006d6e <_dtoa_r+0x65e>
 8006db4:	b12f      	cbz	r7, 8006dc2 <_dtoa_r+0x6b2>
 8006db6:	42af      	cmp	r7, r5
 8006db8:	d003      	beq.n	8006dc2 <_dtoa_r+0x6b2>
 8006dba:	4639      	mov	r1, r7
 8006dbc:	4658      	mov	r0, fp
 8006dbe:	f000 fbab 	bl	8007518 <_Bfree>
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4658      	mov	r0, fp
 8006dc6:	f000 fba7 	bl	8007518 <_Bfree>
 8006dca:	e7d0      	b.n	8006d6e <_dtoa_r+0x65e>
 8006dcc:	9704      	str	r7, [sp, #16]
 8006dce:	4633      	mov	r3, r6
 8006dd0:	461e      	mov	r6, r3
 8006dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dd6:	2a39      	cmp	r2, #57	@ 0x39
 8006dd8:	d107      	bne.n	8006dea <_dtoa_r+0x6da>
 8006dda:	459a      	cmp	sl, r3
 8006ddc:	d1f8      	bne.n	8006dd0 <_dtoa_r+0x6c0>
 8006dde:	9a04      	ldr	r2, [sp, #16]
 8006de0:	3201      	adds	r2, #1
 8006de2:	9204      	str	r2, [sp, #16]
 8006de4:	2230      	movs	r2, #48	@ 0x30
 8006de6:	f88a 2000 	strb.w	r2, [sl]
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	3201      	adds	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	e7bd      	b.n	8006d6e <_dtoa_r+0x65e>
 8006df2:	4b7b      	ldr	r3, [pc, #492]	@ (8006fe0 <_dtoa_r+0x8d0>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	f7f9 fc1f 	bl	8000638 <__aeabi_dmul>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	460d      	mov	r5, r1
 8006e02:	f7f9 fe81 	bl	8000b08 <__aeabi_dcmpeq>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f43f aebb 	beq.w	8006b82 <_dtoa_r+0x472>
 8006e0c:	e6f0      	b.n	8006bf0 <_dtoa_r+0x4e0>
 8006e0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	f000 80db 	beq.w	8006fcc <_dtoa_r+0x8bc>
 8006e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e18:	2a01      	cmp	r2, #1
 8006e1a:	f300 80bf 	bgt.w	8006f9c <_dtoa_r+0x88c>
 8006e1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	f000 80b7 	beq.w	8006f94 <_dtoa_r+0x884>
 8006e26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e2c:	4646      	mov	r6, r8
 8006e2e:	9a08      	ldr	r2, [sp, #32]
 8006e30:	2101      	movs	r1, #1
 8006e32:	441a      	add	r2, r3
 8006e34:	4658      	mov	r0, fp
 8006e36:	4498      	add	r8, r3
 8006e38:	9208      	str	r2, [sp, #32]
 8006e3a:	f000 fc21 	bl	8007680 <__i2b>
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b15e      	cbz	r6, 8006e5a <_dtoa_r+0x74a>
 8006e42:	9b08      	ldr	r3, [sp, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd08      	ble.n	8006e5a <_dtoa_r+0x74a>
 8006e48:	42b3      	cmp	r3, r6
 8006e4a:	9a08      	ldr	r2, [sp, #32]
 8006e4c:	bfa8      	it	ge
 8006e4e:	4633      	movge	r3, r6
 8006e50:	eba8 0803 	sub.w	r8, r8, r3
 8006e54:	1af6      	subs	r6, r6, r3
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	9308      	str	r3, [sp, #32]
 8006e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e5c:	b1f3      	cbz	r3, 8006e9c <_dtoa_r+0x78c>
 8006e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80b7 	beq.w	8006fd4 <_dtoa_r+0x8c4>
 8006e66:	b18c      	cbz	r4, 8006e8c <_dtoa_r+0x77c>
 8006e68:	4629      	mov	r1, r5
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	4658      	mov	r0, fp
 8006e6e:	f000 fcc7 	bl	8007800 <__pow5mult>
 8006e72:	464a      	mov	r2, r9
 8006e74:	4601      	mov	r1, r0
 8006e76:	4605      	mov	r5, r0
 8006e78:	4658      	mov	r0, fp
 8006e7a:	f000 fc17 	bl	80076ac <__multiply>
 8006e7e:	4649      	mov	r1, r9
 8006e80:	9004      	str	r0, [sp, #16]
 8006e82:	4658      	mov	r0, fp
 8006e84:	f000 fb48 	bl	8007518 <_Bfree>
 8006e88:	9b04      	ldr	r3, [sp, #16]
 8006e8a:	4699      	mov	r9, r3
 8006e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e8e:	1b1a      	subs	r2, r3, r4
 8006e90:	d004      	beq.n	8006e9c <_dtoa_r+0x78c>
 8006e92:	4649      	mov	r1, r9
 8006e94:	4658      	mov	r0, fp
 8006e96:	f000 fcb3 	bl	8007800 <__pow5mult>
 8006e9a:	4681      	mov	r9, r0
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	4658      	mov	r0, fp
 8006ea0:	f000 fbee 	bl	8007680 <__i2b>
 8006ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 81cf 	beq.w	800724c <_dtoa_r+0xb3c>
 8006eae:	461a      	mov	r2, r3
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4658      	mov	r0, fp
 8006eb4:	f000 fca4 	bl	8007800 <__pow5mult>
 8006eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	f300 8095 	bgt.w	8006fec <_dtoa_r+0x8dc>
 8006ec2:	9b02      	ldr	r3, [sp, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f040 8087 	bne.w	8006fd8 <_dtoa_r+0x8c8>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f040 8089 	bne.w	8006fe8 <_dtoa_r+0x8d8>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006edc:	0d1b      	lsrs	r3, r3, #20
 8006ede:	051b      	lsls	r3, r3, #20
 8006ee0:	b12b      	cbz	r3, 8006eee <_dtoa_r+0x7de>
 8006ee2:	9b08      	ldr	r3, [sp, #32]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	9308      	str	r3, [sp, #32]
 8006ee8:	f108 0801 	add.w	r8, r8, #1
 8006eec:	2301      	movs	r3, #1
 8006eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 81b0 	beq.w	8007258 <_dtoa_r+0xb48>
 8006ef8:	6923      	ldr	r3, [r4, #16]
 8006efa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006efe:	6918      	ldr	r0, [r3, #16]
 8006f00:	f000 fb72 	bl	80075e8 <__hi0bits>
 8006f04:	f1c0 0020 	rsb	r0, r0, #32
 8006f08:	9b08      	ldr	r3, [sp, #32]
 8006f0a:	4418      	add	r0, r3
 8006f0c:	f010 001f 	ands.w	r0, r0, #31
 8006f10:	d077      	beq.n	8007002 <_dtoa_r+0x8f2>
 8006f12:	f1c0 0320 	rsb	r3, r0, #32
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	dd6b      	ble.n	8006ff2 <_dtoa_r+0x8e2>
 8006f1a:	9b08      	ldr	r3, [sp, #32]
 8006f1c:	f1c0 001c 	rsb	r0, r0, #28
 8006f20:	4403      	add	r3, r0
 8006f22:	4480      	add	r8, r0
 8006f24:	4406      	add	r6, r0
 8006f26:	9308      	str	r3, [sp, #32]
 8006f28:	f1b8 0f00 	cmp.w	r8, #0
 8006f2c:	dd05      	ble.n	8006f3a <_dtoa_r+0x82a>
 8006f2e:	4649      	mov	r1, r9
 8006f30:	4642      	mov	r2, r8
 8006f32:	4658      	mov	r0, fp
 8006f34:	f000 fcbe 	bl	80078b4 <__lshift>
 8006f38:	4681      	mov	r9, r0
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	dd05      	ble.n	8006f4c <_dtoa_r+0x83c>
 8006f40:	4621      	mov	r1, r4
 8006f42:	461a      	mov	r2, r3
 8006f44:	4658      	mov	r0, fp
 8006f46:	f000 fcb5 	bl	80078b4 <__lshift>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d059      	beq.n	8007006 <_dtoa_r+0x8f6>
 8006f52:	4621      	mov	r1, r4
 8006f54:	4648      	mov	r0, r9
 8006f56:	f000 fd19 	bl	800798c <__mcmp>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	da53      	bge.n	8007006 <_dtoa_r+0x8f6>
 8006f5e:	1e7b      	subs	r3, r7, #1
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	4649      	mov	r1, r9
 8006f64:	2300      	movs	r3, #0
 8006f66:	220a      	movs	r2, #10
 8006f68:	4658      	mov	r0, fp
 8006f6a:	f000 faf7 	bl	800755c <__multadd>
 8006f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f70:	4681      	mov	r9, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8172 	beq.w	800725c <_dtoa_r+0xb4c>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	4658      	mov	r0, fp
 8006f80:	f000 faec 	bl	800755c <__multadd>
 8006f84:	9b00      	ldr	r3, [sp, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	4605      	mov	r5, r0
 8006f8a:	dc67      	bgt.n	800705c <_dtoa_r+0x94c>
 8006f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	dc41      	bgt.n	8007016 <_dtoa_r+0x906>
 8006f92:	e063      	b.n	800705c <_dtoa_r+0x94c>
 8006f94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f9a:	e746      	b.n	8006e2a <_dtoa_r+0x71a>
 8006f9c:	9b07      	ldr	r3, [sp, #28]
 8006f9e:	1e5c      	subs	r4, r3, #1
 8006fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	bfbf      	itttt	lt
 8006fa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006fa8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006faa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006fac:	1ae3      	sublt	r3, r4, r3
 8006fae:	bfb4      	ite	lt
 8006fb0:	18d2      	addlt	r2, r2, r3
 8006fb2:	1b1c      	subge	r4, r3, r4
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	bfbc      	itt	lt
 8006fb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006fba:	2400      	movlt	r4, #0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfb5      	itete	lt
 8006fc0:	eba8 0603 	sublt.w	r6, r8, r3
 8006fc4:	9b07      	ldrge	r3, [sp, #28]
 8006fc6:	2300      	movlt	r3, #0
 8006fc8:	4646      	movge	r6, r8
 8006fca:	e730      	b.n	8006e2e <_dtoa_r+0x71e>
 8006fcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006fd0:	4646      	mov	r6, r8
 8006fd2:	e735      	b.n	8006e40 <_dtoa_r+0x730>
 8006fd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fd6:	e75c      	b.n	8006e92 <_dtoa_r+0x782>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e788      	b.n	8006eee <_dtoa_r+0x7de>
 8006fdc:	3fe00000 	.word	0x3fe00000
 8006fe0:	40240000 	.word	0x40240000
 8006fe4:	40140000 	.word	0x40140000
 8006fe8:	9b02      	ldr	r3, [sp, #8]
 8006fea:	e780      	b.n	8006eee <_dtoa_r+0x7de>
 8006fec:	2300      	movs	r3, #0
 8006fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ff0:	e782      	b.n	8006ef8 <_dtoa_r+0x7e8>
 8006ff2:	d099      	beq.n	8006f28 <_dtoa_r+0x818>
 8006ff4:	9a08      	ldr	r2, [sp, #32]
 8006ff6:	331c      	adds	r3, #28
 8006ff8:	441a      	add	r2, r3
 8006ffa:	4498      	add	r8, r3
 8006ffc:	441e      	add	r6, r3
 8006ffe:	9208      	str	r2, [sp, #32]
 8007000:	e792      	b.n	8006f28 <_dtoa_r+0x818>
 8007002:	4603      	mov	r3, r0
 8007004:	e7f6      	b.n	8006ff4 <_dtoa_r+0x8e4>
 8007006:	9b07      	ldr	r3, [sp, #28]
 8007008:	9704      	str	r7, [sp, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dc20      	bgt.n	8007050 <_dtoa_r+0x940>
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007012:	2b02      	cmp	r3, #2
 8007014:	dd1e      	ble.n	8007054 <_dtoa_r+0x944>
 8007016:	9b00      	ldr	r3, [sp, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f47f aec0 	bne.w	8006d9e <_dtoa_r+0x68e>
 800701e:	4621      	mov	r1, r4
 8007020:	2205      	movs	r2, #5
 8007022:	4658      	mov	r0, fp
 8007024:	f000 fa9a 	bl	800755c <__multadd>
 8007028:	4601      	mov	r1, r0
 800702a:	4604      	mov	r4, r0
 800702c:	4648      	mov	r0, r9
 800702e:	f000 fcad 	bl	800798c <__mcmp>
 8007032:	2800      	cmp	r0, #0
 8007034:	f77f aeb3 	ble.w	8006d9e <_dtoa_r+0x68e>
 8007038:	4656      	mov	r6, sl
 800703a:	2331      	movs	r3, #49	@ 0x31
 800703c:	f806 3b01 	strb.w	r3, [r6], #1
 8007040:	9b04      	ldr	r3, [sp, #16]
 8007042:	3301      	adds	r3, #1
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	e6ae      	b.n	8006da6 <_dtoa_r+0x696>
 8007048:	9c07      	ldr	r4, [sp, #28]
 800704a:	9704      	str	r7, [sp, #16]
 800704c:	4625      	mov	r5, r4
 800704e:	e7f3      	b.n	8007038 <_dtoa_r+0x928>
 8007050:	9b07      	ldr	r3, [sp, #28]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8104 	beq.w	8007264 <_dtoa_r+0xb54>
 800705c:	2e00      	cmp	r6, #0
 800705e:	dd05      	ble.n	800706c <_dtoa_r+0x95c>
 8007060:	4629      	mov	r1, r5
 8007062:	4632      	mov	r2, r6
 8007064:	4658      	mov	r0, fp
 8007066:	f000 fc25 	bl	80078b4 <__lshift>
 800706a:	4605      	mov	r5, r0
 800706c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800706e:	2b00      	cmp	r3, #0
 8007070:	d05a      	beq.n	8007128 <_dtoa_r+0xa18>
 8007072:	6869      	ldr	r1, [r5, #4]
 8007074:	4658      	mov	r0, fp
 8007076:	f000 fa0f 	bl	8007498 <_Balloc>
 800707a:	4606      	mov	r6, r0
 800707c:	b928      	cbnz	r0, 800708a <_dtoa_r+0x97a>
 800707e:	4b84      	ldr	r3, [pc, #528]	@ (8007290 <_dtoa_r+0xb80>)
 8007080:	4602      	mov	r2, r0
 8007082:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007086:	f7ff bb5a 	b.w	800673e <_dtoa_r+0x2e>
 800708a:	692a      	ldr	r2, [r5, #16]
 800708c:	3202      	adds	r2, #2
 800708e:	0092      	lsls	r2, r2, #2
 8007090:	f105 010c 	add.w	r1, r5, #12
 8007094:	300c      	adds	r0, #12
 8007096:	f000 ffaf 	bl	8007ff8 <memcpy>
 800709a:	2201      	movs	r2, #1
 800709c:	4631      	mov	r1, r6
 800709e:	4658      	mov	r0, fp
 80070a0:	f000 fc08 	bl	80078b4 <__lshift>
 80070a4:	f10a 0301 	add.w	r3, sl, #1
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	9b00      	ldr	r3, [sp, #0]
 80070ac:	4453      	add	r3, sl
 80070ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070b0:	9b02      	ldr	r3, [sp, #8]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	462f      	mov	r7, r5
 80070b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ba:	4605      	mov	r5, r0
 80070bc:	9b07      	ldr	r3, [sp, #28]
 80070be:	4621      	mov	r1, r4
 80070c0:	3b01      	subs	r3, #1
 80070c2:	4648      	mov	r0, r9
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	f7ff fa9a 	bl	80065fe <quorem>
 80070ca:	4639      	mov	r1, r7
 80070cc:	9002      	str	r0, [sp, #8]
 80070ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80070d2:	4648      	mov	r0, r9
 80070d4:	f000 fc5a 	bl	800798c <__mcmp>
 80070d8:	462a      	mov	r2, r5
 80070da:	9008      	str	r0, [sp, #32]
 80070dc:	4621      	mov	r1, r4
 80070de:	4658      	mov	r0, fp
 80070e0:	f000 fc70 	bl	80079c4 <__mdiff>
 80070e4:	68c2      	ldr	r2, [r0, #12]
 80070e6:	4606      	mov	r6, r0
 80070e8:	bb02      	cbnz	r2, 800712c <_dtoa_r+0xa1c>
 80070ea:	4601      	mov	r1, r0
 80070ec:	4648      	mov	r0, r9
 80070ee:	f000 fc4d 	bl	800798c <__mcmp>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4631      	mov	r1, r6
 80070f6:	4658      	mov	r0, fp
 80070f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80070fa:	f000 fa0d 	bl	8007518 <_Bfree>
 80070fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007102:	9e07      	ldr	r6, [sp, #28]
 8007104:	ea43 0102 	orr.w	r1, r3, r2
 8007108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800710a:	4319      	orrs	r1, r3
 800710c:	d110      	bne.n	8007130 <_dtoa_r+0xa20>
 800710e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007112:	d029      	beq.n	8007168 <_dtoa_r+0xa58>
 8007114:	9b08      	ldr	r3, [sp, #32]
 8007116:	2b00      	cmp	r3, #0
 8007118:	dd02      	ble.n	8007120 <_dtoa_r+0xa10>
 800711a:	9b02      	ldr	r3, [sp, #8]
 800711c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007120:	9b00      	ldr	r3, [sp, #0]
 8007122:	f883 8000 	strb.w	r8, [r3]
 8007126:	e63f      	b.n	8006da8 <_dtoa_r+0x698>
 8007128:	4628      	mov	r0, r5
 800712a:	e7bb      	b.n	80070a4 <_dtoa_r+0x994>
 800712c:	2201      	movs	r2, #1
 800712e:	e7e1      	b.n	80070f4 <_dtoa_r+0x9e4>
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	2b00      	cmp	r3, #0
 8007134:	db04      	blt.n	8007140 <_dtoa_r+0xa30>
 8007136:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007138:	430b      	orrs	r3, r1
 800713a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800713c:	430b      	orrs	r3, r1
 800713e:	d120      	bne.n	8007182 <_dtoa_r+0xa72>
 8007140:	2a00      	cmp	r2, #0
 8007142:	dded      	ble.n	8007120 <_dtoa_r+0xa10>
 8007144:	4649      	mov	r1, r9
 8007146:	2201      	movs	r2, #1
 8007148:	4658      	mov	r0, fp
 800714a:	f000 fbb3 	bl	80078b4 <__lshift>
 800714e:	4621      	mov	r1, r4
 8007150:	4681      	mov	r9, r0
 8007152:	f000 fc1b 	bl	800798c <__mcmp>
 8007156:	2800      	cmp	r0, #0
 8007158:	dc03      	bgt.n	8007162 <_dtoa_r+0xa52>
 800715a:	d1e1      	bne.n	8007120 <_dtoa_r+0xa10>
 800715c:	f018 0f01 	tst.w	r8, #1
 8007160:	d0de      	beq.n	8007120 <_dtoa_r+0xa10>
 8007162:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007166:	d1d8      	bne.n	800711a <_dtoa_r+0xa0a>
 8007168:	9a00      	ldr	r2, [sp, #0]
 800716a:	2339      	movs	r3, #57	@ 0x39
 800716c:	7013      	strb	r3, [r2, #0]
 800716e:	4633      	mov	r3, r6
 8007170:	461e      	mov	r6, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007178:	2a39      	cmp	r2, #57	@ 0x39
 800717a:	d052      	beq.n	8007222 <_dtoa_r+0xb12>
 800717c:	3201      	adds	r2, #1
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	e612      	b.n	8006da8 <_dtoa_r+0x698>
 8007182:	2a00      	cmp	r2, #0
 8007184:	dd07      	ble.n	8007196 <_dtoa_r+0xa86>
 8007186:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800718a:	d0ed      	beq.n	8007168 <_dtoa_r+0xa58>
 800718c:	9a00      	ldr	r2, [sp, #0]
 800718e:	f108 0301 	add.w	r3, r8, #1
 8007192:	7013      	strb	r3, [r2, #0]
 8007194:	e608      	b.n	8006da8 <_dtoa_r+0x698>
 8007196:	9b07      	ldr	r3, [sp, #28]
 8007198:	9a07      	ldr	r2, [sp, #28]
 800719a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800719e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d028      	beq.n	80071f6 <_dtoa_r+0xae6>
 80071a4:	4649      	mov	r1, r9
 80071a6:	2300      	movs	r3, #0
 80071a8:	220a      	movs	r2, #10
 80071aa:	4658      	mov	r0, fp
 80071ac:	f000 f9d6 	bl	800755c <__multadd>
 80071b0:	42af      	cmp	r7, r5
 80071b2:	4681      	mov	r9, r0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	f04f 020a 	mov.w	r2, #10
 80071bc:	4639      	mov	r1, r7
 80071be:	4658      	mov	r0, fp
 80071c0:	d107      	bne.n	80071d2 <_dtoa_r+0xac2>
 80071c2:	f000 f9cb 	bl	800755c <__multadd>
 80071c6:	4607      	mov	r7, r0
 80071c8:	4605      	mov	r5, r0
 80071ca:	9b07      	ldr	r3, [sp, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	9307      	str	r3, [sp, #28]
 80071d0:	e774      	b.n	80070bc <_dtoa_r+0x9ac>
 80071d2:	f000 f9c3 	bl	800755c <__multadd>
 80071d6:	4629      	mov	r1, r5
 80071d8:	4607      	mov	r7, r0
 80071da:	2300      	movs	r3, #0
 80071dc:	220a      	movs	r2, #10
 80071de:	4658      	mov	r0, fp
 80071e0:	f000 f9bc 	bl	800755c <__multadd>
 80071e4:	4605      	mov	r5, r0
 80071e6:	e7f0      	b.n	80071ca <_dtoa_r+0xaba>
 80071e8:	9b00      	ldr	r3, [sp, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfcc      	ite	gt
 80071ee:	461e      	movgt	r6, r3
 80071f0:	2601      	movle	r6, #1
 80071f2:	4456      	add	r6, sl
 80071f4:	2700      	movs	r7, #0
 80071f6:	4649      	mov	r1, r9
 80071f8:	2201      	movs	r2, #1
 80071fa:	4658      	mov	r0, fp
 80071fc:	f000 fb5a 	bl	80078b4 <__lshift>
 8007200:	4621      	mov	r1, r4
 8007202:	4681      	mov	r9, r0
 8007204:	f000 fbc2 	bl	800798c <__mcmp>
 8007208:	2800      	cmp	r0, #0
 800720a:	dcb0      	bgt.n	800716e <_dtoa_r+0xa5e>
 800720c:	d102      	bne.n	8007214 <_dtoa_r+0xb04>
 800720e:	f018 0f01 	tst.w	r8, #1
 8007212:	d1ac      	bne.n	800716e <_dtoa_r+0xa5e>
 8007214:	4633      	mov	r3, r6
 8007216:	461e      	mov	r6, r3
 8007218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800721c:	2a30      	cmp	r2, #48	@ 0x30
 800721e:	d0fa      	beq.n	8007216 <_dtoa_r+0xb06>
 8007220:	e5c2      	b.n	8006da8 <_dtoa_r+0x698>
 8007222:	459a      	cmp	sl, r3
 8007224:	d1a4      	bne.n	8007170 <_dtoa_r+0xa60>
 8007226:	9b04      	ldr	r3, [sp, #16]
 8007228:	3301      	adds	r3, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	2331      	movs	r3, #49	@ 0x31
 800722e:	f88a 3000 	strb.w	r3, [sl]
 8007232:	e5b9      	b.n	8006da8 <_dtoa_r+0x698>
 8007234:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007236:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007294 <_dtoa_r+0xb84>
 800723a:	b11b      	cbz	r3, 8007244 <_dtoa_r+0xb34>
 800723c:	f10a 0308 	add.w	r3, sl, #8
 8007240:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	4650      	mov	r0, sl
 8007246:	b019      	add	sp, #100	@ 0x64
 8007248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724e:	2b01      	cmp	r3, #1
 8007250:	f77f ae37 	ble.w	8006ec2 <_dtoa_r+0x7b2>
 8007254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007256:	930a      	str	r3, [sp, #40]	@ 0x28
 8007258:	2001      	movs	r0, #1
 800725a:	e655      	b.n	8006f08 <_dtoa_r+0x7f8>
 800725c:	9b00      	ldr	r3, [sp, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f77f aed6 	ble.w	8007010 <_dtoa_r+0x900>
 8007264:	4656      	mov	r6, sl
 8007266:	4621      	mov	r1, r4
 8007268:	4648      	mov	r0, r9
 800726a:	f7ff f9c8 	bl	80065fe <quorem>
 800726e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007272:	f806 8b01 	strb.w	r8, [r6], #1
 8007276:	9b00      	ldr	r3, [sp, #0]
 8007278:	eba6 020a 	sub.w	r2, r6, sl
 800727c:	4293      	cmp	r3, r2
 800727e:	ddb3      	ble.n	80071e8 <_dtoa_r+0xad8>
 8007280:	4649      	mov	r1, r9
 8007282:	2300      	movs	r3, #0
 8007284:	220a      	movs	r2, #10
 8007286:	4658      	mov	r0, fp
 8007288:	f000 f968 	bl	800755c <__multadd>
 800728c:	4681      	mov	r9, r0
 800728e:	e7ea      	b.n	8007266 <_dtoa_r+0xb56>
 8007290:	080089bc 	.word	0x080089bc
 8007294:	08008940 	.word	0x08008940

08007298 <_free_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4605      	mov	r5, r0
 800729c:	2900      	cmp	r1, #0
 800729e:	d041      	beq.n	8007324 <_free_r+0x8c>
 80072a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a4:	1f0c      	subs	r4, r1, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bfb8      	it	lt
 80072aa:	18e4      	addlt	r4, r4, r3
 80072ac:	f000 f8e8 	bl	8007480 <__malloc_lock>
 80072b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <_free_r+0x90>)
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	b933      	cbnz	r3, 80072c4 <_free_r+0x2c>
 80072b6:	6063      	str	r3, [r4, #4]
 80072b8:	6014      	str	r4, [r2, #0]
 80072ba:	4628      	mov	r0, r5
 80072bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c0:	f000 b8e4 	b.w	800748c <__malloc_unlock>
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	d908      	bls.n	80072da <_free_r+0x42>
 80072c8:	6820      	ldr	r0, [r4, #0]
 80072ca:	1821      	adds	r1, r4, r0
 80072cc:	428b      	cmp	r3, r1
 80072ce:	bf01      	itttt	eq
 80072d0:	6819      	ldreq	r1, [r3, #0]
 80072d2:	685b      	ldreq	r3, [r3, #4]
 80072d4:	1809      	addeq	r1, r1, r0
 80072d6:	6021      	streq	r1, [r4, #0]
 80072d8:	e7ed      	b.n	80072b6 <_free_r+0x1e>
 80072da:	461a      	mov	r2, r3
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	b10b      	cbz	r3, 80072e4 <_free_r+0x4c>
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d9fa      	bls.n	80072da <_free_r+0x42>
 80072e4:	6811      	ldr	r1, [r2, #0]
 80072e6:	1850      	adds	r0, r2, r1
 80072e8:	42a0      	cmp	r0, r4
 80072ea:	d10b      	bne.n	8007304 <_free_r+0x6c>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	4401      	add	r1, r0
 80072f0:	1850      	adds	r0, r2, r1
 80072f2:	4283      	cmp	r3, r0
 80072f4:	6011      	str	r1, [r2, #0]
 80072f6:	d1e0      	bne.n	80072ba <_free_r+0x22>
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	6053      	str	r3, [r2, #4]
 80072fe:	4408      	add	r0, r1
 8007300:	6010      	str	r0, [r2, #0]
 8007302:	e7da      	b.n	80072ba <_free_r+0x22>
 8007304:	d902      	bls.n	800730c <_free_r+0x74>
 8007306:	230c      	movs	r3, #12
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	e7d6      	b.n	80072ba <_free_r+0x22>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	1821      	adds	r1, r4, r0
 8007310:	428b      	cmp	r3, r1
 8007312:	bf04      	itt	eq
 8007314:	6819      	ldreq	r1, [r3, #0]
 8007316:	685b      	ldreq	r3, [r3, #4]
 8007318:	6063      	str	r3, [r4, #4]
 800731a:	bf04      	itt	eq
 800731c:	1809      	addeq	r1, r1, r0
 800731e:	6021      	streq	r1, [r4, #0]
 8007320:	6054      	str	r4, [r2, #4]
 8007322:	e7ca      	b.n	80072ba <_free_r+0x22>
 8007324:	bd38      	pop	{r3, r4, r5, pc}
 8007326:	bf00      	nop
 8007328:	2000058c 	.word	0x2000058c

0800732c <malloc>:
 800732c:	4b02      	ldr	r3, [pc, #8]	@ (8007338 <malloc+0xc>)
 800732e:	4601      	mov	r1, r0
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	f000 b825 	b.w	8007380 <_malloc_r>
 8007336:	bf00      	nop
 8007338:	20000028 	.word	0x20000028

0800733c <sbrk_aligned>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4e0f      	ldr	r6, [pc, #60]	@ (800737c <sbrk_aligned+0x40>)
 8007340:	460c      	mov	r4, r1
 8007342:	6831      	ldr	r1, [r6, #0]
 8007344:	4605      	mov	r5, r0
 8007346:	b911      	cbnz	r1, 800734e <sbrk_aligned+0x12>
 8007348:	f000 fe46 	bl	8007fd8 <_sbrk_r>
 800734c:	6030      	str	r0, [r6, #0]
 800734e:	4621      	mov	r1, r4
 8007350:	4628      	mov	r0, r5
 8007352:	f000 fe41 	bl	8007fd8 <_sbrk_r>
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	d103      	bne.n	8007362 <sbrk_aligned+0x26>
 800735a:	f04f 34ff 	mov.w	r4, #4294967295
 800735e:	4620      	mov	r0, r4
 8007360:	bd70      	pop	{r4, r5, r6, pc}
 8007362:	1cc4      	adds	r4, r0, #3
 8007364:	f024 0403 	bic.w	r4, r4, #3
 8007368:	42a0      	cmp	r0, r4
 800736a:	d0f8      	beq.n	800735e <sbrk_aligned+0x22>
 800736c:	1a21      	subs	r1, r4, r0
 800736e:	4628      	mov	r0, r5
 8007370:	f000 fe32 	bl	8007fd8 <_sbrk_r>
 8007374:	3001      	adds	r0, #1
 8007376:	d1f2      	bne.n	800735e <sbrk_aligned+0x22>
 8007378:	e7ef      	b.n	800735a <sbrk_aligned+0x1e>
 800737a:	bf00      	nop
 800737c:	20000588 	.word	0x20000588

08007380 <_malloc_r>:
 8007380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007384:	1ccd      	adds	r5, r1, #3
 8007386:	f025 0503 	bic.w	r5, r5, #3
 800738a:	3508      	adds	r5, #8
 800738c:	2d0c      	cmp	r5, #12
 800738e:	bf38      	it	cc
 8007390:	250c      	movcc	r5, #12
 8007392:	2d00      	cmp	r5, #0
 8007394:	4606      	mov	r6, r0
 8007396:	db01      	blt.n	800739c <_malloc_r+0x1c>
 8007398:	42a9      	cmp	r1, r5
 800739a:	d904      	bls.n	80073a6 <_malloc_r+0x26>
 800739c:	230c      	movs	r3, #12
 800739e:	6033      	str	r3, [r6, #0]
 80073a0:	2000      	movs	r0, #0
 80073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800747c <_malloc_r+0xfc>
 80073aa:	f000 f869 	bl	8007480 <__malloc_lock>
 80073ae:	f8d8 3000 	ldr.w	r3, [r8]
 80073b2:	461c      	mov	r4, r3
 80073b4:	bb44      	cbnz	r4, 8007408 <_malloc_r+0x88>
 80073b6:	4629      	mov	r1, r5
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff ffbf 	bl	800733c <sbrk_aligned>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	4604      	mov	r4, r0
 80073c2:	d158      	bne.n	8007476 <_malloc_r+0xf6>
 80073c4:	f8d8 4000 	ldr.w	r4, [r8]
 80073c8:	4627      	mov	r7, r4
 80073ca:	2f00      	cmp	r7, #0
 80073cc:	d143      	bne.n	8007456 <_malloc_r+0xd6>
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	d04b      	beq.n	800746a <_malloc_r+0xea>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	4639      	mov	r1, r7
 80073d6:	4630      	mov	r0, r6
 80073d8:	eb04 0903 	add.w	r9, r4, r3
 80073dc:	f000 fdfc 	bl	8007fd8 <_sbrk_r>
 80073e0:	4581      	cmp	r9, r0
 80073e2:	d142      	bne.n	800746a <_malloc_r+0xea>
 80073e4:	6821      	ldr	r1, [r4, #0]
 80073e6:	1a6d      	subs	r5, r5, r1
 80073e8:	4629      	mov	r1, r5
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff ffa6 	bl	800733c <sbrk_aligned>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d03a      	beq.n	800746a <_malloc_r+0xea>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	442b      	add	r3, r5
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	f8d8 3000 	ldr.w	r3, [r8]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	bb62      	cbnz	r2, 800745c <_malloc_r+0xdc>
 8007402:	f8c8 7000 	str.w	r7, [r8]
 8007406:	e00f      	b.n	8007428 <_malloc_r+0xa8>
 8007408:	6822      	ldr	r2, [r4, #0]
 800740a:	1b52      	subs	r2, r2, r5
 800740c:	d420      	bmi.n	8007450 <_malloc_r+0xd0>
 800740e:	2a0b      	cmp	r2, #11
 8007410:	d917      	bls.n	8007442 <_malloc_r+0xc2>
 8007412:	1961      	adds	r1, r4, r5
 8007414:	42a3      	cmp	r3, r4
 8007416:	6025      	str	r5, [r4, #0]
 8007418:	bf18      	it	ne
 800741a:	6059      	strne	r1, [r3, #4]
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	bf08      	it	eq
 8007420:	f8c8 1000 	streq.w	r1, [r8]
 8007424:	5162      	str	r2, [r4, r5]
 8007426:	604b      	str	r3, [r1, #4]
 8007428:	4630      	mov	r0, r6
 800742a:	f000 f82f 	bl	800748c <__malloc_unlock>
 800742e:	f104 000b 	add.w	r0, r4, #11
 8007432:	1d23      	adds	r3, r4, #4
 8007434:	f020 0007 	bic.w	r0, r0, #7
 8007438:	1ac2      	subs	r2, r0, r3
 800743a:	bf1c      	itt	ne
 800743c:	1a1b      	subne	r3, r3, r0
 800743e:	50a3      	strne	r3, [r4, r2]
 8007440:	e7af      	b.n	80073a2 <_malloc_r+0x22>
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	42a3      	cmp	r3, r4
 8007446:	bf0c      	ite	eq
 8007448:	f8c8 2000 	streq.w	r2, [r8]
 800744c:	605a      	strne	r2, [r3, #4]
 800744e:	e7eb      	b.n	8007428 <_malloc_r+0xa8>
 8007450:	4623      	mov	r3, r4
 8007452:	6864      	ldr	r4, [r4, #4]
 8007454:	e7ae      	b.n	80073b4 <_malloc_r+0x34>
 8007456:	463c      	mov	r4, r7
 8007458:	687f      	ldr	r7, [r7, #4]
 800745a:	e7b6      	b.n	80073ca <_malloc_r+0x4a>
 800745c:	461a      	mov	r2, r3
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	42a3      	cmp	r3, r4
 8007462:	d1fb      	bne.n	800745c <_malloc_r+0xdc>
 8007464:	2300      	movs	r3, #0
 8007466:	6053      	str	r3, [r2, #4]
 8007468:	e7de      	b.n	8007428 <_malloc_r+0xa8>
 800746a:	230c      	movs	r3, #12
 800746c:	6033      	str	r3, [r6, #0]
 800746e:	4630      	mov	r0, r6
 8007470:	f000 f80c 	bl	800748c <__malloc_unlock>
 8007474:	e794      	b.n	80073a0 <_malloc_r+0x20>
 8007476:	6005      	str	r5, [r0, #0]
 8007478:	e7d6      	b.n	8007428 <_malloc_r+0xa8>
 800747a:	bf00      	nop
 800747c:	2000058c 	.word	0x2000058c

08007480 <__malloc_lock>:
 8007480:	4801      	ldr	r0, [pc, #4]	@ (8007488 <__malloc_lock+0x8>)
 8007482:	f7ff b8ba 	b.w	80065fa <__retarget_lock_acquire_recursive>
 8007486:	bf00      	nop
 8007488:	20000584 	.word	0x20000584

0800748c <__malloc_unlock>:
 800748c:	4801      	ldr	r0, [pc, #4]	@ (8007494 <__malloc_unlock+0x8>)
 800748e:	f7ff b8b5 	b.w	80065fc <__retarget_lock_release_recursive>
 8007492:	bf00      	nop
 8007494:	20000584 	.word	0x20000584

08007498 <_Balloc>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	69c6      	ldr	r6, [r0, #28]
 800749c:	4604      	mov	r4, r0
 800749e:	460d      	mov	r5, r1
 80074a0:	b976      	cbnz	r6, 80074c0 <_Balloc+0x28>
 80074a2:	2010      	movs	r0, #16
 80074a4:	f7ff ff42 	bl	800732c <malloc>
 80074a8:	4602      	mov	r2, r0
 80074aa:	61e0      	str	r0, [r4, #28]
 80074ac:	b920      	cbnz	r0, 80074b8 <_Balloc+0x20>
 80074ae:	4b18      	ldr	r3, [pc, #96]	@ (8007510 <_Balloc+0x78>)
 80074b0:	4818      	ldr	r0, [pc, #96]	@ (8007514 <_Balloc+0x7c>)
 80074b2:	216b      	movs	r1, #107	@ 0x6b
 80074b4:	f000 fdae 	bl	8008014 <__assert_func>
 80074b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074bc:	6006      	str	r6, [r0, #0]
 80074be:	60c6      	str	r6, [r0, #12]
 80074c0:	69e6      	ldr	r6, [r4, #28]
 80074c2:	68f3      	ldr	r3, [r6, #12]
 80074c4:	b183      	cbz	r3, 80074e8 <_Balloc+0x50>
 80074c6:	69e3      	ldr	r3, [r4, #28]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074ce:	b9b8      	cbnz	r0, 8007500 <_Balloc+0x68>
 80074d0:	2101      	movs	r1, #1
 80074d2:	fa01 f605 	lsl.w	r6, r1, r5
 80074d6:	1d72      	adds	r2, r6, #5
 80074d8:	0092      	lsls	r2, r2, #2
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 fdb8 	bl	8008050 <_calloc_r>
 80074e0:	b160      	cbz	r0, 80074fc <_Balloc+0x64>
 80074e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074e6:	e00e      	b.n	8007506 <_Balloc+0x6e>
 80074e8:	2221      	movs	r2, #33	@ 0x21
 80074ea:	2104      	movs	r1, #4
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 fdaf 	bl	8008050 <_calloc_r>
 80074f2:	69e3      	ldr	r3, [r4, #28]
 80074f4:	60f0      	str	r0, [r6, #12]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e4      	bne.n	80074c6 <_Balloc+0x2e>
 80074fc:	2000      	movs	r0, #0
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	6802      	ldr	r2, [r0, #0]
 8007502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007506:	2300      	movs	r3, #0
 8007508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800750c:	e7f7      	b.n	80074fe <_Balloc+0x66>
 800750e:	bf00      	nop
 8007510:	0800894d 	.word	0x0800894d
 8007514:	080089cd 	.word	0x080089cd

08007518 <_Bfree>:
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	69c6      	ldr	r6, [r0, #28]
 800751c:	4605      	mov	r5, r0
 800751e:	460c      	mov	r4, r1
 8007520:	b976      	cbnz	r6, 8007540 <_Bfree+0x28>
 8007522:	2010      	movs	r0, #16
 8007524:	f7ff ff02 	bl	800732c <malloc>
 8007528:	4602      	mov	r2, r0
 800752a:	61e8      	str	r0, [r5, #28]
 800752c:	b920      	cbnz	r0, 8007538 <_Bfree+0x20>
 800752e:	4b09      	ldr	r3, [pc, #36]	@ (8007554 <_Bfree+0x3c>)
 8007530:	4809      	ldr	r0, [pc, #36]	@ (8007558 <_Bfree+0x40>)
 8007532:	218f      	movs	r1, #143	@ 0x8f
 8007534:	f000 fd6e 	bl	8008014 <__assert_func>
 8007538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800753c:	6006      	str	r6, [r0, #0]
 800753e:	60c6      	str	r6, [r0, #12]
 8007540:	b13c      	cbz	r4, 8007552 <_Bfree+0x3a>
 8007542:	69eb      	ldr	r3, [r5, #28]
 8007544:	6862      	ldr	r2, [r4, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800754c:	6021      	str	r1, [r4, #0]
 800754e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	0800894d 	.word	0x0800894d
 8007558:	080089cd 	.word	0x080089cd

0800755c <__multadd>:
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007560:	690d      	ldr	r5, [r1, #16]
 8007562:	4607      	mov	r7, r0
 8007564:	460c      	mov	r4, r1
 8007566:	461e      	mov	r6, r3
 8007568:	f101 0c14 	add.w	ip, r1, #20
 800756c:	2000      	movs	r0, #0
 800756e:	f8dc 3000 	ldr.w	r3, [ip]
 8007572:	b299      	uxth	r1, r3
 8007574:	fb02 6101 	mla	r1, r2, r1, r6
 8007578:	0c1e      	lsrs	r6, r3, #16
 800757a:	0c0b      	lsrs	r3, r1, #16
 800757c:	fb02 3306 	mla	r3, r2, r6, r3
 8007580:	b289      	uxth	r1, r1
 8007582:	3001      	adds	r0, #1
 8007584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007588:	4285      	cmp	r5, r0
 800758a:	f84c 1b04 	str.w	r1, [ip], #4
 800758e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007592:	dcec      	bgt.n	800756e <__multadd+0x12>
 8007594:	b30e      	cbz	r6, 80075da <__multadd+0x7e>
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	42ab      	cmp	r3, r5
 800759a:	dc19      	bgt.n	80075d0 <__multadd+0x74>
 800759c:	6861      	ldr	r1, [r4, #4]
 800759e:	4638      	mov	r0, r7
 80075a0:	3101      	adds	r1, #1
 80075a2:	f7ff ff79 	bl	8007498 <_Balloc>
 80075a6:	4680      	mov	r8, r0
 80075a8:	b928      	cbnz	r0, 80075b6 <__multadd+0x5a>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <__multadd+0x84>)
 80075ae:	480d      	ldr	r0, [pc, #52]	@ (80075e4 <__multadd+0x88>)
 80075b0:	21ba      	movs	r1, #186	@ 0xba
 80075b2:	f000 fd2f 	bl	8008014 <__assert_func>
 80075b6:	6922      	ldr	r2, [r4, #16]
 80075b8:	3202      	adds	r2, #2
 80075ba:	f104 010c 	add.w	r1, r4, #12
 80075be:	0092      	lsls	r2, r2, #2
 80075c0:	300c      	adds	r0, #12
 80075c2:	f000 fd19 	bl	8007ff8 <memcpy>
 80075c6:	4621      	mov	r1, r4
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff ffa5 	bl	8007518 <_Bfree>
 80075ce:	4644      	mov	r4, r8
 80075d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075d4:	3501      	adds	r5, #1
 80075d6:	615e      	str	r6, [r3, #20]
 80075d8:	6125      	str	r5, [r4, #16]
 80075da:	4620      	mov	r0, r4
 80075dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e0:	080089bc 	.word	0x080089bc
 80075e4:	080089cd 	.word	0x080089cd

080075e8 <__hi0bits>:
 80075e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80075ec:	4603      	mov	r3, r0
 80075ee:	bf36      	itet	cc
 80075f0:	0403      	lslcc	r3, r0, #16
 80075f2:	2000      	movcs	r0, #0
 80075f4:	2010      	movcc	r0, #16
 80075f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075fa:	bf3c      	itt	cc
 80075fc:	021b      	lslcc	r3, r3, #8
 80075fe:	3008      	addcc	r0, #8
 8007600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007604:	bf3c      	itt	cc
 8007606:	011b      	lslcc	r3, r3, #4
 8007608:	3004      	addcc	r0, #4
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760e:	bf3c      	itt	cc
 8007610:	009b      	lslcc	r3, r3, #2
 8007612:	3002      	addcc	r0, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	db05      	blt.n	8007624 <__hi0bits+0x3c>
 8007618:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800761c:	f100 0001 	add.w	r0, r0, #1
 8007620:	bf08      	it	eq
 8007622:	2020      	moveq	r0, #32
 8007624:	4770      	bx	lr

08007626 <__lo0bits>:
 8007626:	6803      	ldr	r3, [r0, #0]
 8007628:	4602      	mov	r2, r0
 800762a:	f013 0007 	ands.w	r0, r3, #7
 800762e:	d00b      	beq.n	8007648 <__lo0bits+0x22>
 8007630:	07d9      	lsls	r1, r3, #31
 8007632:	d421      	bmi.n	8007678 <__lo0bits+0x52>
 8007634:	0798      	lsls	r0, r3, #30
 8007636:	bf49      	itett	mi
 8007638:	085b      	lsrmi	r3, r3, #1
 800763a:	089b      	lsrpl	r3, r3, #2
 800763c:	2001      	movmi	r0, #1
 800763e:	6013      	strmi	r3, [r2, #0]
 8007640:	bf5c      	itt	pl
 8007642:	6013      	strpl	r3, [r2, #0]
 8007644:	2002      	movpl	r0, #2
 8007646:	4770      	bx	lr
 8007648:	b299      	uxth	r1, r3
 800764a:	b909      	cbnz	r1, 8007650 <__lo0bits+0x2a>
 800764c:	0c1b      	lsrs	r3, r3, #16
 800764e:	2010      	movs	r0, #16
 8007650:	b2d9      	uxtb	r1, r3
 8007652:	b909      	cbnz	r1, 8007658 <__lo0bits+0x32>
 8007654:	3008      	adds	r0, #8
 8007656:	0a1b      	lsrs	r3, r3, #8
 8007658:	0719      	lsls	r1, r3, #28
 800765a:	bf04      	itt	eq
 800765c:	091b      	lsreq	r3, r3, #4
 800765e:	3004      	addeq	r0, #4
 8007660:	0799      	lsls	r1, r3, #30
 8007662:	bf04      	itt	eq
 8007664:	089b      	lsreq	r3, r3, #2
 8007666:	3002      	addeq	r0, #2
 8007668:	07d9      	lsls	r1, r3, #31
 800766a:	d403      	bmi.n	8007674 <__lo0bits+0x4e>
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	f100 0001 	add.w	r0, r0, #1
 8007672:	d003      	beq.n	800767c <__lo0bits+0x56>
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	4770      	bx	lr
 8007678:	2000      	movs	r0, #0
 800767a:	4770      	bx	lr
 800767c:	2020      	movs	r0, #32
 800767e:	4770      	bx	lr

08007680 <__i2b>:
 8007680:	b510      	push	{r4, lr}
 8007682:	460c      	mov	r4, r1
 8007684:	2101      	movs	r1, #1
 8007686:	f7ff ff07 	bl	8007498 <_Balloc>
 800768a:	4602      	mov	r2, r0
 800768c:	b928      	cbnz	r0, 800769a <__i2b+0x1a>
 800768e:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <__i2b+0x24>)
 8007690:	4805      	ldr	r0, [pc, #20]	@ (80076a8 <__i2b+0x28>)
 8007692:	f240 1145 	movw	r1, #325	@ 0x145
 8007696:	f000 fcbd 	bl	8008014 <__assert_func>
 800769a:	2301      	movs	r3, #1
 800769c:	6144      	str	r4, [r0, #20]
 800769e:	6103      	str	r3, [r0, #16]
 80076a0:	bd10      	pop	{r4, pc}
 80076a2:	bf00      	nop
 80076a4:	080089bc 	.word	0x080089bc
 80076a8:	080089cd 	.word	0x080089cd

080076ac <__multiply>:
 80076ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	4614      	mov	r4, r2
 80076b2:	690a      	ldr	r2, [r1, #16]
 80076b4:	6923      	ldr	r3, [r4, #16]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	bfa8      	it	ge
 80076ba:	4623      	movge	r3, r4
 80076bc:	460f      	mov	r7, r1
 80076be:	bfa4      	itt	ge
 80076c0:	460c      	movge	r4, r1
 80076c2:	461f      	movge	r7, r3
 80076c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80076c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80076cc:	68a3      	ldr	r3, [r4, #8]
 80076ce:	6861      	ldr	r1, [r4, #4]
 80076d0:	eb0a 0609 	add.w	r6, sl, r9
 80076d4:	42b3      	cmp	r3, r6
 80076d6:	b085      	sub	sp, #20
 80076d8:	bfb8      	it	lt
 80076da:	3101      	addlt	r1, #1
 80076dc:	f7ff fedc 	bl	8007498 <_Balloc>
 80076e0:	b930      	cbnz	r0, 80076f0 <__multiply+0x44>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b44      	ldr	r3, [pc, #272]	@ (80077f8 <__multiply+0x14c>)
 80076e6:	4845      	ldr	r0, [pc, #276]	@ (80077fc <__multiply+0x150>)
 80076e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80076ec:	f000 fc92 	bl	8008014 <__assert_func>
 80076f0:	f100 0514 	add.w	r5, r0, #20
 80076f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076f8:	462b      	mov	r3, r5
 80076fa:	2200      	movs	r2, #0
 80076fc:	4543      	cmp	r3, r8
 80076fe:	d321      	bcc.n	8007744 <__multiply+0x98>
 8007700:	f107 0114 	add.w	r1, r7, #20
 8007704:	f104 0214 	add.w	r2, r4, #20
 8007708:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800770c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	1b13      	subs	r3, r2, r4
 8007714:	3b15      	subs	r3, #21
 8007716:	f023 0303 	bic.w	r3, r3, #3
 800771a:	3304      	adds	r3, #4
 800771c:	f104 0715 	add.w	r7, r4, #21
 8007720:	42ba      	cmp	r2, r7
 8007722:	bf38      	it	cc
 8007724:	2304      	movcc	r3, #4
 8007726:	9301      	str	r3, [sp, #4]
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	9103      	str	r1, [sp, #12]
 800772c:	428b      	cmp	r3, r1
 800772e:	d80c      	bhi.n	800774a <__multiply+0x9e>
 8007730:	2e00      	cmp	r6, #0
 8007732:	dd03      	ble.n	800773c <__multiply+0x90>
 8007734:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007738:	2b00      	cmp	r3, #0
 800773a:	d05b      	beq.n	80077f4 <__multiply+0x148>
 800773c:	6106      	str	r6, [r0, #16]
 800773e:	b005      	add	sp, #20
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	f843 2b04 	str.w	r2, [r3], #4
 8007748:	e7d8      	b.n	80076fc <__multiply+0x50>
 800774a:	f8b1 a000 	ldrh.w	sl, [r1]
 800774e:	f1ba 0f00 	cmp.w	sl, #0
 8007752:	d024      	beq.n	800779e <__multiply+0xf2>
 8007754:	f104 0e14 	add.w	lr, r4, #20
 8007758:	46a9      	mov	r9, r5
 800775a:	f04f 0c00 	mov.w	ip, #0
 800775e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007762:	f8d9 3000 	ldr.w	r3, [r9]
 8007766:	fa1f fb87 	uxth.w	fp, r7
 800776a:	b29b      	uxth	r3, r3
 800776c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007770:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007774:	f8d9 7000 	ldr.w	r7, [r9]
 8007778:	4463      	add	r3, ip
 800777a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800777e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007782:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007786:	b29b      	uxth	r3, r3
 8007788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800778c:	4572      	cmp	r2, lr
 800778e:	f849 3b04 	str.w	r3, [r9], #4
 8007792:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007796:	d8e2      	bhi.n	800775e <__multiply+0xb2>
 8007798:	9b01      	ldr	r3, [sp, #4]
 800779a:	f845 c003 	str.w	ip, [r5, r3]
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077a4:	3104      	adds	r1, #4
 80077a6:	f1b9 0f00 	cmp.w	r9, #0
 80077aa:	d021      	beq.n	80077f0 <__multiply+0x144>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	f104 0c14 	add.w	ip, r4, #20
 80077b2:	46ae      	mov	lr, r5
 80077b4:	f04f 0a00 	mov.w	sl, #0
 80077b8:	f8bc b000 	ldrh.w	fp, [ip]
 80077bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80077c0:	fb09 770b 	mla	r7, r9, fp, r7
 80077c4:	4457      	add	r7, sl
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077cc:	f84e 3b04 	str.w	r3, [lr], #4
 80077d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077d8:	f8be 3000 	ldrh.w	r3, [lr]
 80077dc:	fb09 330a 	mla	r3, r9, sl, r3
 80077e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80077e4:	4562      	cmp	r2, ip
 80077e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077ea:	d8e5      	bhi.n	80077b8 <__multiply+0x10c>
 80077ec:	9f01      	ldr	r7, [sp, #4]
 80077ee:	51eb      	str	r3, [r5, r7]
 80077f0:	3504      	adds	r5, #4
 80077f2:	e799      	b.n	8007728 <__multiply+0x7c>
 80077f4:	3e01      	subs	r6, #1
 80077f6:	e79b      	b.n	8007730 <__multiply+0x84>
 80077f8:	080089bc 	.word	0x080089bc
 80077fc:	080089cd 	.word	0x080089cd

08007800 <__pow5mult>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	4615      	mov	r5, r2
 8007806:	f012 0203 	ands.w	r2, r2, #3
 800780a:	4607      	mov	r7, r0
 800780c:	460e      	mov	r6, r1
 800780e:	d007      	beq.n	8007820 <__pow5mult+0x20>
 8007810:	4c25      	ldr	r4, [pc, #148]	@ (80078a8 <__pow5mult+0xa8>)
 8007812:	3a01      	subs	r2, #1
 8007814:	2300      	movs	r3, #0
 8007816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800781a:	f7ff fe9f 	bl	800755c <__multadd>
 800781e:	4606      	mov	r6, r0
 8007820:	10ad      	asrs	r5, r5, #2
 8007822:	d03d      	beq.n	80078a0 <__pow5mult+0xa0>
 8007824:	69fc      	ldr	r4, [r7, #28]
 8007826:	b97c      	cbnz	r4, 8007848 <__pow5mult+0x48>
 8007828:	2010      	movs	r0, #16
 800782a:	f7ff fd7f 	bl	800732c <malloc>
 800782e:	4602      	mov	r2, r0
 8007830:	61f8      	str	r0, [r7, #28]
 8007832:	b928      	cbnz	r0, 8007840 <__pow5mult+0x40>
 8007834:	4b1d      	ldr	r3, [pc, #116]	@ (80078ac <__pow5mult+0xac>)
 8007836:	481e      	ldr	r0, [pc, #120]	@ (80078b0 <__pow5mult+0xb0>)
 8007838:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800783c:	f000 fbea 	bl	8008014 <__assert_func>
 8007840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007844:	6004      	str	r4, [r0, #0]
 8007846:	60c4      	str	r4, [r0, #12]
 8007848:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800784c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007850:	b94c      	cbnz	r4, 8007866 <__pow5mult+0x66>
 8007852:	f240 2171 	movw	r1, #625	@ 0x271
 8007856:	4638      	mov	r0, r7
 8007858:	f7ff ff12 	bl	8007680 <__i2b>
 800785c:	2300      	movs	r3, #0
 800785e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007862:	4604      	mov	r4, r0
 8007864:	6003      	str	r3, [r0, #0]
 8007866:	f04f 0900 	mov.w	r9, #0
 800786a:	07eb      	lsls	r3, r5, #31
 800786c:	d50a      	bpl.n	8007884 <__pow5mult+0x84>
 800786e:	4631      	mov	r1, r6
 8007870:	4622      	mov	r2, r4
 8007872:	4638      	mov	r0, r7
 8007874:	f7ff ff1a 	bl	80076ac <__multiply>
 8007878:	4631      	mov	r1, r6
 800787a:	4680      	mov	r8, r0
 800787c:	4638      	mov	r0, r7
 800787e:	f7ff fe4b 	bl	8007518 <_Bfree>
 8007882:	4646      	mov	r6, r8
 8007884:	106d      	asrs	r5, r5, #1
 8007886:	d00b      	beq.n	80078a0 <__pow5mult+0xa0>
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	b938      	cbnz	r0, 800789c <__pow5mult+0x9c>
 800788c:	4622      	mov	r2, r4
 800788e:	4621      	mov	r1, r4
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ff0b 	bl	80076ac <__multiply>
 8007896:	6020      	str	r0, [r4, #0]
 8007898:	f8c0 9000 	str.w	r9, [r0]
 800789c:	4604      	mov	r4, r0
 800789e:	e7e4      	b.n	800786a <__pow5mult+0x6a>
 80078a0:	4630      	mov	r0, r6
 80078a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a6:	bf00      	nop
 80078a8:	08008a28 	.word	0x08008a28
 80078ac:	0800894d 	.word	0x0800894d
 80078b0:	080089cd 	.word	0x080089cd

080078b4 <__lshift>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	6849      	ldr	r1, [r1, #4]
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078c2:	68a3      	ldr	r3, [r4, #8]
 80078c4:	4607      	mov	r7, r0
 80078c6:	4691      	mov	r9, r2
 80078c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078cc:	f108 0601 	add.w	r6, r8, #1
 80078d0:	42b3      	cmp	r3, r6
 80078d2:	db0b      	blt.n	80078ec <__lshift+0x38>
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff fddf 	bl	8007498 <_Balloc>
 80078da:	4605      	mov	r5, r0
 80078dc:	b948      	cbnz	r0, 80078f2 <__lshift+0x3e>
 80078de:	4602      	mov	r2, r0
 80078e0:	4b28      	ldr	r3, [pc, #160]	@ (8007984 <__lshift+0xd0>)
 80078e2:	4829      	ldr	r0, [pc, #164]	@ (8007988 <__lshift+0xd4>)
 80078e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80078e8:	f000 fb94 	bl	8008014 <__assert_func>
 80078ec:	3101      	adds	r1, #1
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	e7ee      	b.n	80078d0 <__lshift+0x1c>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f100 0114 	add.w	r1, r0, #20
 80078f8:	f100 0210 	add.w	r2, r0, #16
 80078fc:	4618      	mov	r0, r3
 80078fe:	4553      	cmp	r3, sl
 8007900:	db33      	blt.n	800796a <__lshift+0xb6>
 8007902:	6920      	ldr	r0, [r4, #16]
 8007904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007908:	f104 0314 	add.w	r3, r4, #20
 800790c:	f019 091f 	ands.w	r9, r9, #31
 8007910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007918:	d02b      	beq.n	8007972 <__lshift+0xbe>
 800791a:	f1c9 0e20 	rsb	lr, r9, #32
 800791e:	468a      	mov	sl, r1
 8007920:	2200      	movs	r2, #0
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	fa00 f009 	lsl.w	r0, r0, r9
 8007928:	4310      	orrs	r0, r2
 800792a:	f84a 0b04 	str.w	r0, [sl], #4
 800792e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007932:	459c      	cmp	ip, r3
 8007934:	fa22 f20e 	lsr.w	r2, r2, lr
 8007938:	d8f3      	bhi.n	8007922 <__lshift+0x6e>
 800793a:	ebac 0304 	sub.w	r3, ip, r4
 800793e:	3b15      	subs	r3, #21
 8007940:	f023 0303 	bic.w	r3, r3, #3
 8007944:	3304      	adds	r3, #4
 8007946:	f104 0015 	add.w	r0, r4, #21
 800794a:	4584      	cmp	ip, r0
 800794c:	bf38      	it	cc
 800794e:	2304      	movcc	r3, #4
 8007950:	50ca      	str	r2, [r1, r3]
 8007952:	b10a      	cbz	r2, 8007958 <__lshift+0xa4>
 8007954:	f108 0602 	add.w	r6, r8, #2
 8007958:	3e01      	subs	r6, #1
 800795a:	4638      	mov	r0, r7
 800795c:	612e      	str	r6, [r5, #16]
 800795e:	4621      	mov	r1, r4
 8007960:	f7ff fdda 	bl	8007518 <_Bfree>
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	f842 0f04 	str.w	r0, [r2, #4]!
 800796e:	3301      	adds	r3, #1
 8007970:	e7c5      	b.n	80078fe <__lshift+0x4a>
 8007972:	3904      	subs	r1, #4
 8007974:	f853 2b04 	ldr.w	r2, [r3], #4
 8007978:	f841 2f04 	str.w	r2, [r1, #4]!
 800797c:	459c      	cmp	ip, r3
 800797e:	d8f9      	bhi.n	8007974 <__lshift+0xc0>
 8007980:	e7ea      	b.n	8007958 <__lshift+0xa4>
 8007982:	bf00      	nop
 8007984:	080089bc 	.word	0x080089bc
 8007988:	080089cd 	.word	0x080089cd

0800798c <__mcmp>:
 800798c:	690a      	ldr	r2, [r1, #16]
 800798e:	4603      	mov	r3, r0
 8007990:	6900      	ldr	r0, [r0, #16]
 8007992:	1a80      	subs	r0, r0, r2
 8007994:	b530      	push	{r4, r5, lr}
 8007996:	d10e      	bne.n	80079b6 <__mcmp+0x2a>
 8007998:	3314      	adds	r3, #20
 800799a:	3114      	adds	r1, #20
 800799c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079ac:	4295      	cmp	r5, r2
 80079ae:	d003      	beq.n	80079b8 <__mcmp+0x2c>
 80079b0:	d205      	bcs.n	80079be <__mcmp+0x32>
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	bd30      	pop	{r4, r5, pc}
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	d3f3      	bcc.n	80079a4 <__mcmp+0x18>
 80079bc:	e7fb      	b.n	80079b6 <__mcmp+0x2a>
 80079be:	2001      	movs	r0, #1
 80079c0:	e7f9      	b.n	80079b6 <__mcmp+0x2a>
	...

080079c4 <__mdiff>:
 80079c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	4689      	mov	r9, r1
 80079ca:	4606      	mov	r6, r0
 80079cc:	4611      	mov	r1, r2
 80079ce:	4648      	mov	r0, r9
 80079d0:	4614      	mov	r4, r2
 80079d2:	f7ff ffdb 	bl	800798c <__mcmp>
 80079d6:	1e05      	subs	r5, r0, #0
 80079d8:	d112      	bne.n	8007a00 <__mdiff+0x3c>
 80079da:	4629      	mov	r1, r5
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff fd5b 	bl	8007498 <_Balloc>
 80079e2:	4602      	mov	r2, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__mdiff+0x2e>
 80079e6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ae4 <__mdiff+0x120>)
 80079e8:	f240 2137 	movw	r1, #567	@ 0x237
 80079ec:	483e      	ldr	r0, [pc, #248]	@ (8007ae8 <__mdiff+0x124>)
 80079ee:	f000 fb11 	bl	8008014 <__assert_func>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f8:	4610      	mov	r0, r2
 80079fa:	b003      	add	sp, #12
 80079fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	bfbc      	itt	lt
 8007a02:	464b      	movlt	r3, r9
 8007a04:	46a1      	movlt	r9, r4
 8007a06:	4630      	mov	r0, r6
 8007a08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a0c:	bfba      	itte	lt
 8007a0e:	461c      	movlt	r4, r3
 8007a10:	2501      	movlt	r5, #1
 8007a12:	2500      	movge	r5, #0
 8007a14:	f7ff fd40 	bl	8007498 <_Balloc>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	b918      	cbnz	r0, 8007a24 <__mdiff+0x60>
 8007a1c:	4b31      	ldr	r3, [pc, #196]	@ (8007ae4 <__mdiff+0x120>)
 8007a1e:	f240 2145 	movw	r1, #581	@ 0x245
 8007a22:	e7e3      	b.n	80079ec <__mdiff+0x28>
 8007a24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a28:	6926      	ldr	r6, [r4, #16]
 8007a2a:	60c5      	str	r5, [r0, #12]
 8007a2c:	f109 0310 	add.w	r3, r9, #16
 8007a30:	f109 0514 	add.w	r5, r9, #20
 8007a34:	f104 0e14 	add.w	lr, r4, #20
 8007a38:	f100 0b14 	add.w	fp, r0, #20
 8007a3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	46d9      	mov	r9, fp
 8007a48:	f04f 0c00 	mov.w	ip, #0
 8007a4c:	9b01      	ldr	r3, [sp, #4]
 8007a4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	fa1f f38a 	uxth.w	r3, sl
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	b283      	uxth	r3, r0
 8007a60:	1acb      	subs	r3, r1, r3
 8007a62:	0c00      	lsrs	r0, r0, #16
 8007a64:	4463      	add	r3, ip
 8007a66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a74:	4576      	cmp	r6, lr
 8007a76:	f849 3b04 	str.w	r3, [r9], #4
 8007a7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a7e:	d8e5      	bhi.n	8007a4c <__mdiff+0x88>
 8007a80:	1b33      	subs	r3, r6, r4
 8007a82:	3b15      	subs	r3, #21
 8007a84:	f023 0303 	bic.w	r3, r3, #3
 8007a88:	3415      	adds	r4, #21
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	42a6      	cmp	r6, r4
 8007a8e:	bf38      	it	cc
 8007a90:	2304      	movcc	r3, #4
 8007a92:	441d      	add	r5, r3
 8007a94:	445b      	add	r3, fp
 8007a96:	461e      	mov	r6, r3
 8007a98:	462c      	mov	r4, r5
 8007a9a:	4544      	cmp	r4, r8
 8007a9c:	d30e      	bcc.n	8007abc <__mdiff+0xf8>
 8007a9e:	f108 0103 	add.w	r1, r8, #3
 8007aa2:	1b49      	subs	r1, r1, r5
 8007aa4:	f021 0103 	bic.w	r1, r1, #3
 8007aa8:	3d03      	subs	r5, #3
 8007aaa:	45a8      	cmp	r8, r5
 8007aac:	bf38      	it	cc
 8007aae:	2100      	movcc	r1, #0
 8007ab0:	440b      	add	r3, r1
 8007ab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ab6:	b191      	cbz	r1, 8007ade <__mdiff+0x11a>
 8007ab8:	6117      	str	r7, [r2, #16]
 8007aba:	e79d      	b.n	80079f8 <__mdiff+0x34>
 8007abc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ac0:	46e6      	mov	lr, ip
 8007ac2:	0c08      	lsrs	r0, r1, #16
 8007ac4:	fa1c fc81 	uxtah	ip, ip, r1
 8007ac8:	4471      	add	r1, lr
 8007aca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ace:	b289      	uxth	r1, r1
 8007ad0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ad4:	f846 1b04 	str.w	r1, [r6], #4
 8007ad8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007adc:	e7dd      	b.n	8007a9a <__mdiff+0xd6>
 8007ade:	3f01      	subs	r7, #1
 8007ae0:	e7e7      	b.n	8007ab2 <__mdiff+0xee>
 8007ae2:	bf00      	nop
 8007ae4:	080089bc 	.word	0x080089bc
 8007ae8:	080089cd 	.word	0x080089cd

08007aec <__d2b>:
 8007aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007af0:	460f      	mov	r7, r1
 8007af2:	2101      	movs	r1, #1
 8007af4:	ec59 8b10 	vmov	r8, r9, d0
 8007af8:	4616      	mov	r6, r2
 8007afa:	f7ff fccd 	bl	8007498 <_Balloc>
 8007afe:	4604      	mov	r4, r0
 8007b00:	b930      	cbnz	r0, 8007b10 <__d2b+0x24>
 8007b02:	4602      	mov	r2, r0
 8007b04:	4b23      	ldr	r3, [pc, #140]	@ (8007b94 <__d2b+0xa8>)
 8007b06:	4824      	ldr	r0, [pc, #144]	@ (8007b98 <__d2b+0xac>)
 8007b08:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b0c:	f000 fa82 	bl	8008014 <__assert_func>
 8007b10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b18:	b10d      	cbz	r5, 8007b1e <__d2b+0x32>
 8007b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	f1b8 0300 	subs.w	r3, r8, #0
 8007b24:	d023      	beq.n	8007b6e <__d2b+0x82>
 8007b26:	4668      	mov	r0, sp
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	f7ff fd7c 	bl	8007626 <__lo0bits>
 8007b2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b32:	b1d0      	cbz	r0, 8007b6a <__d2b+0x7e>
 8007b34:	f1c0 0320 	rsb	r3, r0, #32
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	40c2      	lsrs	r2, r0
 8007b40:	6163      	str	r3, [r4, #20]
 8007b42:	9201      	str	r2, [sp, #4]
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	61a3      	str	r3, [r4, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2201      	moveq	r2, #1
 8007b4e:	2202      	movne	r2, #2
 8007b50:	6122      	str	r2, [r4, #16]
 8007b52:	b1a5      	cbz	r5, 8007b7e <__d2b+0x92>
 8007b54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b58:	4405      	add	r5, r0
 8007b5a:	603d      	str	r5, [r7, #0]
 8007b5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b60:	6030      	str	r0, [r6, #0]
 8007b62:	4620      	mov	r0, r4
 8007b64:	b003      	add	sp, #12
 8007b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b6a:	6161      	str	r1, [r4, #20]
 8007b6c:	e7ea      	b.n	8007b44 <__d2b+0x58>
 8007b6e:	a801      	add	r0, sp, #4
 8007b70:	f7ff fd59 	bl	8007626 <__lo0bits>
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	6163      	str	r3, [r4, #20]
 8007b78:	3020      	adds	r0, #32
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	e7e8      	b.n	8007b50 <__d2b+0x64>
 8007b7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b86:	6038      	str	r0, [r7, #0]
 8007b88:	6918      	ldr	r0, [r3, #16]
 8007b8a:	f7ff fd2d 	bl	80075e8 <__hi0bits>
 8007b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b92:	e7e5      	b.n	8007b60 <__d2b+0x74>
 8007b94:	080089bc 	.word	0x080089bc
 8007b98:	080089cd 	.word	0x080089cd

08007b9c <__ssputs_r>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	688e      	ldr	r6, [r1, #8]
 8007ba2:	461f      	mov	r7, r3
 8007ba4:	42be      	cmp	r6, r7
 8007ba6:	680b      	ldr	r3, [r1, #0]
 8007ba8:	4682      	mov	sl, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	4690      	mov	r8, r2
 8007bae:	d82d      	bhi.n	8007c0c <__ssputs_r+0x70>
 8007bb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007bb8:	d026      	beq.n	8007c08 <__ssputs_r+0x6c>
 8007bba:	6965      	ldr	r5, [r4, #20]
 8007bbc:	6909      	ldr	r1, [r1, #16]
 8007bbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bc2:	eba3 0901 	sub.w	r9, r3, r1
 8007bc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bca:	1c7b      	adds	r3, r7, #1
 8007bcc:	444b      	add	r3, r9
 8007bce:	106d      	asrs	r5, r5, #1
 8007bd0:	429d      	cmp	r5, r3
 8007bd2:	bf38      	it	cc
 8007bd4:	461d      	movcc	r5, r3
 8007bd6:	0553      	lsls	r3, r2, #21
 8007bd8:	d527      	bpl.n	8007c2a <__ssputs_r+0x8e>
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7ff fbd0 	bl	8007380 <_malloc_r>
 8007be0:	4606      	mov	r6, r0
 8007be2:	b360      	cbz	r0, 8007c3e <__ssputs_r+0xa2>
 8007be4:	6921      	ldr	r1, [r4, #16]
 8007be6:	464a      	mov	r2, r9
 8007be8:	f000 fa06 	bl	8007ff8 <memcpy>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	6126      	str	r6, [r4, #16]
 8007bfa:	6165      	str	r5, [r4, #20]
 8007bfc:	444e      	add	r6, r9
 8007bfe:	eba5 0509 	sub.w	r5, r5, r9
 8007c02:	6026      	str	r6, [r4, #0]
 8007c04:	60a5      	str	r5, [r4, #8]
 8007c06:	463e      	mov	r6, r7
 8007c08:	42be      	cmp	r6, r7
 8007c0a:	d900      	bls.n	8007c0e <__ssputs_r+0x72>
 8007c0c:	463e      	mov	r6, r7
 8007c0e:	6820      	ldr	r0, [r4, #0]
 8007c10:	4632      	mov	r2, r6
 8007c12:	4641      	mov	r1, r8
 8007c14:	f000 f9c6 	bl	8007fa4 <memmove>
 8007c18:	68a3      	ldr	r3, [r4, #8]
 8007c1a:	1b9b      	subs	r3, r3, r6
 8007c1c:	60a3      	str	r3, [r4, #8]
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	4433      	add	r3, r6
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	2000      	movs	r0, #0
 8007c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	f000 fa36 	bl	800809c <_realloc_r>
 8007c30:	4606      	mov	r6, r0
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d1e0      	bne.n	8007bf8 <__ssputs_r+0x5c>
 8007c36:	6921      	ldr	r1, [r4, #16]
 8007c38:	4650      	mov	r0, sl
 8007c3a:	f7ff fb2d 	bl	8007298 <_free_r>
 8007c3e:	230c      	movs	r3, #12
 8007c40:	f8ca 3000 	str.w	r3, [sl]
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c50:	e7e9      	b.n	8007c26 <__ssputs_r+0x8a>
	...

08007c54 <_svfiprintf_r>:
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	4698      	mov	r8, r3
 8007c5a:	898b      	ldrh	r3, [r1, #12]
 8007c5c:	061b      	lsls	r3, r3, #24
 8007c5e:	b09d      	sub	sp, #116	@ 0x74
 8007c60:	4607      	mov	r7, r0
 8007c62:	460d      	mov	r5, r1
 8007c64:	4614      	mov	r4, r2
 8007c66:	d510      	bpl.n	8007c8a <_svfiprintf_r+0x36>
 8007c68:	690b      	ldr	r3, [r1, #16]
 8007c6a:	b973      	cbnz	r3, 8007c8a <_svfiprintf_r+0x36>
 8007c6c:	2140      	movs	r1, #64	@ 0x40
 8007c6e:	f7ff fb87 	bl	8007380 <_malloc_r>
 8007c72:	6028      	str	r0, [r5, #0]
 8007c74:	6128      	str	r0, [r5, #16]
 8007c76:	b930      	cbnz	r0, 8007c86 <_svfiprintf_r+0x32>
 8007c78:	230c      	movs	r3, #12
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	b01d      	add	sp, #116	@ 0x74
 8007c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c86:	2340      	movs	r3, #64	@ 0x40
 8007c88:	616b      	str	r3, [r5, #20]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c8e:	2320      	movs	r3, #32
 8007c90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c98:	2330      	movs	r3, #48	@ 0x30
 8007c9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e38 <_svfiprintf_r+0x1e4>
 8007c9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ca2:	f04f 0901 	mov.w	r9, #1
 8007ca6:	4623      	mov	r3, r4
 8007ca8:	469a      	mov	sl, r3
 8007caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cae:	b10a      	cbz	r2, 8007cb4 <_svfiprintf_r+0x60>
 8007cb0:	2a25      	cmp	r2, #37	@ 0x25
 8007cb2:	d1f9      	bne.n	8007ca8 <_svfiprintf_r+0x54>
 8007cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8007cb8:	d00b      	beq.n	8007cd2 <_svfiprintf_r+0x7e>
 8007cba:	465b      	mov	r3, fp
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	f7ff ff6b 	bl	8007b9c <__ssputs_r>
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f000 80a7 	beq.w	8007e1a <_svfiprintf_r+0x1c6>
 8007ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cce:	445a      	add	r2, fp
 8007cd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 809f 	beq.w	8007e1a <_svfiprintf_r+0x1c6>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ce6:	f10a 0a01 	add.w	sl, sl, #1
 8007cea:	9304      	str	r3, [sp, #16]
 8007cec:	9307      	str	r3, [sp, #28]
 8007cee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cf4:	4654      	mov	r4, sl
 8007cf6:	2205      	movs	r2, #5
 8007cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cfc:	484e      	ldr	r0, [pc, #312]	@ (8007e38 <_svfiprintf_r+0x1e4>)
 8007cfe:	f7f8 fa87 	bl	8000210 <memchr>
 8007d02:	9a04      	ldr	r2, [sp, #16]
 8007d04:	b9d8      	cbnz	r0, 8007d3e <_svfiprintf_r+0xea>
 8007d06:	06d0      	lsls	r0, r2, #27
 8007d08:	bf44      	itt	mi
 8007d0a:	2320      	movmi	r3, #32
 8007d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d10:	0711      	lsls	r1, r2, #28
 8007d12:	bf44      	itt	mi
 8007d14:	232b      	movmi	r3, #43	@ 0x2b
 8007d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d20:	d015      	beq.n	8007d4e <_svfiprintf_r+0xfa>
 8007d22:	9a07      	ldr	r2, [sp, #28]
 8007d24:	4654      	mov	r4, sl
 8007d26:	2000      	movs	r0, #0
 8007d28:	f04f 0c0a 	mov.w	ip, #10
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d32:	3b30      	subs	r3, #48	@ 0x30
 8007d34:	2b09      	cmp	r3, #9
 8007d36:	d94b      	bls.n	8007dd0 <_svfiprintf_r+0x17c>
 8007d38:	b1b0      	cbz	r0, 8007d68 <_svfiprintf_r+0x114>
 8007d3a:	9207      	str	r2, [sp, #28]
 8007d3c:	e014      	b.n	8007d68 <_svfiprintf_r+0x114>
 8007d3e:	eba0 0308 	sub.w	r3, r0, r8
 8007d42:	fa09 f303 	lsl.w	r3, r9, r3
 8007d46:	4313      	orrs	r3, r2
 8007d48:	9304      	str	r3, [sp, #16]
 8007d4a:	46a2      	mov	sl, r4
 8007d4c:	e7d2      	b.n	8007cf4 <_svfiprintf_r+0xa0>
 8007d4e:	9b03      	ldr	r3, [sp, #12]
 8007d50:	1d19      	adds	r1, r3, #4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	9103      	str	r1, [sp, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bfbb      	ittet	lt
 8007d5a:	425b      	neglt	r3, r3
 8007d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d60:	9307      	strge	r3, [sp, #28]
 8007d62:	9307      	strlt	r3, [sp, #28]
 8007d64:	bfb8      	it	lt
 8007d66:	9204      	strlt	r2, [sp, #16]
 8007d68:	7823      	ldrb	r3, [r4, #0]
 8007d6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d6c:	d10a      	bne.n	8007d84 <_svfiprintf_r+0x130>
 8007d6e:	7863      	ldrb	r3, [r4, #1]
 8007d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d72:	d132      	bne.n	8007dda <_svfiprintf_r+0x186>
 8007d74:	9b03      	ldr	r3, [sp, #12]
 8007d76:	1d1a      	adds	r2, r3, #4
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	9203      	str	r2, [sp, #12]
 8007d7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d80:	3402      	adds	r4, #2
 8007d82:	9305      	str	r3, [sp, #20]
 8007d84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e48 <_svfiprintf_r+0x1f4>
 8007d88:	7821      	ldrb	r1, [r4, #0]
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	4650      	mov	r0, sl
 8007d8e:	f7f8 fa3f 	bl	8000210 <memchr>
 8007d92:	b138      	cbz	r0, 8007da4 <_svfiprintf_r+0x150>
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	eba0 000a 	sub.w	r0, r0, sl
 8007d9a:	2240      	movs	r2, #64	@ 0x40
 8007d9c:	4082      	lsls	r2, r0
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	3401      	adds	r4, #1
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da8:	4824      	ldr	r0, [pc, #144]	@ (8007e3c <_svfiprintf_r+0x1e8>)
 8007daa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007dae:	2206      	movs	r2, #6
 8007db0:	f7f8 fa2e 	bl	8000210 <memchr>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d036      	beq.n	8007e26 <_svfiprintf_r+0x1d2>
 8007db8:	4b21      	ldr	r3, [pc, #132]	@ (8007e40 <_svfiprintf_r+0x1ec>)
 8007dba:	bb1b      	cbnz	r3, 8007e04 <_svfiprintf_r+0x1b0>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	3307      	adds	r3, #7
 8007dc0:	f023 0307 	bic.w	r3, r3, #7
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	9303      	str	r3, [sp, #12]
 8007dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dca:	4433      	add	r3, r6
 8007dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dce:	e76a      	b.n	8007ca6 <_svfiprintf_r+0x52>
 8007dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	e7a8      	b.n	8007d2c <_svfiprintf_r+0xd8>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	3401      	adds	r4, #1
 8007dde:	9305      	str	r3, [sp, #20]
 8007de0:	4619      	mov	r1, r3
 8007de2:	f04f 0c0a 	mov.w	ip, #10
 8007de6:	4620      	mov	r0, r4
 8007de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dec:	3a30      	subs	r2, #48	@ 0x30
 8007dee:	2a09      	cmp	r2, #9
 8007df0:	d903      	bls.n	8007dfa <_svfiprintf_r+0x1a6>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0c6      	beq.n	8007d84 <_svfiprintf_r+0x130>
 8007df6:	9105      	str	r1, [sp, #20]
 8007df8:	e7c4      	b.n	8007d84 <_svfiprintf_r+0x130>
 8007dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dfe:	4604      	mov	r4, r0
 8007e00:	2301      	movs	r3, #1
 8007e02:	e7f0      	b.n	8007de6 <_svfiprintf_r+0x192>
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e44 <_svfiprintf_r+0x1f0>)
 8007e0c:	a904      	add	r1, sp, #16
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7fd fe98 	bl	8005b44 <_printf_float>
 8007e14:	1c42      	adds	r2, r0, #1
 8007e16:	4606      	mov	r6, r0
 8007e18:	d1d6      	bne.n	8007dc8 <_svfiprintf_r+0x174>
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	065b      	lsls	r3, r3, #25
 8007e1e:	f53f af2d 	bmi.w	8007c7c <_svfiprintf_r+0x28>
 8007e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e24:	e72c      	b.n	8007c80 <_svfiprintf_r+0x2c>
 8007e26:	ab03      	add	r3, sp, #12
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4b05      	ldr	r3, [pc, #20]	@ (8007e44 <_svfiprintf_r+0x1f0>)
 8007e2e:	a904      	add	r1, sp, #16
 8007e30:	4638      	mov	r0, r7
 8007e32:	f7fe f91f 	bl	8006074 <_printf_i>
 8007e36:	e7ed      	b.n	8007e14 <_svfiprintf_r+0x1c0>
 8007e38:	08008b28 	.word	0x08008b28
 8007e3c:	08008b32 	.word	0x08008b32
 8007e40:	08005b45 	.word	0x08005b45
 8007e44:	08007b9d 	.word	0x08007b9d
 8007e48:	08008b2e 	.word	0x08008b2e

08007e4c <__sflush_r>:
 8007e4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	0716      	lsls	r6, r2, #28
 8007e56:	4605      	mov	r5, r0
 8007e58:	460c      	mov	r4, r1
 8007e5a:	d454      	bmi.n	8007f06 <__sflush_r+0xba>
 8007e5c:	684b      	ldr	r3, [r1, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dc02      	bgt.n	8007e68 <__sflush_r+0x1c>
 8007e62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dd48      	ble.n	8007efa <__sflush_r+0xae>
 8007e68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e6a:	2e00      	cmp	r6, #0
 8007e6c:	d045      	beq.n	8007efa <__sflush_r+0xae>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e74:	682f      	ldr	r7, [r5, #0]
 8007e76:	6a21      	ldr	r1, [r4, #32]
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	d030      	beq.n	8007ede <__sflush_r+0x92>
 8007e7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	0759      	lsls	r1, r3, #29
 8007e82:	d505      	bpl.n	8007e90 <__sflush_r+0x44>
 8007e84:	6863      	ldr	r3, [r4, #4]
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e8a:	b10b      	cbz	r3, 8007e90 <__sflush_r+0x44>
 8007e8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	2300      	movs	r3, #0
 8007e92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e94:	6a21      	ldr	r1, [r4, #32]
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b0      	blx	r6
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	d106      	bne.n	8007eae <__sflush_r+0x62>
 8007ea0:	6829      	ldr	r1, [r5, #0]
 8007ea2:	291d      	cmp	r1, #29
 8007ea4:	d82b      	bhi.n	8007efe <__sflush_r+0xb2>
 8007ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f50 <__sflush_r+0x104>)
 8007ea8:	410a      	asrs	r2, r1
 8007eaa:	07d6      	lsls	r6, r2, #31
 8007eac:	d427      	bmi.n	8007efe <__sflush_r+0xb2>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	6062      	str	r2, [r4, #4]
 8007eb2:	04d9      	lsls	r1, r3, #19
 8007eb4:	6922      	ldr	r2, [r4, #16]
 8007eb6:	6022      	str	r2, [r4, #0]
 8007eb8:	d504      	bpl.n	8007ec4 <__sflush_r+0x78>
 8007eba:	1c42      	adds	r2, r0, #1
 8007ebc:	d101      	bne.n	8007ec2 <__sflush_r+0x76>
 8007ebe:	682b      	ldr	r3, [r5, #0]
 8007ec0:	b903      	cbnz	r3, 8007ec4 <__sflush_r+0x78>
 8007ec2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ec6:	602f      	str	r7, [r5, #0]
 8007ec8:	b1b9      	cbz	r1, 8007efa <__sflush_r+0xae>
 8007eca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ece:	4299      	cmp	r1, r3
 8007ed0:	d002      	beq.n	8007ed8 <__sflush_r+0x8c>
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7ff f9e0 	bl	8007298 <_free_r>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6363      	str	r3, [r4, #52]	@ 0x34
 8007edc:	e00d      	b.n	8007efa <__sflush_r+0xae>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b0      	blx	r6
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	1c50      	adds	r0, r2, #1
 8007ee8:	d1c9      	bne.n	8007e7e <__sflush_r+0x32>
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0c6      	beq.n	8007e7e <__sflush_r+0x32>
 8007ef0:	2b1d      	cmp	r3, #29
 8007ef2:	d001      	beq.n	8007ef8 <__sflush_r+0xac>
 8007ef4:	2b16      	cmp	r3, #22
 8007ef6:	d11e      	bne.n	8007f36 <__sflush_r+0xea>
 8007ef8:	602f      	str	r7, [r5, #0]
 8007efa:	2000      	movs	r0, #0
 8007efc:	e022      	b.n	8007f44 <__sflush_r+0xf8>
 8007efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f02:	b21b      	sxth	r3, r3
 8007f04:	e01b      	b.n	8007f3e <__sflush_r+0xf2>
 8007f06:	690f      	ldr	r7, [r1, #16]
 8007f08:	2f00      	cmp	r7, #0
 8007f0a:	d0f6      	beq.n	8007efa <__sflush_r+0xae>
 8007f0c:	0793      	lsls	r3, r2, #30
 8007f0e:	680e      	ldr	r6, [r1, #0]
 8007f10:	bf08      	it	eq
 8007f12:	694b      	ldreq	r3, [r1, #20]
 8007f14:	600f      	str	r7, [r1, #0]
 8007f16:	bf18      	it	ne
 8007f18:	2300      	movne	r3, #0
 8007f1a:	eba6 0807 	sub.w	r8, r6, r7
 8007f1e:	608b      	str	r3, [r1, #8]
 8007f20:	f1b8 0f00 	cmp.w	r8, #0
 8007f24:	dde9      	ble.n	8007efa <__sflush_r+0xae>
 8007f26:	6a21      	ldr	r1, [r4, #32]
 8007f28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f2a:	4643      	mov	r3, r8
 8007f2c:	463a      	mov	r2, r7
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b0      	blx	r6
 8007f32:	2800      	cmp	r0, #0
 8007f34:	dc08      	bgt.n	8007f48 <__sflush_r+0xfc>
 8007f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f3e:	81a3      	strh	r3, [r4, #12]
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295
 8007f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f48:	4407      	add	r7, r0
 8007f4a:	eba8 0800 	sub.w	r8, r8, r0
 8007f4e:	e7e7      	b.n	8007f20 <__sflush_r+0xd4>
 8007f50:	dfbffffe 	.word	0xdfbffffe

08007f54 <_fflush_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	690b      	ldr	r3, [r1, #16]
 8007f58:	4605      	mov	r5, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b913      	cbnz	r3, 8007f64 <_fflush_r+0x10>
 8007f5e:	2500      	movs	r5, #0
 8007f60:	4628      	mov	r0, r5
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	b118      	cbz	r0, 8007f6e <_fflush_r+0x1a>
 8007f66:	6a03      	ldr	r3, [r0, #32]
 8007f68:	b90b      	cbnz	r3, 8007f6e <_fflush_r+0x1a>
 8007f6a:	f7fe fa2f 	bl	80063cc <__sinit>
 8007f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f3      	beq.n	8007f5e <_fflush_r+0xa>
 8007f76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f78:	07d0      	lsls	r0, r2, #31
 8007f7a:	d404      	bmi.n	8007f86 <_fflush_r+0x32>
 8007f7c:	0599      	lsls	r1, r3, #22
 8007f7e:	d402      	bmi.n	8007f86 <_fflush_r+0x32>
 8007f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f82:	f7fe fb3a 	bl	80065fa <__retarget_lock_acquire_recursive>
 8007f86:	4628      	mov	r0, r5
 8007f88:	4621      	mov	r1, r4
 8007f8a:	f7ff ff5f 	bl	8007e4c <__sflush_r>
 8007f8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f90:	07da      	lsls	r2, r3, #31
 8007f92:	4605      	mov	r5, r0
 8007f94:	d4e4      	bmi.n	8007f60 <_fflush_r+0xc>
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	059b      	lsls	r3, r3, #22
 8007f9a:	d4e1      	bmi.n	8007f60 <_fflush_r+0xc>
 8007f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f9e:	f7fe fb2d 	bl	80065fc <__retarget_lock_release_recursive>
 8007fa2:	e7dd      	b.n	8007f60 <_fflush_r+0xc>

08007fa4 <memmove>:
 8007fa4:	4288      	cmp	r0, r1
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	eb01 0402 	add.w	r4, r1, r2
 8007fac:	d902      	bls.n	8007fb4 <memmove+0x10>
 8007fae:	4284      	cmp	r4, r0
 8007fb0:	4623      	mov	r3, r4
 8007fb2:	d807      	bhi.n	8007fc4 <memmove+0x20>
 8007fb4:	1e43      	subs	r3, r0, #1
 8007fb6:	42a1      	cmp	r1, r4
 8007fb8:	d008      	beq.n	8007fcc <memmove+0x28>
 8007fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fc2:	e7f8      	b.n	8007fb6 <memmove+0x12>
 8007fc4:	4402      	add	r2, r0
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	428a      	cmp	r2, r1
 8007fca:	d100      	bne.n	8007fce <memmove+0x2a>
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fd6:	e7f7      	b.n	8007fc8 <memmove+0x24>

08007fd8 <_sbrk_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d06      	ldr	r5, [pc, #24]	@ (8007ff4 <_sbrk_r+0x1c>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	f7fa fd68 	bl	8002ab8 <_sbrk>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_sbrk_r+0x1a>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_sbrk_r+0x1a>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20000580 	.word	0x20000580

08007ff8 <memcpy>:
 8007ff8:	440a      	add	r2, r1
 8007ffa:	4291      	cmp	r1, r2
 8007ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008000:	d100      	bne.n	8008004 <memcpy+0xc>
 8008002:	4770      	bx	lr
 8008004:	b510      	push	{r4, lr}
 8008006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800e:	4291      	cmp	r1, r2
 8008010:	d1f9      	bne.n	8008006 <memcpy+0xe>
 8008012:	bd10      	pop	{r4, pc}

08008014 <__assert_func>:
 8008014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008016:	4614      	mov	r4, r2
 8008018:	461a      	mov	r2, r3
 800801a:	4b09      	ldr	r3, [pc, #36]	@ (8008040 <__assert_func+0x2c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4605      	mov	r5, r0
 8008020:	68d8      	ldr	r0, [r3, #12]
 8008022:	b954      	cbnz	r4, 800803a <__assert_func+0x26>
 8008024:	4b07      	ldr	r3, [pc, #28]	@ (8008044 <__assert_func+0x30>)
 8008026:	461c      	mov	r4, r3
 8008028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800802c:	9100      	str	r1, [sp, #0]
 800802e:	462b      	mov	r3, r5
 8008030:	4905      	ldr	r1, [pc, #20]	@ (8008048 <__assert_func+0x34>)
 8008032:	f000 f86f 	bl	8008114 <fiprintf>
 8008036:	f000 f87f 	bl	8008138 <abort>
 800803a:	4b04      	ldr	r3, [pc, #16]	@ (800804c <__assert_func+0x38>)
 800803c:	e7f4      	b.n	8008028 <__assert_func+0x14>
 800803e:	bf00      	nop
 8008040:	20000028 	.word	0x20000028
 8008044:	08008b7e 	.word	0x08008b7e
 8008048:	08008b50 	.word	0x08008b50
 800804c:	08008b43 	.word	0x08008b43

08008050 <_calloc_r>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	fba1 5402 	umull	r5, r4, r1, r2
 8008056:	b93c      	cbnz	r4, 8008068 <_calloc_r+0x18>
 8008058:	4629      	mov	r1, r5
 800805a:	f7ff f991 	bl	8007380 <_malloc_r>
 800805e:	4606      	mov	r6, r0
 8008060:	b928      	cbnz	r0, 800806e <_calloc_r+0x1e>
 8008062:	2600      	movs	r6, #0
 8008064:	4630      	mov	r0, r6
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	220c      	movs	r2, #12
 800806a:	6002      	str	r2, [r0, #0]
 800806c:	e7f9      	b.n	8008062 <_calloc_r+0x12>
 800806e:	462a      	mov	r2, r5
 8008070:	4621      	mov	r1, r4
 8008072:	f7fe fa44 	bl	80064fe <memset>
 8008076:	e7f5      	b.n	8008064 <_calloc_r+0x14>

08008078 <__ascii_mbtowc>:
 8008078:	b082      	sub	sp, #8
 800807a:	b901      	cbnz	r1, 800807e <__ascii_mbtowc+0x6>
 800807c:	a901      	add	r1, sp, #4
 800807e:	b142      	cbz	r2, 8008092 <__ascii_mbtowc+0x1a>
 8008080:	b14b      	cbz	r3, 8008096 <__ascii_mbtowc+0x1e>
 8008082:	7813      	ldrb	r3, [r2, #0]
 8008084:	600b      	str	r3, [r1, #0]
 8008086:	7812      	ldrb	r2, [r2, #0]
 8008088:	1e10      	subs	r0, r2, #0
 800808a:	bf18      	it	ne
 800808c:	2001      	movne	r0, #1
 800808e:	b002      	add	sp, #8
 8008090:	4770      	bx	lr
 8008092:	4610      	mov	r0, r2
 8008094:	e7fb      	b.n	800808e <__ascii_mbtowc+0x16>
 8008096:	f06f 0001 	mvn.w	r0, #1
 800809a:	e7f8      	b.n	800808e <__ascii_mbtowc+0x16>

0800809c <_realloc_r>:
 800809c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a0:	4680      	mov	r8, r0
 80080a2:	4615      	mov	r5, r2
 80080a4:	460c      	mov	r4, r1
 80080a6:	b921      	cbnz	r1, 80080b2 <_realloc_r+0x16>
 80080a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ac:	4611      	mov	r1, r2
 80080ae:	f7ff b967 	b.w	8007380 <_malloc_r>
 80080b2:	b92a      	cbnz	r2, 80080c0 <_realloc_r+0x24>
 80080b4:	f7ff f8f0 	bl	8007298 <_free_r>
 80080b8:	2400      	movs	r4, #0
 80080ba:	4620      	mov	r0, r4
 80080bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c0:	f000 f841 	bl	8008146 <_malloc_usable_size_r>
 80080c4:	4285      	cmp	r5, r0
 80080c6:	4606      	mov	r6, r0
 80080c8:	d802      	bhi.n	80080d0 <_realloc_r+0x34>
 80080ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080ce:	d8f4      	bhi.n	80080ba <_realloc_r+0x1e>
 80080d0:	4629      	mov	r1, r5
 80080d2:	4640      	mov	r0, r8
 80080d4:	f7ff f954 	bl	8007380 <_malloc_r>
 80080d8:	4607      	mov	r7, r0
 80080da:	2800      	cmp	r0, #0
 80080dc:	d0ec      	beq.n	80080b8 <_realloc_r+0x1c>
 80080de:	42b5      	cmp	r5, r6
 80080e0:	462a      	mov	r2, r5
 80080e2:	4621      	mov	r1, r4
 80080e4:	bf28      	it	cs
 80080e6:	4632      	movcs	r2, r6
 80080e8:	f7ff ff86 	bl	8007ff8 <memcpy>
 80080ec:	4621      	mov	r1, r4
 80080ee:	4640      	mov	r0, r8
 80080f0:	f7ff f8d2 	bl	8007298 <_free_r>
 80080f4:	463c      	mov	r4, r7
 80080f6:	e7e0      	b.n	80080ba <_realloc_r+0x1e>

080080f8 <__ascii_wctomb>:
 80080f8:	4603      	mov	r3, r0
 80080fa:	4608      	mov	r0, r1
 80080fc:	b141      	cbz	r1, 8008110 <__ascii_wctomb+0x18>
 80080fe:	2aff      	cmp	r2, #255	@ 0xff
 8008100:	d904      	bls.n	800810c <__ascii_wctomb+0x14>
 8008102:	228a      	movs	r2, #138	@ 0x8a
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	f04f 30ff 	mov.w	r0, #4294967295
 800810a:	4770      	bx	lr
 800810c:	700a      	strb	r2, [r1, #0]
 800810e:	2001      	movs	r0, #1
 8008110:	4770      	bx	lr
	...

08008114 <fiprintf>:
 8008114:	b40e      	push	{r1, r2, r3}
 8008116:	b503      	push	{r0, r1, lr}
 8008118:	4601      	mov	r1, r0
 800811a:	ab03      	add	r3, sp, #12
 800811c:	4805      	ldr	r0, [pc, #20]	@ (8008134 <fiprintf+0x20>)
 800811e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008122:	6800      	ldr	r0, [r0, #0]
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	f000 f83f 	bl	80081a8 <_vfiprintf_r>
 800812a:	b002      	add	sp, #8
 800812c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008130:	b003      	add	sp, #12
 8008132:	4770      	bx	lr
 8008134:	20000028 	.word	0x20000028

08008138 <abort>:
 8008138:	b508      	push	{r3, lr}
 800813a:	2006      	movs	r0, #6
 800813c:	f000 fa08 	bl	8008550 <raise>
 8008140:	2001      	movs	r0, #1
 8008142:	f7fa fc40 	bl	80029c6 <_exit>

08008146 <_malloc_usable_size_r>:
 8008146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800814a:	1f18      	subs	r0, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	bfbc      	itt	lt
 8008150:	580b      	ldrlt	r3, [r1, r0]
 8008152:	18c0      	addlt	r0, r0, r3
 8008154:	4770      	bx	lr

08008156 <__sfputc_r>:
 8008156:	6893      	ldr	r3, [r2, #8]
 8008158:	3b01      	subs	r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	b410      	push	{r4}
 800815e:	6093      	str	r3, [r2, #8]
 8008160:	da08      	bge.n	8008174 <__sfputc_r+0x1e>
 8008162:	6994      	ldr	r4, [r2, #24]
 8008164:	42a3      	cmp	r3, r4
 8008166:	db01      	blt.n	800816c <__sfputc_r+0x16>
 8008168:	290a      	cmp	r1, #10
 800816a:	d103      	bne.n	8008174 <__sfputc_r+0x1e>
 800816c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008170:	f000 b932 	b.w	80083d8 <__swbuf_r>
 8008174:	6813      	ldr	r3, [r2, #0]
 8008176:	1c58      	adds	r0, r3, #1
 8008178:	6010      	str	r0, [r2, #0]
 800817a:	7019      	strb	r1, [r3, #0]
 800817c:	4608      	mov	r0, r1
 800817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008182:	4770      	bx	lr

08008184 <__sfputs_r>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	4606      	mov	r6, r0
 8008188:	460f      	mov	r7, r1
 800818a:	4614      	mov	r4, r2
 800818c:	18d5      	adds	r5, r2, r3
 800818e:	42ac      	cmp	r4, r5
 8008190:	d101      	bne.n	8008196 <__sfputs_r+0x12>
 8008192:	2000      	movs	r0, #0
 8008194:	e007      	b.n	80081a6 <__sfputs_r+0x22>
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	463a      	mov	r2, r7
 800819c:	4630      	mov	r0, r6
 800819e:	f7ff ffda 	bl	8008156 <__sfputc_r>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d1f3      	bne.n	800818e <__sfputs_r+0xa>
 80081a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081a8 <_vfiprintf_r>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	460d      	mov	r5, r1
 80081ae:	b09d      	sub	sp, #116	@ 0x74
 80081b0:	4614      	mov	r4, r2
 80081b2:	4698      	mov	r8, r3
 80081b4:	4606      	mov	r6, r0
 80081b6:	b118      	cbz	r0, 80081c0 <_vfiprintf_r+0x18>
 80081b8:	6a03      	ldr	r3, [r0, #32]
 80081ba:	b90b      	cbnz	r3, 80081c0 <_vfiprintf_r+0x18>
 80081bc:	f7fe f906 	bl	80063cc <__sinit>
 80081c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081c2:	07d9      	lsls	r1, r3, #31
 80081c4:	d405      	bmi.n	80081d2 <_vfiprintf_r+0x2a>
 80081c6:	89ab      	ldrh	r3, [r5, #12]
 80081c8:	059a      	lsls	r2, r3, #22
 80081ca:	d402      	bmi.n	80081d2 <_vfiprintf_r+0x2a>
 80081cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ce:	f7fe fa14 	bl	80065fa <__retarget_lock_acquire_recursive>
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	071b      	lsls	r3, r3, #28
 80081d6:	d501      	bpl.n	80081dc <_vfiprintf_r+0x34>
 80081d8:	692b      	ldr	r3, [r5, #16]
 80081da:	b99b      	cbnz	r3, 8008204 <_vfiprintf_r+0x5c>
 80081dc:	4629      	mov	r1, r5
 80081de:	4630      	mov	r0, r6
 80081e0:	f000 f938 	bl	8008454 <__swsetup_r>
 80081e4:	b170      	cbz	r0, 8008204 <_vfiprintf_r+0x5c>
 80081e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081e8:	07dc      	lsls	r4, r3, #31
 80081ea:	d504      	bpl.n	80081f6 <_vfiprintf_r+0x4e>
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	b01d      	add	sp, #116	@ 0x74
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	89ab      	ldrh	r3, [r5, #12]
 80081f8:	0598      	lsls	r0, r3, #22
 80081fa:	d4f7      	bmi.n	80081ec <_vfiprintf_r+0x44>
 80081fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081fe:	f7fe f9fd 	bl	80065fc <__retarget_lock_release_recursive>
 8008202:	e7f3      	b.n	80081ec <_vfiprintf_r+0x44>
 8008204:	2300      	movs	r3, #0
 8008206:	9309      	str	r3, [sp, #36]	@ 0x24
 8008208:	2320      	movs	r3, #32
 800820a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800820e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008212:	2330      	movs	r3, #48	@ 0x30
 8008214:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083c4 <_vfiprintf_r+0x21c>
 8008218:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800821c:	f04f 0901 	mov.w	r9, #1
 8008220:	4623      	mov	r3, r4
 8008222:	469a      	mov	sl, r3
 8008224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008228:	b10a      	cbz	r2, 800822e <_vfiprintf_r+0x86>
 800822a:	2a25      	cmp	r2, #37	@ 0x25
 800822c:	d1f9      	bne.n	8008222 <_vfiprintf_r+0x7a>
 800822e:	ebba 0b04 	subs.w	fp, sl, r4
 8008232:	d00b      	beq.n	800824c <_vfiprintf_r+0xa4>
 8008234:	465b      	mov	r3, fp
 8008236:	4622      	mov	r2, r4
 8008238:	4629      	mov	r1, r5
 800823a:	4630      	mov	r0, r6
 800823c:	f7ff ffa2 	bl	8008184 <__sfputs_r>
 8008240:	3001      	adds	r0, #1
 8008242:	f000 80a7 	beq.w	8008394 <_vfiprintf_r+0x1ec>
 8008246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008248:	445a      	add	r2, fp
 800824a:	9209      	str	r2, [sp, #36]	@ 0x24
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 809f 	beq.w	8008394 <_vfiprintf_r+0x1ec>
 8008256:	2300      	movs	r3, #0
 8008258:	f04f 32ff 	mov.w	r2, #4294967295
 800825c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008260:	f10a 0a01 	add.w	sl, sl, #1
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	9307      	str	r3, [sp, #28]
 8008268:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800826c:	931a      	str	r3, [sp, #104]	@ 0x68
 800826e:	4654      	mov	r4, sl
 8008270:	2205      	movs	r2, #5
 8008272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008276:	4853      	ldr	r0, [pc, #332]	@ (80083c4 <_vfiprintf_r+0x21c>)
 8008278:	f7f7 ffca 	bl	8000210 <memchr>
 800827c:	9a04      	ldr	r2, [sp, #16]
 800827e:	b9d8      	cbnz	r0, 80082b8 <_vfiprintf_r+0x110>
 8008280:	06d1      	lsls	r1, r2, #27
 8008282:	bf44      	itt	mi
 8008284:	2320      	movmi	r3, #32
 8008286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800828a:	0713      	lsls	r3, r2, #28
 800828c:	bf44      	itt	mi
 800828e:	232b      	movmi	r3, #43	@ 0x2b
 8008290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008294:	f89a 3000 	ldrb.w	r3, [sl]
 8008298:	2b2a      	cmp	r3, #42	@ 0x2a
 800829a:	d015      	beq.n	80082c8 <_vfiprintf_r+0x120>
 800829c:	9a07      	ldr	r2, [sp, #28]
 800829e:	4654      	mov	r4, sl
 80082a0:	2000      	movs	r0, #0
 80082a2:	f04f 0c0a 	mov.w	ip, #10
 80082a6:	4621      	mov	r1, r4
 80082a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ac:	3b30      	subs	r3, #48	@ 0x30
 80082ae:	2b09      	cmp	r3, #9
 80082b0:	d94b      	bls.n	800834a <_vfiprintf_r+0x1a2>
 80082b2:	b1b0      	cbz	r0, 80082e2 <_vfiprintf_r+0x13a>
 80082b4:	9207      	str	r2, [sp, #28]
 80082b6:	e014      	b.n	80082e2 <_vfiprintf_r+0x13a>
 80082b8:	eba0 0308 	sub.w	r3, r0, r8
 80082bc:	fa09 f303 	lsl.w	r3, r9, r3
 80082c0:	4313      	orrs	r3, r2
 80082c2:	9304      	str	r3, [sp, #16]
 80082c4:	46a2      	mov	sl, r4
 80082c6:	e7d2      	b.n	800826e <_vfiprintf_r+0xc6>
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	1d19      	adds	r1, r3, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	9103      	str	r1, [sp, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bfbb      	ittet	lt
 80082d4:	425b      	neglt	r3, r3
 80082d6:	f042 0202 	orrlt.w	r2, r2, #2
 80082da:	9307      	strge	r3, [sp, #28]
 80082dc:	9307      	strlt	r3, [sp, #28]
 80082de:	bfb8      	it	lt
 80082e0:	9204      	strlt	r2, [sp, #16]
 80082e2:	7823      	ldrb	r3, [r4, #0]
 80082e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80082e6:	d10a      	bne.n	80082fe <_vfiprintf_r+0x156>
 80082e8:	7863      	ldrb	r3, [r4, #1]
 80082ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ec:	d132      	bne.n	8008354 <_vfiprintf_r+0x1ac>
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	1d1a      	adds	r2, r3, #4
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	9203      	str	r2, [sp, #12]
 80082f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082fa:	3402      	adds	r4, #2
 80082fc:	9305      	str	r3, [sp, #20]
 80082fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083d4 <_vfiprintf_r+0x22c>
 8008302:	7821      	ldrb	r1, [r4, #0]
 8008304:	2203      	movs	r2, #3
 8008306:	4650      	mov	r0, sl
 8008308:	f7f7 ff82 	bl	8000210 <memchr>
 800830c:	b138      	cbz	r0, 800831e <_vfiprintf_r+0x176>
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	eba0 000a 	sub.w	r0, r0, sl
 8008314:	2240      	movs	r2, #64	@ 0x40
 8008316:	4082      	lsls	r2, r0
 8008318:	4313      	orrs	r3, r2
 800831a:	3401      	adds	r4, #1
 800831c:	9304      	str	r3, [sp, #16]
 800831e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008322:	4829      	ldr	r0, [pc, #164]	@ (80083c8 <_vfiprintf_r+0x220>)
 8008324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008328:	2206      	movs	r2, #6
 800832a:	f7f7 ff71 	bl	8000210 <memchr>
 800832e:	2800      	cmp	r0, #0
 8008330:	d03f      	beq.n	80083b2 <_vfiprintf_r+0x20a>
 8008332:	4b26      	ldr	r3, [pc, #152]	@ (80083cc <_vfiprintf_r+0x224>)
 8008334:	bb1b      	cbnz	r3, 800837e <_vfiprintf_r+0x1d6>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	3307      	adds	r3, #7
 800833a:	f023 0307 	bic.w	r3, r3, #7
 800833e:	3308      	adds	r3, #8
 8008340:	9303      	str	r3, [sp, #12]
 8008342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008344:	443b      	add	r3, r7
 8008346:	9309      	str	r3, [sp, #36]	@ 0x24
 8008348:	e76a      	b.n	8008220 <_vfiprintf_r+0x78>
 800834a:	fb0c 3202 	mla	r2, ip, r2, r3
 800834e:	460c      	mov	r4, r1
 8008350:	2001      	movs	r0, #1
 8008352:	e7a8      	b.n	80082a6 <_vfiprintf_r+0xfe>
 8008354:	2300      	movs	r3, #0
 8008356:	3401      	adds	r4, #1
 8008358:	9305      	str	r3, [sp, #20]
 800835a:	4619      	mov	r1, r3
 800835c:	f04f 0c0a 	mov.w	ip, #10
 8008360:	4620      	mov	r0, r4
 8008362:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008366:	3a30      	subs	r2, #48	@ 0x30
 8008368:	2a09      	cmp	r2, #9
 800836a:	d903      	bls.n	8008374 <_vfiprintf_r+0x1cc>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0c6      	beq.n	80082fe <_vfiprintf_r+0x156>
 8008370:	9105      	str	r1, [sp, #20]
 8008372:	e7c4      	b.n	80082fe <_vfiprintf_r+0x156>
 8008374:	fb0c 2101 	mla	r1, ip, r1, r2
 8008378:	4604      	mov	r4, r0
 800837a:	2301      	movs	r3, #1
 800837c:	e7f0      	b.n	8008360 <_vfiprintf_r+0x1b8>
 800837e:	ab03      	add	r3, sp, #12
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	462a      	mov	r2, r5
 8008384:	4b12      	ldr	r3, [pc, #72]	@ (80083d0 <_vfiprintf_r+0x228>)
 8008386:	a904      	add	r1, sp, #16
 8008388:	4630      	mov	r0, r6
 800838a:	f7fd fbdb 	bl	8005b44 <_printf_float>
 800838e:	4607      	mov	r7, r0
 8008390:	1c78      	adds	r0, r7, #1
 8008392:	d1d6      	bne.n	8008342 <_vfiprintf_r+0x19a>
 8008394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008396:	07d9      	lsls	r1, r3, #31
 8008398:	d405      	bmi.n	80083a6 <_vfiprintf_r+0x1fe>
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	059a      	lsls	r2, r3, #22
 800839e:	d402      	bmi.n	80083a6 <_vfiprintf_r+0x1fe>
 80083a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083a2:	f7fe f92b 	bl	80065fc <__retarget_lock_release_recursive>
 80083a6:	89ab      	ldrh	r3, [r5, #12]
 80083a8:	065b      	lsls	r3, r3, #25
 80083aa:	f53f af1f 	bmi.w	80081ec <_vfiprintf_r+0x44>
 80083ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083b0:	e71e      	b.n	80081f0 <_vfiprintf_r+0x48>
 80083b2:	ab03      	add	r3, sp, #12
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	462a      	mov	r2, r5
 80083b8:	4b05      	ldr	r3, [pc, #20]	@ (80083d0 <_vfiprintf_r+0x228>)
 80083ba:	a904      	add	r1, sp, #16
 80083bc:	4630      	mov	r0, r6
 80083be:	f7fd fe59 	bl	8006074 <_printf_i>
 80083c2:	e7e4      	b.n	800838e <_vfiprintf_r+0x1e6>
 80083c4:	08008b28 	.word	0x08008b28
 80083c8:	08008b32 	.word	0x08008b32
 80083cc:	08005b45 	.word	0x08005b45
 80083d0:	08008185 	.word	0x08008185
 80083d4:	08008b2e 	.word	0x08008b2e

080083d8 <__swbuf_r>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	460e      	mov	r6, r1
 80083dc:	4614      	mov	r4, r2
 80083de:	4605      	mov	r5, r0
 80083e0:	b118      	cbz	r0, 80083ea <__swbuf_r+0x12>
 80083e2:	6a03      	ldr	r3, [r0, #32]
 80083e4:	b90b      	cbnz	r3, 80083ea <__swbuf_r+0x12>
 80083e6:	f7fd fff1 	bl	80063cc <__sinit>
 80083ea:	69a3      	ldr	r3, [r4, #24]
 80083ec:	60a3      	str	r3, [r4, #8]
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	071a      	lsls	r2, r3, #28
 80083f2:	d501      	bpl.n	80083f8 <__swbuf_r+0x20>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	b943      	cbnz	r3, 800840a <__swbuf_r+0x32>
 80083f8:	4621      	mov	r1, r4
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 f82a 	bl	8008454 <__swsetup_r>
 8008400:	b118      	cbz	r0, 800840a <__swbuf_r+0x32>
 8008402:	f04f 37ff 	mov.w	r7, #4294967295
 8008406:	4638      	mov	r0, r7
 8008408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	6922      	ldr	r2, [r4, #16]
 800840e:	1a98      	subs	r0, r3, r2
 8008410:	6963      	ldr	r3, [r4, #20]
 8008412:	b2f6      	uxtb	r6, r6
 8008414:	4283      	cmp	r3, r0
 8008416:	4637      	mov	r7, r6
 8008418:	dc05      	bgt.n	8008426 <__swbuf_r+0x4e>
 800841a:	4621      	mov	r1, r4
 800841c:	4628      	mov	r0, r5
 800841e:	f7ff fd99 	bl	8007f54 <_fflush_r>
 8008422:	2800      	cmp	r0, #0
 8008424:	d1ed      	bne.n	8008402 <__swbuf_r+0x2a>
 8008426:	68a3      	ldr	r3, [r4, #8]
 8008428:	3b01      	subs	r3, #1
 800842a:	60a3      	str	r3, [r4, #8]
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	6022      	str	r2, [r4, #0]
 8008432:	701e      	strb	r6, [r3, #0]
 8008434:	6962      	ldr	r2, [r4, #20]
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	429a      	cmp	r2, r3
 800843a:	d004      	beq.n	8008446 <__swbuf_r+0x6e>
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	07db      	lsls	r3, r3, #31
 8008440:	d5e1      	bpl.n	8008406 <__swbuf_r+0x2e>
 8008442:	2e0a      	cmp	r6, #10
 8008444:	d1df      	bne.n	8008406 <__swbuf_r+0x2e>
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f7ff fd83 	bl	8007f54 <_fflush_r>
 800844e:	2800      	cmp	r0, #0
 8008450:	d0d9      	beq.n	8008406 <__swbuf_r+0x2e>
 8008452:	e7d6      	b.n	8008402 <__swbuf_r+0x2a>

08008454 <__swsetup_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4b29      	ldr	r3, [pc, #164]	@ (80084fc <__swsetup_r+0xa8>)
 8008458:	4605      	mov	r5, r0
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	460c      	mov	r4, r1
 800845e:	b118      	cbz	r0, 8008468 <__swsetup_r+0x14>
 8008460:	6a03      	ldr	r3, [r0, #32]
 8008462:	b90b      	cbnz	r3, 8008468 <__swsetup_r+0x14>
 8008464:	f7fd ffb2 	bl	80063cc <__sinit>
 8008468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846c:	0719      	lsls	r1, r3, #28
 800846e:	d422      	bmi.n	80084b6 <__swsetup_r+0x62>
 8008470:	06da      	lsls	r2, r3, #27
 8008472:	d407      	bmi.n	8008484 <__swsetup_r+0x30>
 8008474:	2209      	movs	r2, #9
 8008476:	602a      	str	r2, [r5, #0]
 8008478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	f04f 30ff 	mov.w	r0, #4294967295
 8008482:	e033      	b.n	80084ec <__swsetup_r+0x98>
 8008484:	0758      	lsls	r0, r3, #29
 8008486:	d512      	bpl.n	80084ae <__swsetup_r+0x5a>
 8008488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800848a:	b141      	cbz	r1, 800849e <__swsetup_r+0x4a>
 800848c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008490:	4299      	cmp	r1, r3
 8008492:	d002      	beq.n	800849a <__swsetup_r+0x46>
 8008494:	4628      	mov	r0, r5
 8008496:	f7fe feff 	bl	8007298 <_free_r>
 800849a:	2300      	movs	r3, #0
 800849c:	6363      	str	r3, [r4, #52]	@ 0x34
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	2300      	movs	r3, #0
 80084a8:	6063      	str	r3, [r4, #4]
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	f043 0308 	orr.w	r3, r3, #8
 80084b4:	81a3      	strh	r3, [r4, #12]
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	b94b      	cbnz	r3, 80084ce <__swsetup_r+0x7a>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c4:	d003      	beq.n	80084ce <__swsetup_r+0x7a>
 80084c6:	4621      	mov	r1, r4
 80084c8:	4628      	mov	r0, r5
 80084ca:	f000 f883 	bl	80085d4 <__smakebuf_r>
 80084ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d2:	f013 0201 	ands.w	r2, r3, #1
 80084d6:	d00a      	beq.n	80084ee <__swsetup_r+0x9a>
 80084d8:	2200      	movs	r2, #0
 80084da:	60a2      	str	r2, [r4, #8]
 80084dc:	6962      	ldr	r2, [r4, #20]
 80084de:	4252      	negs	r2, r2
 80084e0:	61a2      	str	r2, [r4, #24]
 80084e2:	6922      	ldr	r2, [r4, #16]
 80084e4:	b942      	cbnz	r2, 80084f8 <__swsetup_r+0xa4>
 80084e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084ea:	d1c5      	bne.n	8008478 <__swsetup_r+0x24>
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
 80084ee:	0799      	lsls	r1, r3, #30
 80084f0:	bf58      	it	pl
 80084f2:	6962      	ldrpl	r2, [r4, #20]
 80084f4:	60a2      	str	r2, [r4, #8]
 80084f6:	e7f4      	b.n	80084e2 <__swsetup_r+0x8e>
 80084f8:	2000      	movs	r0, #0
 80084fa:	e7f7      	b.n	80084ec <__swsetup_r+0x98>
 80084fc:	20000028 	.word	0x20000028

08008500 <_raise_r>:
 8008500:	291f      	cmp	r1, #31
 8008502:	b538      	push	{r3, r4, r5, lr}
 8008504:	4605      	mov	r5, r0
 8008506:	460c      	mov	r4, r1
 8008508:	d904      	bls.n	8008514 <_raise_r+0x14>
 800850a:	2316      	movs	r3, #22
 800850c:	6003      	str	r3, [r0, #0]
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008516:	b112      	cbz	r2, 800851e <_raise_r+0x1e>
 8008518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800851c:	b94b      	cbnz	r3, 8008532 <_raise_r+0x32>
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f830 	bl	8008584 <_getpid_r>
 8008524:	4622      	mov	r2, r4
 8008526:	4601      	mov	r1, r0
 8008528:	4628      	mov	r0, r5
 800852a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800852e:	f000 b817 	b.w	8008560 <_kill_r>
 8008532:	2b01      	cmp	r3, #1
 8008534:	d00a      	beq.n	800854c <_raise_r+0x4c>
 8008536:	1c59      	adds	r1, r3, #1
 8008538:	d103      	bne.n	8008542 <_raise_r+0x42>
 800853a:	2316      	movs	r3, #22
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	2001      	movs	r0, #1
 8008540:	e7e7      	b.n	8008512 <_raise_r+0x12>
 8008542:	2100      	movs	r1, #0
 8008544:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008548:	4620      	mov	r0, r4
 800854a:	4798      	blx	r3
 800854c:	2000      	movs	r0, #0
 800854e:	e7e0      	b.n	8008512 <_raise_r+0x12>

08008550 <raise>:
 8008550:	4b02      	ldr	r3, [pc, #8]	@ (800855c <raise+0xc>)
 8008552:	4601      	mov	r1, r0
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f7ff bfd3 	b.w	8008500 <_raise_r>
 800855a:	bf00      	nop
 800855c:	20000028 	.word	0x20000028

08008560 <_kill_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	@ (8008580 <_kill_r+0x20>)
 8008564:	2300      	movs	r3, #0
 8008566:	4604      	mov	r4, r0
 8008568:	4608      	mov	r0, r1
 800856a:	4611      	mov	r1, r2
 800856c:	602b      	str	r3, [r5, #0]
 800856e:	f7fa fa1a 	bl	80029a6 <_kill>
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	d102      	bne.n	800857c <_kill_r+0x1c>
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	b103      	cbz	r3, 800857c <_kill_r+0x1c>
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	bd38      	pop	{r3, r4, r5, pc}
 800857e:	bf00      	nop
 8008580:	20000580 	.word	0x20000580

08008584 <_getpid_r>:
 8008584:	f7fa ba07 	b.w	8002996 <_getpid>

08008588 <__swhatbuf_r>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	460c      	mov	r4, r1
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	2900      	cmp	r1, #0
 8008592:	b096      	sub	sp, #88	@ 0x58
 8008594:	4615      	mov	r5, r2
 8008596:	461e      	mov	r6, r3
 8008598:	da0d      	bge.n	80085b6 <__swhatbuf_r+0x2e>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	bf14      	ite	ne
 80085a6:	2340      	movne	r3, #64	@ 0x40
 80085a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085ac:	2000      	movs	r0, #0
 80085ae:	6031      	str	r1, [r6, #0]
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	b016      	add	sp, #88	@ 0x58
 80085b4:	bd70      	pop	{r4, r5, r6, pc}
 80085b6:	466a      	mov	r2, sp
 80085b8:	f000 f848 	bl	800864c <_fstat_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	dbec      	blt.n	800859a <__swhatbuf_r+0x12>
 80085c0:	9901      	ldr	r1, [sp, #4]
 80085c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085ca:	4259      	negs	r1, r3
 80085cc:	4159      	adcs	r1, r3
 80085ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085d2:	e7eb      	b.n	80085ac <__swhatbuf_r+0x24>

080085d4 <__smakebuf_r>:
 80085d4:	898b      	ldrh	r3, [r1, #12]
 80085d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d8:	079d      	lsls	r5, r3, #30
 80085da:	4606      	mov	r6, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	d507      	bpl.n	80085f0 <__smakebuf_r+0x1c>
 80085e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	6123      	str	r3, [r4, #16]
 80085e8:	2301      	movs	r3, #1
 80085ea:	6163      	str	r3, [r4, #20]
 80085ec:	b003      	add	sp, #12
 80085ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085f0:	ab01      	add	r3, sp, #4
 80085f2:	466a      	mov	r2, sp
 80085f4:	f7ff ffc8 	bl	8008588 <__swhatbuf_r>
 80085f8:	9f00      	ldr	r7, [sp, #0]
 80085fa:	4605      	mov	r5, r0
 80085fc:	4639      	mov	r1, r7
 80085fe:	4630      	mov	r0, r6
 8008600:	f7fe febe 	bl	8007380 <_malloc_r>
 8008604:	b948      	cbnz	r0, 800861a <__smakebuf_r+0x46>
 8008606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860a:	059a      	lsls	r2, r3, #22
 800860c:	d4ee      	bmi.n	80085ec <__smakebuf_r+0x18>
 800860e:	f023 0303 	bic.w	r3, r3, #3
 8008612:	f043 0302 	orr.w	r3, r3, #2
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	e7e2      	b.n	80085e0 <__smakebuf_r+0xc>
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	6020      	str	r0, [r4, #0]
 800861e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800862a:	b15b      	cbz	r3, 8008644 <__smakebuf_r+0x70>
 800862c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f81d 	bl	8008670 <_isatty_r>
 8008636:	b128      	cbz	r0, 8008644 <__smakebuf_r+0x70>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	f043 0301 	orr.w	r3, r3, #1
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	431d      	orrs	r5, r3
 8008648:	81a5      	strh	r5, [r4, #12]
 800864a:	e7cf      	b.n	80085ec <__smakebuf_r+0x18>

0800864c <_fstat_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d07      	ldr	r5, [pc, #28]	@ (800866c <_fstat_r+0x20>)
 8008650:	2300      	movs	r3, #0
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	4611      	mov	r1, r2
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	f7fa fa04 	bl	8002a66 <_fstat>
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	d102      	bne.n	8008668 <_fstat_r+0x1c>
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	b103      	cbz	r3, 8008668 <_fstat_r+0x1c>
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	bd38      	pop	{r3, r4, r5, pc}
 800866a:	bf00      	nop
 800866c:	20000580 	.word	0x20000580

08008670 <_isatty_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4d06      	ldr	r5, [pc, #24]	@ (800868c <_isatty_r+0x1c>)
 8008674:	2300      	movs	r3, #0
 8008676:	4604      	mov	r4, r0
 8008678:	4608      	mov	r0, r1
 800867a:	602b      	str	r3, [r5, #0]
 800867c:	f7fa fa03 	bl	8002a86 <_isatty>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_isatty_r+0x1a>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_isatty_r+0x1a>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20000580 	.word	0x20000580

08008690 <_init>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	bf00      	nop
 8008694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008696:	bc08      	pop	{r3}
 8008698:	469e      	mov	lr, r3
 800869a:	4770      	bx	lr

0800869c <_fini>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr
